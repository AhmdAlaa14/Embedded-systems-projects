
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  000031d8  0000326c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ec  008000ec  000032f8  2**0
                  ALLOC
  3 .stab         00002dcc  00000000  00000000  000032f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000114f  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007213  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007353  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ada4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b95f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 */
void MC1Init(void);
/*******************************************************************************
 *                                Application                                  *
 *******************************************************************************/
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6a 97       	sbiw	r28, 0x1a	; 26
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * 6th for the enter ASCII = 13
	 * 7th for the command needed to be done the other MC
	 */
	uint8 password[7];
	uint8 operation;												/* to hold the wanted operation from the user */
	uint8 passwordComResult=INCORRECT;								/* to hold the result of the comparing password process*/
     b5a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 limitStatus;												/* to hold if the number of the wrong password entries */
	MC1Init();														/* to initialize the peripherals used in MC1*/
     b5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MC1Init>
	SetPassword(password);											/* To set the password for the first time*/
     b60:	ce 01       	movw	r24, r28
     b62:	42 96       	adiw	r24, 0x12	; 18
     b64:	0e 94 90 06 	call	0xd20	; 0xd20 <SetPassword>

	while(1){
		LCD_clearScreen();											/* Clearing the LCD*/
     b68:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
		/* Printing the menu on the LCD */
		LCD_displayString("+ open door ");
     b6c:	80 e6       	ldi	r24, 0x60	; 96
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"- change pass");
     b74:	2d e6       	ldi	r18, 0x6D	; 109
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	a9 01       	movw	r20, r18
     b7e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayStringRowColumn>
		LCD_moveCursor(2,0);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_moveCursor>
		operation=KEYPAD_getPressedKey();							/* to get he wanted operation from the user */
     b8a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_getPressedKey>
     b8e:	89 8b       	std	Y+17, r24	; 0x11
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	aa e7       	ldi	r26, 0x7A	; 122
     b96:	b3 e4       	ldi	r27, 0x43	; 67
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	ad 87       	std	Y+13, r26	; 0x0d
     b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a ef       	ldi	r20, 0xFA	; 250
     bae:	54 e4       	ldi	r21, 0x44	; 68
     bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8f 83       	std	Y+7, r24	; 0x07
     bba:	98 87       	std	Y+8, r25	; 0x08
     bbc:	a9 87       	std	Y+9, r26	; 0x09
     bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <main+0x9c>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <main+0x11a>
	else if (__tmp > 65535)
     be2:	6f 81       	ldd	r22, Y+7	; 0x07
     be4:	78 85       	ldd	r23, Y+8	; 0x08
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <main+0xfc>
     c24:	88 ec       	ldi	r24, 0xC8	; 200
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <main+0xea>
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <main+0xde>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <main+0x126>
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		switch(operation){
     c74:	89 89       	ldd	r24, Y+17	; 0x11
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3a 8f       	std	Y+26, r19	; 0x1a
     c7c:	29 8f       	std	Y+25, r18	; 0x19
     c7e:	89 8d       	ldd	r24, Y+25	; 0x19
     c80:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c82:	8b 32       	cpi	r24, 0x2B	; 43
     c84:	91 05       	cpc	r25, r1
     c86:	31 f0       	breq	.+12     	; 0xc94 <main+0x14e>
     c88:	29 8d       	ldd	r18, Y+25	; 0x19
     c8a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c8c:	2d 32       	cpi	r18, 0x2D	; 45
     c8e:	31 05       	cpc	r19, r1
     c90:	19 f1       	breq	.+70     	; 0xcd8 <main+0x192>
     c92:	6a cf       	rjmp	.-300    	; 0xb68 <main+0x22>
		case '+':
			/* a do while loop to get the password from the user and it's only terminated if the password is correct or the
			 * the password has been entered wrong for 3 times in a row  */
			do{
				GetPassword(password);								/* to get the password from the user*/
     c94:	ce 01       	movw	r24, r28
     c96:	42 96       	adiw	r24, 0x12	; 18
     c98:	0e 94 b7 09 	call	0x136e	; 0x136e <GetPassword>
				password[6]=OPEN_DOOR;								/* putting the operation in the password array */
     c9c:	8b e2       	ldi	r24, 0x2B	; 43
     c9e:	88 8f       	std	Y+24, r24	; 0x18
				SendPassword(password);								/* sending the password array to the other MC*/
     ca0:	ce 01       	movw	r24, r28
     ca2:	42 96       	adiw	r24, 0x12	; 18
     ca4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <SendPassword>
				passwordComResult=UART_recieveByte();				/* getting the result of the comparison from the other MC*/
     ca8:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
     cac:	88 8b       	std	Y+16, r24	; 0x10
				limitStatus=UART_recieveByte();						/* getting if the limit of wrong passwords is passed or not */
     cae:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
     cb2:	8f 87       	std	Y+15, r24	; 0x0f
			}while((passwordComResult==INCORRECT)&&(limitStatus==LIMIT_NOT_PASSED));
     cb4:	88 89       	ldd	r24, Y+16	; 0x10
     cb6:	88 23       	and	r24, r24
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <main+0x17a>
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	8e 3f       	cpi	r24, 0xFE	; 254
     cbe:	51 f3       	breq	.-44     	; 0xc94 <main+0x14e>
			/* if the limit is passed an error will be displayed on the LCD */
			if(limitStatus==LIMIT_PASSED){
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	8f 3f       	cpi	r24, 0xFF	; 255
     cc4:	11 f4       	brne	.+4      	; 0xcca <main+0x184>
				Alarm();
     cc6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Alarm>
			}
			/* if the password is correct the door will open and display the status of the door on the LCD */
			if(passwordComResult==CORRECT){
     cca:	88 89       	ldd	r24, Y+16	; 0x10
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <main+0x18c>
     cd0:	4b cf       	rjmp	.-362    	; 0xb68 <main+0x22>
				OpenDoor();
     cd2:	0e 94 c4 0b 	call	0x1788	; 0x1788 <OpenDoor>
     cd6:	48 cf       	rjmp	.-368    	; 0xb68 <main+0x22>
			break;
		case '-':
			/* a do while loop to get the password from the user and it's only terminated if the password is correct or the
			 * the password has been entered wrong for 3 times in a row  */
			do{
				GetPassword(password);								/* to get the password from the user*/
     cd8:	ce 01       	movw	r24, r28
     cda:	42 96       	adiw	r24, 0x12	; 18
     cdc:	0e 94 b7 09 	call	0x136e	; 0x136e <GetPassword>
				password[6]=CHANGE_PASSWORD;						/* putting the operation in the password array */
     ce0:	8d e2       	ldi	r24, 0x2D	; 45
     ce2:	88 8f       	std	Y+24, r24	; 0x18
				SendPassword(password);								/* sending the password array to the other MC*/
     ce4:	ce 01       	movw	r24, r28
     ce6:	42 96       	adiw	r24, 0x12	; 18
     ce8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <SendPassword>
				passwordComResult=UART_recieveByte();				/* getting the result of the comparison from the other MC*/
     cec:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
     cf0:	88 8b       	std	Y+16, r24	; 0x10
				limitStatus=UART_recieveByte();						/* getting if the limit of wrong passwords is passed or not */
     cf2:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
     cf6:	8f 87       	std	Y+15, r24	; 0x0f
			}while((passwordComResult==INCORRECT)&&(limitStatus==LIMIT_NOT_PASSED));
     cf8:	88 89       	ldd	r24, Y+16	; 0x10
     cfa:	88 23       	and	r24, r24
     cfc:	19 f4       	brne	.+6      	; 0xd04 <main+0x1be>
     cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     d00:	8e 3f       	cpi	r24, 0xFE	; 254
     d02:	51 f3       	breq	.-44     	; 0xcd8 <main+0x192>
			/* if the limit is passed an error will be displayed on the LCD */
			if(limitStatus==LIMIT_PASSED){
     d04:	8f 85       	ldd	r24, Y+15	; 0x0f
     d06:	8f 3f       	cpi	r24, 0xFF	; 255
     d08:	11 f4       	brne	.+4      	; 0xd0e <main+0x1c8>
				Alarm();
     d0a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <Alarm>
			}
			/* if the password is correct it will ask the user to enter the new password */
			if(passwordComResult==CORRECT){
     d0e:	88 89       	ldd	r24, Y+16	; 0x10
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f0       	breq	.+2      	; 0xd16 <main+0x1d0>
     d14:	29 cf       	rjmp	.-430    	; 0xb68 <main+0x22>
				SetPassword(password);
     d16:	ce 01       	movw	r24, r28
     d18:	42 96       	adiw	r24, 0x12	; 18
     d1a:	0e 94 90 06 	call	0xd20	; 0xd20 <SetPassword>
     d1e:	24 cf       	rjmp	.-440    	; 0xb68 <main+0x22>

00000d20 <SetPassword>:
 * IN:
 * uint8 *ptr_password
 * OUT:
 * NONE
 */
void SetPassword(uint8 * ptr_password){
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	c1 55       	subi	r28, 0x51	; 81
     d2e:	d0 40       	sbci	r29, 0x00	; 0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	fe 01       	movw	r30, r28
     d3c:	e0 5b       	subi	r30, 0xB0	; 176
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
	uint8 i=0;														/* for loop counter */
     d44:	fe 01       	movw	r30, r28
     d46:	e8 5b       	subi	r30, 0xB8	; 184
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	10 82       	st	Z, r1
	uint8 compareFlag=0;											/* a flag to indicate if the passwords are matched or not */
     d4c:	fe 01       	movw	r30, r28
     d4e:	e9 5b       	subi	r30, 0xB9	; 185
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	10 82       	st	Z, r1
	uint8 repeatedPassword[7];										/* an array to hold the second entry of the password */
	LCD_clearScreen();												/* clearing the screen before printing anything*/
     d54:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
	do {
		compareFlag=0;
     d58:	fe 01       	movw	r30, r28
     d5a:	e9 5b       	subi	r30, 0xB9	; 185
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	10 82       	st	Z, r1
		LCD_clearScreen();											/* to clear the LCD screen */
     d60:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
		GetPassword(ptr_password);										/* to get the password from the user */
     d64:	fe 01       	movw	r30, r28
     d66:	e0 5b       	subi	r30, 0xB0	; 176
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	0e 94 b7 09 	call	0x136e	; 0x136e <GetPassword>
		LCD_moveCursor(2,0);										/* to move the cursor to the third row */
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_moveCursor>
		LCD_displayString("Reenter pass"); 							/* printing the string "Reenter password "*/
     d7a:	8b e7       	ldi	r24, 0x7B	; 123
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
		LCD_moveCursor(3,0);										/* to move the cursor to the fourth row */
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_moveCursor>
		/*
		 * a for loop to get the pressed keys from the user and to print '*' on the LCD and compare the repeated password to the first one
		 */
		for(i=0;i<PASSWORD_SIZE;i++){
     d8a:	fe 01       	movw	r30, r28
     d8c:	e8 5b       	subi	r30, 0xB8	; 184
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	10 82       	st	Z, r1
     d92:	36 c1       	rjmp	.+620    	; 0x1000 <SetPassword+0x2e0>
     d94:	fe 01       	movw	r30, r28
     d96:	ed 5b       	subi	r30, 0xBD	; 189
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	aa e7       	ldi	r26, 0x7A	; 122
     da0:	b3 e4       	ldi	r27, 0x43	; 67
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	8e 01       	movw	r16, r28
     dac:	01 5c       	subi	r16, 0xC1	; 193
     dae:	1f 4f       	sbci	r17, 0xFF	; 255
     db0:	fe 01       	movw	r30, r28
     db2:	ed 5b       	subi	r30, 0xBD	; 189
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a ef       	ldi	r20, 0xFA	; 250
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	80 83       	st	Z, r24
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	a2 83       	std	Z+2, r26	; 0x02
     dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd8:	fe 01       	movw	r30, r28
     dda:	ff 96       	adiw	r30, 0x3f	; 63
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <SetPassword+0xde>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9e af       	std	Y+62, r25	; 0x3e
     dfa:	8d af       	std	Y+61, r24	; 0x3d
     dfc:	46 c0       	rjmp	.+140    	; 0xe8a <SetPassword+0x16a>
	else if (__tmp > 65535)
     dfe:	fe 01       	movw	r30, r28
     e00:	ff 96       	adiw	r30, 0x3f	; 63
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	64 f5       	brge	.+88     	; 0xe72 <SetPassword+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	fe 01       	movw	r30, r28
     e1c:	ed 5b       	subi	r30, 0xBD	; 189
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e af       	std	Y+62, r25	; 0x3e
     e46:	8d af       	std	Y+61, r24	; 0x3d
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <SetPassword+0x148>
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c af       	std	Y+60, r25	; 0x3c
     e50:	8b af       	std	Y+59, r24	; 0x3b
     e52:	8b ad       	ldd	r24, Y+59	; 0x3b
     e54:	9c ad       	ldd	r25, Y+60	; 0x3c
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <SetPassword+0x136>
     e5a:	9c af       	std	Y+60, r25	; 0x3c
     e5c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d ad       	ldd	r24, Y+61	; 0x3d
     e60:	9e ad       	ldd	r25, Y+62	; 0x3e
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9e af       	std	Y+62, r25	; 0x3e
     e66:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d ad       	ldd	r24, Y+61	; 0x3d
     e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <SetPassword+0x12a>
     e70:	16 c0       	rjmp	.+44     	; 0xe9e <SetPassword+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	fe 01       	movw	r30, r28
     e74:	ff 96       	adiw	r30, 0x3f	; 63
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e af       	std	Y+62, r25	; 0x3e
     e88:	8d af       	std	Y+61, r24	; 0x3d
     e8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8e:	9a af       	std	Y+58, r25	; 0x3a
     e90:	89 af       	std	Y+57, r24	; 0x39
     e92:	89 ad       	ldd	r24, Y+57	; 0x39
     e94:	9a ad       	ldd	r25, Y+58	; 0x3a
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <SetPassword+0x176>
     e9a:	9a af       	std	Y+58, r25	; 0x3a
     e9c:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(250);
			repeatedPassword[i]=KEYPAD_getPressedKey();
     e9e:	fe 01       	movw	r30, r28
     ea0:	e8 5b       	subi	r30, 0xB8	; 184
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 81       	ld	r24, Z
     ea6:	08 2f       	mov	r16, r24
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_getPressedKey>
     eae:	28 2f       	mov	r18, r24
     eb0:	ce 01       	movw	r24, r28
     eb2:	87 5b       	subi	r24, 0xB7	; 183
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	e0 0f       	add	r30, r16
     eba:	f1 1f       	adc	r31, r17
     ebc:	20 83       	st	Z, r18
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	aa e7       	ldi	r26, 0x7A	; 122
     ec4:	b3 e4       	ldi	r27, 0x43	; 67
     ec6:	8d ab       	std	Y+53, r24	; 0x35
     ec8:	9e ab       	std	Y+54, r25	; 0x36
     eca:	af ab       	std	Y+55, r26	; 0x37
     ecc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	6d a9       	ldd	r22, Y+53	; 0x35
     ed0:	7e a9       	ldd	r23, Y+54	; 0x36
     ed2:	8f a9       	ldd	r24, Y+55	; 0x37
     ed4:	98 ad       	ldd	r25, Y+56	; 0x38
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a ef       	ldi	r20, 0xFA	; 250
     edc:	54 e4       	ldi	r21, 0x44	; 68
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	89 ab       	std	Y+49, r24	; 0x31
     ee8:	9a ab       	std	Y+50, r25	; 0x32
     eea:	ab ab       	std	Y+51, r26	; 0x33
     eec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     eee:	69 a9       	ldd	r22, Y+49	; 0x31
     ef0:	7a a9       	ldd	r23, Y+50	; 0x32
     ef2:	8b a9       	ldd	r24, Y+51	; 0x33
     ef4:	9c a9       	ldd	r25, Y+52	; 0x34
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	2c f4       	brge	.+10     	; 0xf10 <SetPassword+0x1f0>
		__ticks = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	98 ab       	std	Y+48, r25	; 0x30
     f0c:	8f a7       	std	Y+47, r24	; 0x2f
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <SetPassword+0x26e>
	else if (__tmp > 65535)
     f10:	69 a9       	ldd	r22, Y+49	; 0x31
     f12:	7a a9       	ldd	r23, Y+50	; 0x32
     f14:	8b a9       	ldd	r24, Y+51	; 0x33
     f16:	9c a9       	ldd	r25, Y+52	; 0x34
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	4c f5       	brge	.+82     	; 0xf7a <SetPassword+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	6d a9       	ldd	r22, Y+53	; 0x35
     f2a:	7e a9       	ldd	r23, Y+54	; 0x36
     f2c:	8f a9       	ldd	r24, Y+55	; 0x37
     f2e:	98 ad       	ldd	r25, Y+56	; 0x38
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	98 ab       	std	Y+48, r25	; 0x30
     f4e:	8f a7       	std	Y+47, r24	; 0x2f
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <SetPassword+0x250>
     f52:	88 ec       	ldi	r24, 0xC8	; 200
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9e a7       	std	Y+46, r25	; 0x2e
     f58:	8d a7       	std	Y+45, r24	; 0x2d
     f5a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f5c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <SetPassword+0x23e>
     f62:	9e a7       	std	Y+46, r25	; 0x2e
     f64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8f a5       	ldd	r24, Y+47	; 0x2f
     f68:	98 a9       	ldd	r25, Y+48	; 0x30
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	98 ab       	std	Y+48, r25	; 0x30
     f6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8f a5       	ldd	r24, Y+47	; 0x2f
     f72:	98 a9       	ldd	r25, Y+48	; 0x30
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f7       	brne	.-38     	; 0xf52 <SetPassword+0x232>
     f78:	14 c0       	rjmp	.+40     	; 0xfa2 <SetPassword+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	69 a9       	ldd	r22, Y+49	; 0x31
     f7c:	7a a9       	ldd	r23, Y+50	; 0x32
     f7e:	8b a9       	ldd	r24, Y+51	; 0x33
     f80:	9c a9       	ldd	r25, Y+52	; 0x34
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	98 ab       	std	Y+48, r25	; 0x30
     f8c:	8f a7       	std	Y+47, r24	; 0x2f
     f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f90:	98 a9       	ldd	r25, Y+48	; 0x30
     f92:	9c a7       	std	Y+44, r25	; 0x2c
     f94:	8b a7       	std	Y+43, r24	; 0x2b
     f96:	8b a5       	ldd	r24, Y+43	; 0x2b
     f98:	9c a5       	ldd	r25, Y+44	; 0x2c
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <SetPassword+0x27a>
     f9e:	9c a7       	std	Y+44, r25	; 0x2c
     fa0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(250);
			LCD_displayCharacter('*');
     fa2:	8a e2       	ldi	r24, 0x2A	; 42
     fa4:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayCharacter>
			if(repeatedPassword[i]!=ptr_password[i]){
     fa8:	fe 01       	movw	r30, r28
     faa:	e8 5b       	subi	r30, 0xB8	; 184
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	ce 01       	movw	r24, r28
     fb6:	87 5b       	subi	r24, 0xB7	; 183
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	fc 01       	movw	r30, r24
     fbc:	e2 0f       	add	r30, r18
     fbe:	f3 1f       	adc	r31, r19
     fc0:	40 81       	ld	r20, Z
     fc2:	fe 01       	movw	r30, r28
     fc4:	e8 5b       	subi	r30, 0xB8	; 184
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	fe 01       	movw	r30, r28
     fd0:	e0 5b       	subi	r30, 0xB0	; 176
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	fc 01       	movw	r30, r24
     fda:	e2 0f       	add	r30, r18
     fdc:	f3 1f       	adc	r31, r19
     fde:	80 81       	ld	r24, Z
     fe0:	48 17       	cp	r20, r24
     fe2:	29 f0       	breq	.+10     	; 0xfee <SetPassword+0x2ce>
				compareFlag=1;
     fe4:	fe 01       	movw	r30, r28
     fe6:	e9 5b       	subi	r30, 0xB9	; 185
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
		LCD_displayString("Reenter pass"); 							/* printing the string "Reenter password "*/
		LCD_moveCursor(3,0);										/* to move the cursor to the fourth row */
		/*
		 * a for loop to get the pressed keys from the user and to print '*' on the LCD and compare the repeated password to the first one
		 */
		for(i=0;i<PASSWORD_SIZE;i++){
     fee:	de 01       	movw	r26, r28
     ff0:	a8 5b       	subi	r26, 0xB8	; 184
     ff2:	bf 4f       	sbci	r27, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	e8 5b       	subi	r30, 0xB8	; 184
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	8c 93       	st	X, r24
    1000:	fe 01       	movw	r30, r28
    1002:	e8 5b       	subi	r30, 0xB8	; 184
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	08 f4       	brcc	.+2      	; 0x100e <SetPassword+0x2ee>
    100c:	c3 ce       	rjmp	.-634    	; 0xd94 <SetPassword+0x74>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	aa e7       	ldi	r26, 0x7A	; 122
    1014:	b3 e4       	ldi	r27, 0x43	; 67
    1016:	8f a3       	std	Y+39, r24	; 0x27
    1018:	98 a7       	std	Y+40, r25	; 0x28
    101a:	a9 a7       	std	Y+41, r26	; 0x29
    101c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101e:	6f a1       	ldd	r22, Y+39	; 0x27
    1020:	78 a5       	ldd	r23, Y+40	; 0x28
    1022:	89 a5       	ldd	r24, Y+41	; 0x29
    1024:	9a a5       	ldd	r25, Y+42	; 0x2a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a ef       	ldi	r20, 0xFA	; 250
    102c:	54 e4       	ldi	r21, 0x44	; 68
    102e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8b a3       	std	Y+35, r24	; 0x23
    1038:	9c a3       	std	Y+36, r25	; 0x24
    103a:	ad a3       	std	Y+37, r26	; 0x25
    103c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    103e:	6b a1       	ldd	r22, Y+35	; 0x23
    1040:	7c a1       	ldd	r23, Y+36	; 0x24
    1042:	8d a1       	ldd	r24, Y+37	; 0x25
    1044:	9e a1       	ldd	r25, Y+38	; 0x26
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e8       	ldi	r20, 0x80	; 128
    104c:	5f e3       	ldi	r21, 0x3F	; 63
    104e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1052:	88 23       	and	r24, r24
    1054:	2c f4       	brge	.+10     	; 0x1060 <SetPassword+0x340>
		__ticks = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
    105e:	3f c0       	rjmp	.+126    	; 0x10de <SetPassword+0x3be>
	else if (__tmp > 65535)
    1060:	6b a1       	ldd	r22, Y+35	; 0x23
    1062:	7c a1       	ldd	r23, Y+36	; 0x24
    1064:	8d a1       	ldd	r24, Y+37	; 0x25
    1066:	9e a1       	ldd	r25, Y+38	; 0x26
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	4f e7       	ldi	r20, 0x7F	; 127
    106e:	57 e4       	ldi	r21, 0x47	; 71
    1070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1074:	18 16       	cp	r1, r24
    1076:	4c f5       	brge	.+82     	; 0x10ca <SetPassword+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1078:	6f a1       	ldd	r22, Y+39	; 0x27
    107a:	78 a5       	ldd	r23, Y+40	; 0x28
    107c:	89 a5       	ldd	r24, Y+41	; 0x29
    107e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e2       	ldi	r20, 0x20	; 32
    1086:	51 e4       	ldi	r21, 0x41	; 65
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <SetPassword+0x3a0>
    10a2:	88 ec       	ldi	r24, 0xC8	; 200
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	98 a3       	std	Y+32, r25	; 0x20
    10a8:	8f 8f       	std	Y+31, r24	; 0x1f
    10aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ac:	98 a1       	ldd	r25, Y+32	; 0x20
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <SetPassword+0x38e>
    10b2:	98 a3       	std	Y+32, r25	; 0x20
    10b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	89 a1       	ldd	r24, Y+33	; 0x21
    10b8:	9a a1       	ldd	r25, Y+34	; 0x22
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	9a a3       	std	Y+34, r25	; 0x22
    10be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f7       	brne	.-38     	; 0x10a2 <SetPassword+0x382>
    10c8:	14 c0       	rjmp	.+40     	; 0x10f2 <SetPassword+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ca:	6b a1       	ldd	r22, Y+35	; 0x23
    10cc:	7c a1       	ldd	r23, Y+36	; 0x24
    10ce:	8d a1       	ldd	r24, Y+37	; 0x25
    10d0:	9e a1       	ldd	r25, Y+38	; 0x26
    10d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	9a a3       	std	Y+34, r25	; 0x22
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	89 a1       	ldd	r24, Y+33	; 0x21
    10e0:	9a a1       	ldd	r25, Y+34	; 0x22
    10e2:	9e 8f       	std	Y+30, r25	; 0x1e
    10e4:	8d 8f       	std	Y+29, r24	; 0x1d
    10e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <SetPassword+0x3ca>
    10ee:	9e 8f       	std	Y+30, r25	; 0x1e
    10f0:	8d 8f       	std	Y+29, r24	; 0x1d
			if(repeatedPassword[i]!=ptr_password[i]){
				compareFlag=1;
			}
		}
		_delay_ms(250);
		repeatedPassword[5]=KEYPAD_getPressedKey();					/* to get the enter from the user */
    10f2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_getPressedKey>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e7 5b       	subi	r30, 0xB7	; 183
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	85 83       	std	Z+5, r24	; 0x05
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	aa e7       	ldi	r26, 0x7A	; 122
    1104:	b3 e4       	ldi	r27, 0x43	; 67
    1106:	89 8f       	std	Y+25, r24	; 0x19
    1108:	9a 8f       	std	Y+26, r25	; 0x1a
    110a:	ab 8f       	std	Y+27, r26	; 0x1b
    110c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110e:	69 8d       	ldd	r22, Y+25	; 0x19
    1110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a ef       	ldi	r20, 0xFA	; 250
    111c:	54 e4       	ldi	r21, 0x44	; 68
    111e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	8d 8b       	std	Y+21, r24	; 0x15
    1128:	9e 8b       	std	Y+22, r25	; 0x16
    112a:	af 8b       	std	Y+23, r26	; 0x17
    112c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    112e:	6d 89       	ldd	r22, Y+21	; 0x15
    1130:	7e 89       	ldd	r23, Y+22	; 0x16
    1132:	8f 89       	ldd	r24, Y+23	; 0x17
    1134:	98 8d       	ldd	r25, Y+24	; 0x18
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1142:	88 23       	and	r24, r24
    1144:	2c f4       	brge	.+10     	; 0x1150 <SetPassword+0x430>
		__ticks = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c 8b       	std	Y+20, r25	; 0x14
    114c:	8b 8b       	std	Y+19, r24	; 0x13
    114e:	3f c0       	rjmp	.+126    	; 0x11ce <SetPassword+0x4ae>
	else if (__tmp > 65535)
    1150:	6d 89       	ldd	r22, Y+21	; 0x15
    1152:	7e 89       	ldd	r23, Y+22	; 0x16
    1154:	8f 89       	ldd	r24, Y+23	; 0x17
    1156:	98 8d       	ldd	r25, Y+24	; 0x18
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	3f ef       	ldi	r19, 0xFF	; 255
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	57 e4       	ldi	r21, 0x47	; 71
    1160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1164:	18 16       	cp	r1, r24
    1166:	4c f5       	brge	.+82     	; 0x11ba <SetPassword+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	69 8d       	ldd	r22, Y+25	; 0x19
    116a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    116e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e2       	ldi	r20, 0x20	; 32
    1176:	51 e4       	ldi	r21, 0x41	; 65
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9c 8b       	std	Y+20, r25	; 0x14
    118e:	8b 8b       	std	Y+19, r24	; 0x13
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <SetPassword+0x490>
    1192:	88 ec       	ldi	r24, 0xC8	; 200
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9a 8b       	std	Y+18, r25	; 0x12
    1198:	89 8b       	std	Y+17, r24	; 0x11
    119a:	89 89       	ldd	r24, Y+17	; 0x11
    119c:	9a 89       	ldd	r25, Y+18	; 0x12
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <SetPassword+0x47e>
    11a2:	9a 8b       	std	Y+18, r25	; 0x12
    11a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a6:	8b 89       	ldd	r24, Y+19	; 0x13
    11a8:	9c 89       	ldd	r25, Y+20	; 0x14
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	9c 8b       	std	Y+20, r25	; 0x14
    11ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b0:	8b 89       	ldd	r24, Y+19	; 0x13
    11b2:	9c 89       	ldd	r25, Y+20	; 0x14
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	69 f7       	brne	.-38     	; 0x1192 <SetPassword+0x472>
    11b8:	14 c0       	rjmp	.+40     	; 0x11e2 <SetPassword+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ba:	6d 89       	ldd	r22, Y+21	; 0x15
    11bc:	7e 89       	ldd	r23, Y+22	; 0x16
    11be:	8f 89       	ldd	r24, Y+23	; 0x17
    11c0:	98 8d       	ldd	r25, Y+24	; 0x18
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	8b 89       	ldd	r24, Y+19	; 0x13
    11d0:	9c 89       	ldd	r25, Y+20	; 0x14
    11d2:	98 8b       	std	Y+16, r25	; 0x10
    11d4:	8f 87       	std	Y+15, r24	; 0x0f
    11d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d8:	98 89       	ldd	r25, Y+16	; 0x10
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <SetPassword+0x4ba>
    11de:	98 8b       	std	Y+16, r25	; 0x10
    11e0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);
		if(compareFlag==1||((ptr_password[5]!=13)&&(repeatedPassword[5]!=13))){
    11e2:	fe 01       	movw	r30, r28
    11e4:	e9 5b       	subi	r30, 0xB9	; 185
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 f0       	breq	.+36     	; 0x1212 <SetPassword+0x4f2>
    11ee:	fe 01       	movw	r30, r28
    11f0:	e0 5b       	subi	r30, 0xB0	; 176
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	fc 01       	movw	r30, r24
    11fa:	35 96       	adiw	r30, 0x05	; 5
    11fc:	80 81       	ld	r24, Z
    11fe:	8d 30       	cpi	r24, 0x0D	; 13
    1200:	09 f4       	brne	.+2      	; 0x1204 <SetPassword+0x4e4>
    1202:	7f c0       	rjmp	.+254    	; 0x1302 <SetPassword+0x5e2>
    1204:	fe 01       	movw	r30, r28
    1206:	e7 5b       	subi	r30, 0xB7	; 183
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	85 81       	ldd	r24, Z+5	; 0x05
    120c:	8d 30       	cpi	r24, 0x0D	; 13
    120e:	09 f4       	brne	.+2      	; 0x1212 <SetPassword+0x4f2>
    1210:	78 c0       	rjmp	.+240    	; 0x1302 <SetPassword+0x5e2>
			LCD_clearScreen();
    1212:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
			LCD_displayString("Pass not matched");					/* to display an error message if the two passwords are not matched */
    1216:	88 e8       	ldi	r24, 0x88	; 136
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e8       	ldi	r25, 0x80	; 128
    1222:	ab eb       	ldi	r26, 0xBB	; 187
    1224:	b4 e4       	ldi	r27, 0x44	; 68
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <SetPassword+0x550>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <SetPassword+0x5ce>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <SetPassword+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <SetPassword+0x5b0>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <SetPassword+0x59e>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <SetPassword+0x592>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <SetPassword+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <SetPassword+0x5da>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500);										/* to wait a second and a half before entering the password again*/
		}
	}while(compareFlag==1||((ptr_password[5]!=13)&&(repeatedPassword[5]!=13)));
    1302:	fe 01       	movw	r30, r28
    1304:	e9 5b       	subi	r30, 0xB9	; 185
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	09 f4       	brne	.+2      	; 0x1310 <SetPassword+0x5f0>
    130e:	24 cd       	rjmp	.-1464   	; 0xd58 <SetPassword+0x38>
    1310:	fe 01       	movw	r30, r28
    1312:	e0 5b       	subi	r30, 0xB0	; 176
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	fc 01       	movw	r30, r24
    131c:	35 96       	adiw	r30, 0x05	; 5
    131e:	80 81       	ld	r24, Z
    1320:	8d 30       	cpi	r24, 0x0D	; 13
    1322:	39 f0       	breq	.+14     	; 0x1332 <SetPassword+0x612>
    1324:	fe 01       	movw	r30, r28
    1326:	e7 5b       	subi	r30, 0xB7	; 183
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	85 81       	ldd	r24, Z+5	; 0x05
    132c:	8d 30       	cpi	r24, 0x0D	; 13
    132e:	09 f0       	breq	.+2      	; 0x1332 <SetPassword+0x612>
    1330:	13 cd       	rjmp	.-1498   	; 0xd58 <SetPassword+0x38>
	ptr_password[6]=SAVE;												/* getting the order into the password array */
    1332:	fe 01       	movw	r30, r28
    1334:	e0 5b       	subi	r30, 0xB0	; 176
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	fc 01       	movw	r30, r24
    133e:	36 96       	adiw	r30, 0x06	; 6
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	80 83       	st	Z, r24
	SendPassword(ptr_password);											/* sending the password to the other MC to save it in the EEPROM */
    1344:	fe 01       	movw	r30, r28
    1346:	e0 5b       	subi	r30, 0xB0	; 176
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <SendPassword>
	LCD_clearScreen();												/* to clear the LCD*/
    1352:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
}
    1356:	cf 5a       	subi	r28, 0xAF	; 175
    1358:	df 4f       	sbci	r29, 0xFF	; 255
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <GetPassword>:
 * IN:
 * uint8 *ptr_password
 * OUT:
 * NONE
 */
void GetPassword(uint8 * ptr_password){
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	eb 97       	sbiw	r28, 0x3b	; 59
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	9b af       	std	Y+59, r25	; 0x3b
    1388:	8a af       	std	Y+58, r24	; 0x3a
	uint8 i=0;														/* for loop counter */
    138a:	19 ae       	std	Y+57, r1	; 0x39
	LCD_clearScreen();												/* to clear the LCD*/
    138c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
	LCD_displayString("Enter pass"); 								/* printing the string "Enter pass" on the LCD */
    1390:	89 e9       	ldi	r24, 0x99	; 153
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
	LCD_moveCursor(1,0);											/* moving the cursor to the second row */
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_moveCursor>
	/* for loop to store the password in an array */
	for(i=0;i<PASSWORD_SIZE;i++){
    13a0:	19 ae       	std	Y+57, r1	; 0x39
    13a2:	f6 c0       	rjmp	.+492    	; 0x1590 <GetPassword+0x222>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	aa e7       	ldi	r26, 0x7A	; 122
    13aa:	b3 e4       	ldi	r27, 0x43	; 67
    13ac:	8d ab       	std	Y+53, r24	; 0x35
    13ae:	9e ab       	std	Y+54, r25	; 0x36
    13b0:	af ab       	std	Y+55, r26	; 0x37
    13b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b4:	6d a9       	ldd	r22, Y+53	; 0x35
    13b6:	7e a9       	ldd	r23, Y+54	; 0x36
    13b8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ba:	98 ad       	ldd	r25, Y+56	; 0x38
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a ef       	ldi	r20, 0xFA	; 250
    13c2:	54 e4       	ldi	r21, 0x44	; 68
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	89 ab       	std	Y+49, r24	; 0x31
    13ce:	9a ab       	std	Y+50, r25	; 0x32
    13d0:	ab ab       	std	Y+51, r26	; 0x33
    13d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e8       	ldi	r20, 0x80	; 128
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e8:	88 23       	and	r24, r24
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <GetPassword+0x88>
		__ticks = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
    13f4:	3f c0       	rjmp	.+126    	; 0x1474 <GetPassword+0x106>
	else if (__tmp > 65535)
    13f6:	69 a9       	ldd	r22, Y+49	; 0x31
    13f8:	7a a9       	ldd	r23, Y+50	; 0x32
    13fa:	8b a9       	ldd	r24, Y+51	; 0x33
    13fc:	9c a9       	ldd	r25, Y+52	; 0x34
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	4c f5       	brge	.+82     	; 0x1460 <GetPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140e:	6d a9       	ldd	r22, Y+53	; 0x35
    1410:	7e a9       	ldd	r23, Y+54	; 0x36
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e2       	ldi	r20, 0x20	; 32
    141c:	51 e4       	ldi	r21, 0x41	; 65
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	98 ab       	std	Y+48, r25	; 0x30
    1434:	8f a7       	std	Y+47, r24	; 0x2f
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <GetPassword+0xe8>
    1438:	88 ec       	ldi	r24, 0xC8	; 200
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9e a7       	std	Y+46, r25	; 0x2e
    143e:	8d a7       	std	Y+45, r24	; 0x2d
    1440:	8d a5       	ldd	r24, Y+45	; 0x2d
    1442:	9e a5       	ldd	r25, Y+46	; 0x2e
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <GetPassword+0xd6>
    1448:	9e a7       	std	Y+46, r25	; 0x2e
    144a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	8f a5       	ldd	r24, Y+47	; 0x2f
    1458:	98 a9       	ldd	r25, Y+48	; 0x30
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	69 f7       	brne	.-38     	; 0x1438 <GetPassword+0xca>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <GetPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	69 a9       	ldd	r22, Y+49	; 0x31
    1462:	7a a9       	ldd	r23, Y+50	; 0x32
    1464:	8b a9       	ldd	r24, Y+51	; 0x33
    1466:	9c a9       	ldd	r25, Y+52	; 0x34
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	8f a5       	ldd	r24, Y+47	; 0x2f
    1476:	98 a9       	ldd	r25, Y+48	; 0x30
    1478:	9c a7       	std	Y+44, r25	; 0x2c
    147a:	8b a7       	std	Y+43, r24	; 0x2b
    147c:	8b a5       	ldd	r24, Y+43	; 0x2b
    147e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <GetPassword+0x112>
    1484:	9c a7       	std	Y+44, r25	; 0x2c
    1486:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(250);
		ptr_password[i]=KEYPAD_getPressedKey();
    1488:	89 ad       	ldd	r24, Y+57	; 0x39
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1490:	9b ad       	ldd	r25, Y+59	; 0x3b
    1492:	8c 01       	movw	r16, r24
    1494:	02 0f       	add	r16, r18
    1496:	13 1f       	adc	r17, r19
    1498:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_getPressedKey>
    149c:	f8 01       	movw	r30, r16
    149e:	80 83       	st	Z, r24
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	aa e7       	ldi	r26, 0x7A	; 122
    14a6:	b3 e4       	ldi	r27, 0x43	; 67
    14a8:	8f a3       	std	Y+39, r24	; 0x27
    14aa:	98 a7       	std	Y+40, r25	; 0x28
    14ac:	a9 a7       	std	Y+41, r26	; 0x29
    14ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b0:	6f a1       	ldd	r22, Y+39	; 0x27
    14b2:	78 a5       	ldd	r23, Y+40	; 0x28
    14b4:	89 a5       	ldd	r24, Y+41	; 0x29
    14b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a ef       	ldi	r20, 0xFA	; 250
    14be:	54 e4       	ldi	r21, 0x44	; 68
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8b a3       	std	Y+35, r24	; 0x23
    14ca:	9c a3       	std	Y+36, r25	; 0x24
    14cc:	ad a3       	std	Y+37, r26	; 0x25
    14ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d0:	6b a1       	ldd	r22, Y+35	; 0x23
    14d2:	7c a1       	ldd	r23, Y+36	; 0x24
    14d4:	8d a1       	ldd	r24, Y+37	; 0x25
    14d6:	9e a1       	ldd	r25, Y+38	; 0x26
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GetPassword+0x184>
		__ticks = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9a a3       	std	Y+34, r25	; 0x22
    14ee:	89 a3       	std	Y+33, r24	; 0x21
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <GetPassword+0x202>
	else if (__tmp > 65535)
    14f2:	6b a1       	ldd	r22, Y+35	; 0x23
    14f4:	7c a1       	ldd	r23, Y+36	; 0x24
    14f6:	8d a1       	ldd	r24, Y+37	; 0x25
    14f8:	9e a1       	ldd	r25, Y+38	; 0x26
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	4c f5       	brge	.+82     	; 0x155c <GetPassword+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150a:	6f a1       	ldd	r22, Y+39	; 0x27
    150c:	78 a5       	ldd	r23, Y+40	; 0x28
    150e:	89 a5       	ldd	r24, Y+41	; 0x29
    1510:	9a a5       	ldd	r25, Y+42	; 0x2a
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9a a3       	std	Y+34, r25	; 0x22
    1530:	89 a3       	std	Y+33, r24	; 0x21
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <GetPassword+0x1e4>
    1534:	88 ec       	ldi	r24, 0xC8	; 200
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	98 a3       	std	Y+32, r25	; 0x20
    153a:	8f 8f       	std	Y+31, r24	; 0x1f
    153c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    153e:	98 a1       	ldd	r25, Y+32	; 0x20
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <GetPassword+0x1d2>
    1544:	98 a3       	std	Y+32, r25	; 0x20
    1546:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	89 a1       	ldd	r24, Y+33	; 0x21
    154a:	9a a1       	ldd	r25, Y+34	; 0x22
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	9a a1       	ldd	r25, Y+34	; 0x22
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	69 f7       	brne	.-38     	; 0x1534 <GetPassword+0x1c6>
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <GetPassword+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155c:	6b a1       	ldd	r22, Y+35	; 0x23
    155e:	7c a1       	ldd	r23, Y+36	; 0x24
    1560:	8d a1       	ldd	r24, Y+37	; 0x25
    1562:	9e a1       	ldd	r25, Y+38	; 0x26
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9a a3       	std	Y+34, r25	; 0x22
    156e:	89 a3       	std	Y+33, r24	; 0x21
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	9e 8f       	std	Y+30, r25	; 0x1e
    1576:	8d 8f       	std	Y+29, r24	; 0x1d
    1578:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <GetPassword+0x20e>
    1580:	9e 8f       	std	Y+30, r25	; 0x1e
    1582:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LCD_displayCharacter('*');
    1584:	8a e2       	ldi	r24, 0x2A	; 42
    1586:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayCharacter>
	uint8 i=0;														/* for loop counter */
	LCD_clearScreen();												/* to clear the LCD*/
	LCD_displayString("Enter pass"); 								/* printing the string "Enter pass" on the LCD */
	LCD_moveCursor(1,0);											/* moving the cursor to the second row */
	/* for loop to store the password in an array */
	for(i=0;i<PASSWORD_SIZE;i++){
    158a:	89 ad       	ldd	r24, Y+57	; 0x39
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	89 af       	std	Y+57, r24	; 0x39
    1590:	89 ad       	ldd	r24, Y+57	; 0x39
    1592:	85 30       	cpi	r24, 0x05	; 5
    1594:	08 f4       	brcc	.+2      	; 0x1598 <GetPassword+0x22a>
    1596:	06 cf       	rjmp	.-500    	; 0x13a4 <GetPassword+0x36>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	aa e7       	ldi	r26, 0x7A	; 122
    159e:	b3 e4       	ldi	r27, 0x43	; 67
    15a0:	89 8f       	std	Y+25, r24	; 0x19
    15a2:	9a 8f       	std	Y+26, r25	; 0x1a
    15a4:	ab 8f       	std	Y+27, r26	; 0x1b
    15a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	69 8d       	ldd	r22, Y+25	; 0x19
    15aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4a ef       	ldi	r20, 0xFA	; 250
    15b6:	54 e4       	ldi	r21, 0x44	; 68
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	8d 8b       	std	Y+21, r24	; 0x15
    15c2:	9e 8b       	std	Y+22, r25	; 0x16
    15c4:	af 8b       	std	Y+23, r26	; 0x17
    15c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ca:	7e 89       	ldd	r23, Y+22	; 0x16
    15cc:	8f 89       	ldd	r24, Y+23	; 0x17
    15ce:	98 8d       	ldd	r25, Y+24	; 0x18
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	2c f4       	brge	.+10     	; 0x15ea <GetPassword+0x27c>
		__ticks = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9c 8b       	std	Y+20, r25	; 0x14
    15e6:	8b 8b       	std	Y+19, r24	; 0x13
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <GetPassword+0x2fa>
	else if (__tmp > 65535)
    15ea:	6d 89       	ldd	r22, Y+21	; 0x15
    15ec:	7e 89       	ldd	r23, Y+22	; 0x16
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	57 e4       	ldi	r21, 0x47	; 71
    15fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	4c f5       	brge	.+82     	; 0x1654 <GetPassword+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	69 8d       	ldd	r22, Y+25	; 0x19
    1604:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1606:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1608:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9c 8b       	std	Y+20, r25	; 0x14
    1628:	8b 8b       	std	Y+19, r24	; 0x13
    162a:	0f c0       	rjmp	.+30     	; 0x164a <GetPassword+0x2dc>
    162c:	88 ec       	ldi	r24, 0xC8	; 200
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9a 8b       	std	Y+18, r25	; 0x12
    1632:	89 8b       	std	Y+17, r24	; 0x11
    1634:	89 89       	ldd	r24, Y+17	; 0x11
    1636:	9a 89       	ldd	r25, Y+18	; 0x12
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <GetPassword+0x2ca>
    163c:	9a 8b       	std	Y+18, r25	; 0x12
    163e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1640:	8b 89       	ldd	r24, Y+19	; 0x13
    1642:	9c 89       	ldd	r25, Y+20	; 0x14
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	9c 8b       	std	Y+20, r25	; 0x14
    1648:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164a:	8b 89       	ldd	r24, Y+19	; 0x13
    164c:	9c 89       	ldd	r25, Y+20	; 0x14
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	69 f7       	brne	.-38     	; 0x162c <GetPassword+0x2be>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <GetPassword+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1654:	6d 89       	ldd	r22, Y+21	; 0x15
    1656:	7e 89       	ldd	r23, Y+22	; 0x16
    1658:	8f 89       	ldd	r24, Y+23	; 0x17
    165a:	98 8d       	ldd	r25, Y+24	; 0x18
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9c 8b       	std	Y+20, r25	; 0x14
    1666:	8b 8b       	std	Y+19, r24	; 0x13
    1668:	8b 89       	ldd	r24, Y+19	; 0x13
    166a:	9c 89       	ldd	r25, Y+20	; 0x14
    166c:	98 8b       	std	Y+16, r25	; 0x10
    166e:	8f 87       	std	Y+15, r24	; 0x0f
    1670:	8f 85       	ldd	r24, Y+15	; 0x0f
    1672:	98 89       	ldd	r25, Y+16	; 0x10
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <GetPassword+0x306>
    1678:	98 8b       	std	Y+16, r25	; 0x10
    167a:	8f 87       	std	Y+15, r24	; 0x0f
		ptr_password[i]=KEYPAD_getPressedKey();
		_delay_ms(250);
		LCD_displayCharacter('*');
	}
	_delay_ms(250);
	ptr_password[5]=KEYPAD_getPressedKey();								/* to get the enter from the user */
    167c:	8a ad       	ldd	r24, Y+58	; 0x3a
    167e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1680:	8c 01       	movw	r16, r24
    1682:	0b 5f       	subi	r16, 0xFB	; 251
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	0e 94 74 10 	call	0x20e8	; 0x20e8 <KEYPAD_getPressedKey>
    168a:	f8 01       	movw	r30, r16
    168c:	80 83       	st	Z, r24
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	aa e7       	ldi	r26, 0x7A	; 122
    1694:	b3 e4       	ldi	r27, 0x43	; 67
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
    169a:	ad 87       	std	Y+13, r26	; 0x0d
    169c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	a9 87       	std	Y+9, r26	; 0x09
    16bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <GetPassword+0x372>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	3f c0       	rjmp	.+126    	; 0x175e <GetPassword+0x3f0>
	else if (__tmp > 65535)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <GetPassword+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <GetPassword+0x3d2>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <GetPassword+0x3c0>
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <GetPassword+0x3b4>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <GetPassword+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <GetPassword+0x3fc>
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
}
    1772:	eb 96       	adiw	r28, 0x3b	; 59
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <OpenDoor>:
 * IN:
 * NONE
 * OUT:
 * NONE
 */
void OpenDoor(void){
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	62 97       	sbiw	r28, 0x12	; 18
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61

	/*
	 * this function is responsible for initializing the timer and setting the timer's callback function
	 */

	TIMER0_SetCallback(CountSeconds);			/* setting the callback function of the timer0 */
    179c:	8b ea       	ldi	r24, 0xAB	; 171
    179e:	9c e0       	ldi	r25, 0x0C	; 12
    17a0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <TIMER0_SetCallback>
	Timer_config timerConfig;					/* a structure to hold the configurations of the timer */
	timerConfig.timerMode=OV_MODE;
    17a4:	1a 8a       	std	Y+18, r1	; 0x12
	timerConfig.initValue=6;
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
	timerConfig.compValue=250;
    17aa:	8a ef       	ldi	r24, 0xFA	; 250
    17ac:	88 8b       	std	Y+16, r24	; 0x10
	timerConfig.prescalar=F_CPU_1024;
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	89 8b       	std	Y+17, r24	; 0x11
	TIMER0_Init(&timerConfig);
    17b2:	ce 01       	movw	r24, r28
    17b4:	0f 96       	adiw	r24, 0x0f	; 15
    17b6:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <TIMER0_Init>
    17ba:	b7 c0       	rjmp	.+366    	; 0x192a <OpenDoor+0x1a2>

	while(tick<=1031){
		if(tick==1){
    17bc:	80 91 ec 00 	lds	r24, 0x00EC
    17c0:	90 91 ed 00 	lds	r25, 0x00ED
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <OpenDoor+0x4e>
			LCD_clearScreen();
    17ca:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
			LCD_displayString("door opening");
    17ce:	84 ea       	ldi	r24, 0xA4	; 164
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
		}
		if(tick==469){
    17d6:	80 91 ec 00 	lds	r24, 0x00EC
    17da:	90 91 ed 00 	lds	r25, 0x00ED
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	85 3d       	cpi	r24, 0xD5	; 213
    17e2:	92 07       	cpc	r25, r18
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <OpenDoor+0x6c>
			/* this means a 15 seconds has passed so the door needs to be hold for 3 seconds */
			LCD_clearScreen();
    17e6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
			LCD_displayString("The door is open");
    17ea:	81 eb       	ldi	r24, 0xB1	; 177
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
    17f2:	9b c0       	rjmp	.+310    	; 0x192a <OpenDoor+0x1a2>
		}
		else if(tick==563){
    17f4:	80 91 ec 00 	lds	r24, 0x00EC
    17f8:	90 91 ed 00 	lds	r25, 0x00ED
    17fc:	22 e0       	ldi	r18, 0x02	; 2
    17fe:	83 33       	cpi	r24, 0x33	; 51
    1800:	92 07       	cpc	r25, r18
    1802:	39 f4       	brne	.+14     	; 0x1812 <OpenDoor+0x8a>
			/* this means the has been open for 3 seconds so it needs to be closed */
			LCD_clearScreen();
    1804:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
			LCD_displayString("Door closing");
    1808:	82 ec       	ldi	r24, 0xC2	; 194
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
    1810:	8c c0       	rjmp	.+280    	; 0x192a <OpenDoor+0x1a2>
		}
		else if(tick==1031){
    1812:	80 91 ec 00 	lds	r24, 0x00EC
    1816:	90 91 ed 00 	lds	r25, 0x00ED
    181a:	24 e0       	ldi	r18, 0x04	; 4
    181c:	87 30       	cpi	r24, 0x07	; 7
    181e:	92 07       	cpc	r25, r18
    1820:	09 f0       	breq	.+2      	; 0x1824 <OpenDoor+0x9c>
    1822:	83 c0       	rjmp	.+262    	; 0x192a <OpenDoor+0x1a2>
			/* this means the door has returned to its initial position after 33 seconds */
			/* so the motor stops and the tick timer is reset to zero and the timer is de-initalized */
			LCD_clearScreen();
    1824:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
			LCD_displayString("Door closed");
    1828:	8f ec       	ldi	r24, 0xCF	; 207
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
			TIMER0_DeInit();
    1830:	0e 94 13 17 	call	0x2e26	; 0x2e26 <TIMER0_DeInit>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	aa e7       	ldi	r26, 0x7A	; 122
    183a:	b5 e4       	ldi	r27, 0x45	; 69
    183c:	8b 87       	std	Y+11, r24	; 0x0b
    183e:	9c 87       	std	Y+12, r25	; 0x0c
    1840:	ad 87       	std	Y+13, r26	; 0x0d
    1842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f 83       	std	Y+7, r24	; 0x07
    185e:	98 87       	std	Y+8, r25	; 0x08
    1860:	a9 87       	std	Y+9, r26	; 0x09
    1862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <OpenDoor+0xfe>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <OpenDoor+0x17c>
	else if (__tmp > 65535)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <OpenDoor+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <OpenDoor+0x15e>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <OpenDoor+0x14c>
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <OpenDoor+0x140>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <OpenDoor+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <OpenDoor+0x188>
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(4000);
			tick++;
    1918:	80 91 ec 00 	lds	r24, 0x00EC
    191c:	90 91 ed 00 	lds	r25, 0x00ED
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	90 93 ed 00 	sts	0x00ED, r25
    1926:	80 93 ec 00 	sts	0x00EC, r24
	timerConfig.initValue=6;
	timerConfig.compValue=250;
	timerConfig.prescalar=F_CPU_1024;
	TIMER0_Init(&timerConfig);

	while(tick<=1031){
    192a:	80 91 ec 00 	lds	r24, 0x00EC
    192e:	90 91 ed 00 	lds	r25, 0x00ED
    1932:	24 e0       	ldi	r18, 0x04	; 4
    1934:	88 30       	cpi	r24, 0x08	; 8
    1936:	92 07       	cpc	r25, r18
    1938:	08 f4       	brcc	.+2      	; 0x193c <OpenDoor+0x1b4>
    193a:	40 cf       	rjmp	.-384    	; 0x17bc <OpenDoor+0x34>
			TIMER0_DeInit();
			_delay_ms(4000);
			tick++;
		}
	}
	tick=0;
    193c:	10 92 ed 00 	sts	0x00ED, r1
    1940:	10 92 ec 00 	sts	0x00EC, r1
}
    1944:	62 96       	adiw	r28, 0x12	; 18
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <CountSeconds>:
 * IN:
 * NONE
 * OUT:
 * NONE
 */
void CountSeconds(void){
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	tick++ ;
    195e:	80 91 ec 00 	lds	r24, 0x00EC
    1962:	90 91 ed 00 	lds	r25, 0x00ED
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	90 93 ed 00 	sts	0x00ED, r25
    196c:	80 93 ec 00 	sts	0x00EC, r24
}
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <SendPassword>:
 * IN:
 * uint8 *ptr_password
 * OUT:
 * NONE
 */
void SendPassword(uint8 *ptr_password){
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <SendPassword+0x6>
    197c:	0f 92       	push	r0
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<DATA_SIZE;i++){
    1986:	19 82       	std	Y+1, r1	; 0x01
    1988:	0e c0       	rjmp	.+28     	; 0x19a6 <SendPassword+0x30>
		UART_sendByte(ptr_password[i]);
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	fc 01       	movw	r30, r24
    1996:	e2 0f       	add	r30, r18
    1998:	f3 1f       	adc	r31, r19
    199a:	80 81       	ld	r24, Z
    199c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <UART_sendByte>
 * uint8 *ptr_password
 * OUT:
 * NONE
 */
void SendPassword(uint8 *ptr_password){
	for(uint8 i=0; i<DATA_SIZE;i++){
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	87 30       	cpi	r24, 0x07	; 7
    19aa:	78 f3       	brcs	.-34     	; 0x198a <SendPassword+0x14>
		UART_sendByte(ptr_password[i]);
	}
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <Alarm>:
 * NONE
 * OUT:
 * NONE
 */

void Alarm(void){
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <Alarm+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <Alarm+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * this function is responsible for initializing the timer and setting the timer's callback function
	 */

	TIMER0_SetCallback(CountSeconds);			/* setting the callback function of the timer0 */
    19c4:	8b ea       	ldi	r24, 0xAB	; 171
    19c6:	9c e0       	ldi	r25, 0x0C	; 12
    19c8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <TIMER0_SetCallback>
	Timer_config timerConfig;					/* a structure to hold the configurations of the timer */
	timerConfig.timerMode=OV_MODE;
    19cc:	1c 82       	std	Y+4, r1	; 0x04
	timerConfig.initValue=6;
    19ce:	86 e0       	ldi	r24, 0x06	; 6
    19d0:	89 83       	std	Y+1, r24	; 0x01
	timerConfig.compValue=250;
    19d2:	8a ef       	ldi	r24, 0xFA	; 250
    19d4:	8a 83       	std	Y+2, r24	; 0x02
	timerConfig.prescalar=F_CPU_1024;
    19d6:	85 e0       	ldi	r24, 0x05	; 5
    19d8:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Init(&timerConfig);
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <TIMER0_Init>

	LCD_clearScreen();
    19e2:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_clearScreen>
	LCD_displayString("ERROR!!!");
    19e6:	8b ed       	ldi	r24, 0xDB	; 219
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
	while(tick<=1875){}
    19ee:	80 91 ec 00 	lds	r24, 0x00EC
    19f2:	90 91 ed 00 	lds	r25, 0x00ED
    19f6:	27 e0       	ldi	r18, 0x07	; 7
    19f8:	84 35       	cpi	r24, 0x54	; 84
    19fa:	92 07       	cpc	r25, r18
    19fc:	c0 f3       	brcs	.-16     	; 0x19ee <Alarm+0x36>
	tick=0;
    19fe:	10 92 ed 00 	sts	0x00ED, r1
    1a02:	10 92 ec 00 	sts	0x00EC, r1
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <MC1Init>:
 * IN:
 * NONE
 * OUT:
 * NONE
 */
void MC1Init(void){
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	27 97       	sbiw	r28, 0x07	; 7
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    1a28:	af e5       	ldi	r26, 0x5F	; 95
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ef e5       	ldi	r30, 0x5F	; 95
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	8c 93       	st	X, r24
	/* Configurations and initialization of the UART*/
	UART_config uartConfig;
	uartConfig.baudRate=9600;
    1a36:	80 e8       	ldi	r24, 0x80	; 128
    1a38:	95 e2       	ldi	r25, 0x25	; 37
    1a3a:	a0 e0       	ldi	r26, 0x00	; 0
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	ab 83       	std	Y+3, r26	; 0x03
    1a44:	bc 83       	std	Y+4, r27	; 0x04
	uartConfig.dataSize=BIT_8;
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	8f 83       	std	Y+7, r24	; 0x07
	uartConfig.parityType=PARITY_OFF;
    1a4a:	1d 82       	std	Y+5, r1	; 0x05
	uartConfig.stopBits=ONE_BIT;
    1a4c:	1e 82       	std	Y+6, r1	; 0x06
	UART_init(&uartConfig);
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <UART_init>

	LCD_init();	/* Initializing the LCD*/
    1a56:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <LCD_init>
}
    1a5a:	27 96       	adiw	r28, 0x07	; 7
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_setupPinDirection+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <GPIO_setupPinDirection+0x8>
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	6a 83       	std	Y+2, r22	; 0x02
    1a7e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	88 30       	cpi	r24, 0x08	; 8
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <GPIO_setupPinDirection+0x1c>
    1a86:	d5 c0       	rjmp	.+426    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <GPIO_setupPinDirection+0x24>
    1a8e:	d1 c0       	rjmp	.+418    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3d 83       	std	Y+5, r19	; 0x05
    1a98:	2c 83       	std	Y+4, r18	; 0x04
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <GPIO_setupPinDirection+0x3a>
    1aa4:	43 c0       	rjmp	.+134    	; 0x1b2c <GPIO_setupPinDirection+0xc0>
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	2c f4       	brge	.+10     	; 0x1aba <GPIO_setupPinDirection+0x4e>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	71 f0       	breq	.+28     	; 0x1ad4 <GPIO_setupPinDirection+0x68>
    1ab8:	bc c0       	rjmp	.+376    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
    1aba:	2c 81       	ldd	r18, Y+4	; 0x04
    1abc:	3d 81       	ldd	r19, Y+5	; 0x05
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <GPIO_setupPinDirection+0x5a>
    1ac4:	5f c0       	rjmp	.+190    	; 0x1b84 <GPIO_setupPinDirection+0x118>
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_setupPinDirection+0x66>
    1ad0:	85 c0       	rjmp	.+266    	; 0x1bdc <GPIO_setupPinDirection+0x170>
    1ad2:	af c0       	rjmp	.+350    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	a1 f4       	brne	.+40     	; 0x1b02 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1ada:	aa e3       	ldi	r26, 0x3A	; 58
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_setupPinDirection+0x8c>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_setupPinDirection+0x88>
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	98 c0       	rjmp	.+304    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b02:	aa e3       	ldi	r26, 0x3A	; 58
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	ea e3       	ldi	r30, 0x3A	; 58
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <GPIO_setupPinDirection+0xb4>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <GPIO_setupPinDirection+0xb0>
    1b24:	80 95       	com	r24
    1b26:	84 23       	and	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	83 c0       	rjmp	.+262    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	a1 f4       	brne	.+40     	; 0x1b5a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b32:	a7 e3       	ldi	r26, 0x37	; 55
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e7 e3       	ldi	r30, 0x37	; 55
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_setupPinDirection+0xe4>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_setupPinDirection+0xe0>
    1b54:	84 2b       	or	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	6c c0       	rjmp	.+216    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b5a:	a7 e3       	ldi	r26, 0x37	; 55
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e7 e3       	ldi	r30, 0x37	; 55
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <GPIO_setupPinDirection+0x10c>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <GPIO_setupPinDirection+0x108>
    1b7c:	80 95       	com	r24
    1b7e:	84 23       	and	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	57 c0       	rjmp	.+174    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	a1 f4       	brne	.+40     	; 0x1bb2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_setupPinDirection+0x13c>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_setupPinDirection+0x138>
    1bac:	84 2b       	or	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	40 c0       	rjmp	.+128    	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bb2:	a4 e3       	ldi	r26, 0x34	; 52
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e4 e3       	ldi	r30, 0x34	; 52
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <GPIO_setupPinDirection+0x164>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <GPIO_setupPinDirection+0x160>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	2b c0       	rjmp	.+86     	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	a1 f4       	brne	.+40     	; 0x1c0a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1be2:	a1 e3       	ldi	r26, 0x31	; 49
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e1 e3       	ldi	r30, 0x31	; 49
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_setupPinDirection+0x194>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_setupPinDirection+0x190>
    1c04:	84 2b       	or	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c0a:	a1 e3       	ldi	r26, 0x31	; 49
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e1 e3       	ldi	r30, 0x31	; 49
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <GPIO_setupPinDirection+0x1bc>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <GPIO_setupPinDirection+0x1b8>
    1c2c:	80 95       	com	r24
    1c2e:	84 23       	and	r24, r20
    1c30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <GPIO_writePin+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_writePin+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	6a 83       	std	Y+2, r22	; 0x02
    1c54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	88 30       	cpi	r24, 0x08	; 8
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <GPIO_writePin+0x1c>
    1c5c:	d5 c0       	rjmp	.+426    	; 0x1e08 <GPIO_writePin+0x1c6>
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <GPIO_writePin+0x24>
    1c64:	d1 c0       	rjmp	.+418    	; 0x1e08 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <GPIO_writePin+0x3a>
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <GPIO_writePin+0xc0>
    1c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <GPIO_writePin+0x4e>
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <GPIO_writePin+0x68>
    1c8e:	bc c0       	rjmp	.+376    	; 0x1e08 <GPIO_writePin+0x1c6>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_writePin+0x5a>
    1c9a:	5f c0       	rjmp	.+190    	; 0x1d5a <GPIO_writePin+0x118>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_writePin+0x66>
    1ca6:	85 c0       	rjmp	.+266    	; 0x1db2 <GPIO_writePin+0x170>
    1ca8:	af c0       	rjmp	.+350    	; 0x1e08 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cb0:	ab e3       	ldi	r26, 0x3B	; 59
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	eb e3       	ldi	r30, 0x3B	; 59
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_writePin+0x8c>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_writePin+0x88>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	98 c0       	rjmp	.+304    	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1cd8:	ab e3       	ldi	r26, 0x3B	; 59
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e3       	ldi	r30, 0x3B	; 59
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_writePin+0xb4>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_writePin+0xb0>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	83 c0       	rjmp	.+262    	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	a1 f4       	brne	.+40     	; 0x1d30 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d08:	a8 e3       	ldi	r26, 0x38	; 56
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e8 e3       	ldi	r30, 0x38	; 56
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <GPIO_writePin+0xe4>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <GPIO_writePin+0xe0>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	6c c0       	rjmp	.+216    	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <GPIO_writePin+0x10c>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <GPIO_writePin+0x108>
    1d52:	80 95       	com	r24
    1d54:	84 23       	and	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	57 c0       	rjmp	.+174    	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	a1 f4       	brne	.+40     	; 0x1d88 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d60:	a5 e3       	ldi	r26, 0x35	; 53
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e3       	ldi	r30, 0x35	; 53
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <GPIO_writePin+0x13c>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <GPIO_writePin+0x138>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	40 c0       	rjmp	.+128    	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d88:	a5 e3       	ldi	r26, 0x35	; 53
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e5 e3       	ldi	r30, 0x35	; 53
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <GPIO_writePin+0x164>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <GPIO_writePin+0x160>
    1daa:	80 95       	com	r24
    1dac:	84 23       	and	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	2b c0       	rjmp	.+86     	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	a1 f4       	brne	.+40     	; 0x1de0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <GPIO_writePin+0x194>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <GPIO_writePin+0x190>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1de0:	a2 e3       	ldi	r26, 0x32	; 50
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e2 e3       	ldi	r30, 0x32	; 50
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <GPIO_writePin+0x1bc>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <GPIO_writePin+0x1b8>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_readPin+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_readPin+0x8>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	8a 83       	std	Y+2, r24	; 0x02
    1e28:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <GPIO_readPin+0x1c>
    1e32:	84 c0       	rjmp	.+264    	; 0x1f3c <GPIO_readPin+0x124>
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <GPIO_readPin+0x24>
    1e3a:	80 c0       	rjmp	.+256    	; 0x1f3c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3d 83       	std	Y+5, r19	; 0x05
    1e44:	2c 83       	std	Y+4, r18	; 0x04
    1e46:	4c 81       	ldd	r20, Y+4	; 0x04
    1e48:	5d 81       	ldd	r21, Y+5	; 0x05
    1e4a:	41 30       	cpi	r20, 0x01	; 1
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	79 f1       	breq	.+94     	; 0x1eae <GPIO_readPin+0x96>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	82 30       	cpi	r24, 0x02	; 2
    1e56:	91 05       	cpc	r25, r1
    1e58:	34 f4       	brge	.+12     	; 0x1e66 <GPIO_readPin+0x4e>
    1e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e5e:	21 15       	cp	r18, r1
    1e60:	31 05       	cpc	r19, r1
    1e62:	69 f0       	breq	.+26     	; 0x1e7e <GPIO_readPin+0x66>
    1e64:	6b c0       	rjmp	.+214    	; 0x1f3c <GPIO_readPin+0x124>
    1e66:	4c 81       	ldd	r20, Y+4	; 0x04
    1e68:	5d 81       	ldd	r21, Y+5	; 0x05
    1e6a:	42 30       	cpi	r20, 0x02	; 2
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	b9 f1       	breq	.+110    	; 0x1ede <GPIO_readPin+0xc6>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <GPIO_readPin+0x64>
    1e7a:	49 c0       	rjmp	.+146    	; 0x1f0e <GPIO_readPin+0xf6>
    1e7c:	5f c0       	rjmp	.+190    	; 0x1f3c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e7e:	e9 e3       	ldi	r30, 0x39	; 57
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a9 01       	movw	r20, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <GPIO_readPin+0x7e>
    1e92:	55 95       	asr	r21
    1e94:	47 95       	ror	r20
    1e96:	8a 95       	dec	r24
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <GPIO_readPin+0x7a>
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	81 70       	andi	r24, 0x01	; 1
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	88 23       	and	r24, r24
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	49 c0       	rjmp	.+146    	; 0x1f3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
    1eac:	47 c0       	rjmp	.+142    	; 0x1f3c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1eae:	e6 e3       	ldi	r30, 0x36	; 54
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <GPIO_readPin+0xae>
    1ec2:	55 95       	asr	r21
    1ec4:	47 95       	ror	r20
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <GPIO_readPin+0xaa>
    1eca:	ca 01       	movw	r24, r20
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	90 70       	andi	r25, 0x00	; 0
    1ed0:	88 23       	and	r24, r24
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	31 c0       	rjmp	.+98     	; 0x1f3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	2f c0       	rjmp	.+94     	; 0x1f3c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ede:	e3 e3       	ldi	r30, 0x33	; 51
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <GPIO_readPin+0xde>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <GPIO_readPin+0xda>
    1efa:	ca 01       	movw	r24, r20
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	90 70       	andi	r25, 0x00	; 0
    1f00:	88 23       	and	r24, r24
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	19 c0       	rjmp	.+50     	; 0x1f3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f0a:	19 82       	std	Y+1, r1	; 0x01
    1f0c:	17 c0       	rjmp	.+46     	; 0x1f3c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f0e:	e0 e3       	ldi	r30, 0x30	; 48
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a9 01       	movw	r20, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <GPIO_readPin+0x10e>
    1f22:	55 95       	asr	r21
    1f24:	47 95       	ror	r20
    1f26:	8a 95       	dec	r24
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <GPIO_readPin+0x10a>
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	81 70       	andi	r24, 0x01	; 1
    1f2e:	90 70       	andi	r25, 0x00	; 0
    1f30:	88 23       	and	r24, r24
    1f32:	19 f0       	breq	.+6      	; 0x1f3a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <GPIO_setupPortDirection+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_setupPortDirection+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	84 30       	cpi	r24, 0x04	; 4
    1f62:	90 f5       	brcc	.+100    	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3c 83       	std	Y+4, r19	; 0x04
    1f6c:	2b 83       	std	Y+3, r18	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	d1 f0       	breq	.+52     	; 0x1fac <GPIO_setupPortDirection+0x5e>
    1f78:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <GPIO_setupPortDirection+0x3e>
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	61 f0       	breq	.+24     	; 0x1fa2 <GPIO_setupPortDirection+0x54>
    1f8a:	1e c0       	rjmp	.+60     	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	81 f0       	breq	.+32     	; 0x1fb6 <GPIO_setupPortDirection+0x68>
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	81 f0       	breq	.+32     	; 0x1fc0 <GPIO_setupPortDirection+0x72>
    1fa0:	13 c0       	rjmp	.+38     	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fa2:	ea e3       	ldi	r30, 0x3A	; 58
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	80 83       	st	Z, r24
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fac:	e7 e3       	ldi	r30, 0x37	; 55
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	80 83       	st	Z, r24
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fb6:	e4 e3       	ldi	r30, 0x34	; 52
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	80 83       	st	Z, r24
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fc0:	e1 e3       	ldi	r30, 0x31	; 49
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <GPIO_writePort+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <GPIO_writePort+0x8>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	84 30       	cpi	r24, 0x04	; 4
    1fea:	90 f5       	brcc	.+100    	; 0x2050 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	3c 83       	std	Y+4, r19	; 0x04
    1ff4:	2b 83       	std	Y+3, r18	; 0x03
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	d1 f0       	breq	.+52     	; 0x2034 <GPIO_writePort+0x5e>
    2000:	2b 81       	ldd	r18, Y+3	; 0x03
    2002:	3c 81       	ldd	r19, Y+4	; 0x04
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	2c f4       	brge	.+10     	; 0x2014 <GPIO_writePort+0x3e>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	61 f0       	breq	.+24     	; 0x202a <GPIO_writePort+0x54>
    2012:	1e c0       	rjmp	.+60     	; 0x2050 <GPIO_writePort+0x7a>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <GPIO_writePort+0x68>
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <GPIO_writePort+0x72>
    2028:	13 c0       	rjmp	.+38     	; 0x2050 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	80 83       	st	Z, r24
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2034:	e8 e3       	ldi	r30, 0x38	; 56
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	80 83       	st	Z, r24
    203c:	09 c0       	rjmp	.+18     	; 0x2050 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    203e:	e5 e3       	ldi	r30, 0x35	; 53
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	80 83       	st	Z, r24
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2048:	e2 e3       	ldi	r30, 0x32	; 50
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_readPort+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <GPIO_readPort+0x8>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    206c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	84 30       	cpi	r24, 0x04	; 4
    2072:	90 f5       	brcc	.+100    	; 0x20d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	3c 83       	std	Y+4, r19	; 0x04
    207c:	2b 83       	std	Y+3, r18	; 0x03
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	91 05       	cpc	r25, r1
    2086:	d1 f0       	breq	.+52     	; 0x20bc <GPIO_readPort+0x5e>
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	22 30       	cpi	r18, 0x02	; 2
    208e:	31 05       	cpc	r19, r1
    2090:	2c f4       	brge	.+10     	; 0x209c <GPIO_readPort+0x3e>
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	61 f0       	breq	.+24     	; 0x20b2 <GPIO_readPort+0x54>
    209a:	1e c0       	rjmp	.+60     	; 0x20d8 <GPIO_readPort+0x7a>
    209c:	2b 81       	ldd	r18, Y+3	; 0x03
    209e:	3c 81       	ldd	r19, Y+4	; 0x04
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	81 f0       	breq	.+32     	; 0x20c6 <GPIO_readPort+0x68>
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	91 05       	cpc	r25, r1
    20ae:	81 f0       	breq	.+32     	; 0x20d0 <GPIO_readPort+0x72>
    20b0:	13 c0       	rjmp	.+38     	; 0x20d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20b2:	e9 e3       	ldi	r30, 0x39	; 57
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	0e c0       	rjmp	.+28     	; 0x20d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20bc:	e6 e3       	ldi	r30, 0x36	; 54
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	09 c0       	rjmp	.+18     	; 0x20d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20c6:	e3 e3       	ldi	r30, 0x33	; 51
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	04 c0       	rjmp	.+8      	; 0x20d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20d0:	e0 e3       	ldi	r30, 0x30	; 48
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <KEYPAD_getPressedKey+0x6>
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    20f4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    20f6:	1b 82       	std	Y+3, r1	; 0x03
    20f8:	43 c0       	rjmp	.+134    	; 0x2180 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	98 2f       	mov	r25, r24
    2106:	9c 5f       	subi	r25, 0xFC	; 252
    2108:	82 e0       	ldi	r24, 0x02	; 2
    210a:	69 2f       	mov	r22, r25
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 01       	movw	r18, r24
    211a:	2c 5f       	subi	r18, 0xFC	; 252
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <KEYPAD_getPressedKey+0x40>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	2a 95       	dec	r18
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <KEYPAD_getPressedKey+0x3c>
    212c:	80 95       	com	r24
    212e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	69 81       	ldd	r22, Y+1	; 0x01
    2134:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2138:	1a 82       	std	Y+2, r1	; 0x02
    213a:	1c c0       	rjmp	.+56     	; 0x2174 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    213c:	82 e0       	ldi	r24, 0x02	; 2
    213e:	6a 81       	ldd	r22, Y+2	; 0x02
    2140:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_readPin>
    2144:	88 23       	and	r24, r24
    2146:	99 f4       	brne	.+38     	; 0x216e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	98 2f       	mov	r25, r24
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	89 0f       	add	r24, r25
    215c:	8f 5f       	subi	r24, 0xFF	; 255
    215e:	0e 94 c5 10 	call	0x218a	; 0x218a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	8a 83       	std	Y+2, r24	; 0x02
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	84 30       	cpi	r24, 0x04	; 4
    2178:	08 f3       	brcs	.-62     	; 0x213c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	8b 83       	std	Y+3, r24	; 0x03
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	84 30       	cpi	r24, 0x04	; 4
    2184:	08 f4       	brcc	.+2      	; 0x2188 <KEYPAD_getPressedKey+0xa0>
    2186:	b9 cf       	rjmp	.-142    	; 0x20fa <KEYPAD_getPressedKey+0x12>
    2188:	b6 cf       	rjmp	.-148    	; 0x20f6 <KEYPAD_getPressedKey+0xe>

0000218a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2198:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3c 83       	std	Y+4, r19	; 0x04
    21a2:	2b 83       	std	Y+3, r18	; 0x03
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	88 30       	cpi	r24, 0x08	; 8
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    21ae:	70 c0       	rjmp	.+224    	; 0x2290 <KEYPAD_4x4_adjustKeyNumber+0x106>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	29 30       	cpi	r18, 0x09	; 9
    21b6:	31 05       	cpc	r19, r1
    21b8:	5c f5       	brge	.+86     	; 0x2210 <KEYPAD_4x4_adjustKeyNumber+0x86>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	91 05       	cpc	r25, r1
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21c4:	59 c0       	rjmp	.+178    	; 0x2278 <KEYPAD_4x4_adjustKeyNumber+0xee>
    21c6:	2b 81       	ldd	r18, Y+3	; 0x03
    21c8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ca:	25 30       	cpi	r18, 0x05	; 5
    21cc:	31 05       	cpc	r19, r1
    21ce:	9c f4       	brge	.+38     	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	91 05       	cpc	r25, r1
    21d8:	09 f4       	brne	.+2      	; 0x21dc <KEYPAD_4x4_adjustKeyNumber+0x52>
    21da:	48 c0       	rjmp	.+144    	; 0x226c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21dc:	2b 81       	ldd	r18, Y+3	; 0x03
    21de:	3c 81       	ldd	r19, Y+4	; 0x04
    21e0:	23 30       	cpi	r18, 0x03	; 3
    21e2:	31 05       	cpc	r19, r1
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21e6:	45 c0       	rjmp	.+138    	; 0x2272 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    21f2:	39 c0       	rjmp	.+114    	; 0x2266 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    21f4:	67 c0       	rjmp	.+206    	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	26 30       	cpi	r18, 0x06	; 6
    21fc:	31 05       	cpc	r19, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2200:	41 c0       	rjmp	.+130    	; 0x2284 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	87 30       	cpi	r24, 0x07	; 7
    2208:	91 05       	cpc	r25, r1
    220a:	0c f0       	brlt	.+2      	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x84>
    220c:	3e c0       	rjmp	.+124    	; 0x228a <KEYPAD_4x4_adjustKeyNumber+0x100>
    220e:	37 c0       	rjmp	.+110    	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2210:	2b 81       	ldd	r18, Y+3	; 0x03
    2212:	3c 81       	ldd	r19, Y+4	; 0x04
    2214:	2c 30       	cpi	r18, 0x0C	; 12
    2216:	31 05       	cpc	r19, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <KEYPAD_4x4_adjustKeyNumber+0x92>
    221a:	46 c0       	rjmp	.+140    	; 0x22a8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	8d 30       	cpi	r24, 0x0D	; 13
    2222:	91 05       	cpc	r25, r1
    2224:	5c f4       	brge	.+22     	; 0x223c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2226:	2b 81       	ldd	r18, Y+3	; 0x03
    2228:	3c 81       	ldd	r19, Y+4	; 0x04
    222a:	2a 30       	cpi	r18, 0x0A	; 10
    222c:	31 05       	cpc	r19, r1
    222e:	b1 f1       	breq	.+108    	; 0x229c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	8b 30       	cpi	r24, 0x0B	; 11
    2236:	91 05       	cpc	r25, r1
    2238:	a4 f5       	brge	.+104    	; 0x22a2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    223a:	2d c0       	rjmp	.+90     	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	2e 30       	cpi	r18, 0x0E	; 14
    2242:	31 05       	cpc	r19, r1
    2244:	b9 f1       	breq	.+110    	; 0x22b4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	8e 30       	cpi	r24, 0x0E	; 14
    224c:	91 05       	cpc	r25, r1
    224e:	7c f1       	brlt	.+94     	; 0x22ae <KEYPAD_4x4_adjustKeyNumber+0x124>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	2f 30       	cpi	r18, 0x0F	; 15
    2256:	31 05       	cpc	r19, r1
    2258:	79 f1       	breq	.+94     	; 0x22b8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	80 31       	cpi	r24, 0x10	; 16
    2260:	91 05       	cpc	r25, r1
    2262:	69 f1       	breq	.+90     	; 0x22be <KEYPAD_4x4_adjustKeyNumber+0x134>
    2264:	2f c0       	rjmp	.+94     	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2266:	87 e0       	ldi	r24, 0x07	; 7
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	2e c0       	rjmp	.+92     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    226c:	88 e0       	ldi	r24, 0x08	; 8
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	2b c0       	rjmp	.+86     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2272:	89 e0       	ldi	r24, 0x09	; 9
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	28 c0       	rjmp	.+80     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2278:	85 e2       	ldi	r24, 0x25	; 37
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	25 c0       	rjmp	.+74     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    227e:	84 e0       	ldi	r24, 0x04	; 4
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	22 c0       	rjmp	.+68     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2284:	85 e0       	ldi	r24, 0x05	; 5
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	1f c0       	rjmp	.+62     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    228a:	86 e0       	ldi	r24, 0x06	; 6
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	1c c0       	rjmp	.+56     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2290:	8a e2       	ldi	r24, 0x2A	; 42
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	19 c0       	rjmp	.+50     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	16 c0       	rjmp	.+44     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	13 c0       	rjmp	.+38     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	10 c0       	rjmp	.+32     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22a8:	8d e2       	ldi	r24, 0x2D	; 45
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	0d c0       	rjmp	.+26     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    22ae:	8d e0       	ldi	r24, 0x0D	; 13
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	0a c0       	rjmp	.+20     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22b8:	8d e3       	ldi	r24, 0x3D	; 61
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22be:	8b e2       	ldi	r24, 0x2B	; 43
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	62 e0       	ldi	r22, 0x02	; 2
    22ee:	41 e0       	ldi	r20, 0x01	; 1
    22f0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	6f ef       	ldi	r22, 0xFF	; 255
    2302:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2306:	88 e3       	ldi	r24, 0x38	; 56
    2308:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    230c:	8c e0       	ldi	r24, 0x0C	; 12
    230e:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	ea 97       	sbiw	r28, 0x3a	; 58
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2334:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	61 e0       	ldi	r22, 0x01	; 1
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	62 e0       	ldi	r22, 0x02	; 2
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8d ab       	std	Y+53, r24	; 0x35
    2354:	9e ab       	std	Y+54, r25	; 0x36
    2356:	af ab       	std	Y+55, r26	; 0x37
    2358:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6d a9       	ldd	r22, Y+53	; 0x35
    235c:	7e a9       	ldd	r23, Y+54	; 0x36
    235e:	8f a9       	ldd	r24, Y+55	; 0x37
    2360:	98 ad       	ldd	r25, Y+56	; 0x38
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	53 e4       	ldi	r21, 0x43	; 67
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	89 ab       	std	Y+49, r24	; 0x31
    2374:	9a ab       	std	Y+50, r25	; 0x32
    2376:	ab ab       	std	Y+51, r26	; 0x33
    2378:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    237a:	69 a9       	ldd	r22, Y+49	; 0x31
    237c:	7a a9       	ldd	r23, Y+50	; 0x32
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_sendCommand+0x7e>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	98 ab       	std	Y+48, r25	; 0x30
    2398:	8f a7       	std	Y+47, r24	; 0x2f
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    239c:	69 a9       	ldd	r22, Y+49	; 0x31
    239e:	7a a9       	ldd	r23, Y+50	; 0x32
    23a0:	8b a9       	ldd	r24, Y+51	; 0x33
    23a2:	9c a9       	ldd	r25, Y+52	; 0x34
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6d a9       	ldd	r22, Y+53	; 0x35
    23b6:	7e a9       	ldd	r23, Y+54	; 0x36
    23b8:	8f a9       	ldd	r24, Y+55	; 0x37
    23ba:	98 ad       	ldd	r25, Y+56	; 0x38
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	98 ab       	std	Y+48, r25	; 0x30
    23da:	8f a7       	std	Y+47, r24	; 0x2f
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_sendCommand+0xde>
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9e a7       	std	Y+46, r25	; 0x2e
    23e4:	8d a7       	std	Y+45, r24	; 0x2d
    23e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    23e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendCommand+0xcc>
    23ee:	9e a7       	std	Y+46, r25	; 0x2e
    23f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f4:	98 a9       	ldd	r25, Y+48	; 0x30
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	98 ab       	std	Y+48, r25	; 0x30
    23fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_sendCommand+0xc0>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	69 a9       	ldd	r22, Y+49	; 0x31
    2408:	7a a9       	ldd	r23, Y+50	; 0x32
    240a:	8b a9       	ldd	r24, Y+51	; 0x33
    240c:	9c a9       	ldd	r25, Y+52	; 0x34
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	8f a5       	ldd	r24, Y+47	; 0x2f
    241c:	98 a9       	ldd	r25, Y+48	; 0x30
    241e:	9c a7       	std	Y+44, r25	; 0x2c
    2420:	8b a7       	std	Y+43, r24	; 0x2b
    2422:	8b a5       	ldd	r24, Y+43	; 0x2b
    2424:	9c a5       	ldd	r25, Y+44	; 0x2c
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x108>
    242a:	9c a7       	std	Y+44, r25	; 0x2c
    242c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	63 e0       	ldi	r22, 0x03	; 3
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e8       	ldi	r26, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	8f a3       	std	Y+39, r24	; 0x27
    2442:	98 a7       	std	Y+40, r25	; 0x28
    2444:	a9 a7       	std	Y+41, r26	; 0x29
    2446:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6f a1       	ldd	r22, Y+39	; 0x27
    244a:	78 a5       	ldd	r23, Y+40	; 0x28
    244c:	89 a5       	ldd	r24, Y+41	; 0x29
    244e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a e7       	ldi	r20, 0x7A	; 122
    2456:	53 e4       	ldi	r21, 0x43	; 67
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8b a3       	std	Y+35, r24	; 0x23
    2462:	9c a3       	std	Y+36, r25	; 0x24
    2464:	ad a3       	std	Y+37, r26	; 0x25
    2466:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2468:	6b a1       	ldd	r22, Y+35	; 0x23
    246a:	7c a1       	ldd	r23, Y+36	; 0x24
    246c:	8d a1       	ldd	r24, Y+37	; 0x25
    246e:	9e a1       	ldd	r25, Y+38	; 0x26
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_sendCommand+0x16c>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    248a:	6b a1       	ldd	r22, Y+35	; 0x23
    248c:	7c a1       	ldd	r23, Y+36	; 0x24
    248e:	8d a1       	ldd	r24, Y+37	; 0x25
    2490:	9e a1       	ldd	r25, Y+38	; 0x26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6f a1       	ldd	r22, Y+39	; 0x27
    24a4:	78 a5       	ldd	r23, Y+40	; 0x28
    24a6:	89 a5       	ldd	r24, Y+41	; 0x29
    24a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9a a3       	std	Y+34, r25	; 0x22
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_sendCommand+0x1cc>
    24cc:	89 e1       	ldi	r24, 0x19	; 25
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 a3       	std	Y+32, r25	; 0x20
    24d2:	8f 8f       	std	Y+31, r24	; 0x1f
    24d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24d6:	98 a1       	ldd	r25, Y+32	; 0x20
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_sendCommand+0x1ba>
    24dc:	98 a3       	std	Y+32, r25	; 0x20
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	89 a1       	ldd	r24, Y+33	; 0x21
    24e2:	9a a1       	ldd	r25, Y+34	; 0x22
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9a a3       	std	Y+34, r25	; 0x22
    24e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	89 a1       	ldd	r24, Y+33	; 0x21
    24ec:	9a a1       	ldd	r25, Y+34	; 0x22
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_sendCommand+0x1ae>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9a a3       	std	Y+34, r25	; 0x22
    2506:	89 a3       	std	Y+33, r24	; 0x21
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	9e 8f       	std	Y+30, r25	; 0x1e
    250e:	8d 8f       	std	Y+29, r24	; 0x1d
    2510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_sendCommand+0x1f6>
    2518:	9e 8f       	std	Y+30, r25	; 0x1e
    251a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2520:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <GPIO_writePort>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e8       	ldi	r26, 0x80	; 128
    252a:	bf e3       	ldi	r27, 0x3F	; 63
    252c:	89 8f       	std	Y+25, r24	; 0x19
    252e:	9a 8f       	std	Y+26, r25	; 0x1a
    2530:	ab 8f       	std	Y+27, r26	; 0x1b
    2532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	53 e4       	ldi	r21, 0x43	; 67
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
    2550:	af 8b       	std	Y+23, r26	; 0x17
    2552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_sendCommand+0x258>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_sendCommand+0x2b8>
    25b8:	89 e1       	ldi	r24, 0x19	; 25
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_sendCommand+0x2a6>
    25c8:	9a 8b       	std	Y+18, r25	; 0x12
    25ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_sendCommand+0x29a>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	98 89       	ldd	r25, Y+16	; 0x10
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_sendCommand+0x2e2>
    2604:	98 8b       	std	Y+16, r25	; 0x10
    2606:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	8b 87       	std	Y+11, r24	; 0x0b
    261c:	9c 87       	std	Y+12, r25	; 0x0c
    261e:	ad 87       	std	Y+13, r26	; 0x0d
    2620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a e7       	ldi	r20, 0x7A	; 122
    2630:	53 e4       	ldi	r21, 0x43	; 67
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8f 83       	std	Y+7, r24	; 0x07
    263c:	98 87       	std	Y+8, r25	; 0x08
    263e:	a9 87       	std	Y+9, r26	; 0x09
    2640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <LCD_sendCommand+0x346>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_sendCommand+0x3a6>
    26a6:	89 e1       	ldi	r24, 0x19	; 25
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0x394>
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_sendCommand+0x388>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_sendCommand+0x3d0>
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26f6:	ea 96       	adiw	r28, 0x3a	; 58
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	ea 97       	sbiw	r28, 0x3a	; 58
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    271e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e8       	ldi	r26, 0x80	; 128
    273a:	bf e3       	ldi	r27, 0x3F	; 63
    273c:	8d ab       	std	Y+53, r24	; 0x35
    273e:	9e ab       	std	Y+54, r25	; 0x36
    2740:	af ab       	std	Y+55, r26	; 0x37
    2742:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	6d a9       	ldd	r22, Y+53	; 0x35
    2746:	7e a9       	ldd	r23, Y+54	; 0x36
    2748:	8f a9       	ldd	r24, Y+55	; 0x37
    274a:	98 ad       	ldd	r25, Y+56	; 0x38
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a e7       	ldi	r20, 0x7A	; 122
    2752:	53 e4       	ldi	r21, 0x43	; 67
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	89 ab       	std	Y+49, r24	; 0x31
    275e:	9a ab       	std	Y+50, r25	; 0x32
    2760:	ab ab       	std	Y+51, r26	; 0x33
    2762:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2764:	69 a9       	ldd	r22, Y+49	; 0x31
    2766:	7a a9       	ldd	r23, Y+50	; 0x32
    2768:	8b a9       	ldd	r24, Y+51	; 0x33
    276a:	9c a9       	ldd	r25, Y+52	; 0x34
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	98 ab       	std	Y+48, r25	; 0x30
    2782:	8f a7       	std	Y+47, r24	; 0x2f
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2786:	69 a9       	ldd	r22, Y+49	; 0x31
    2788:	7a a9       	ldd	r23, Y+50	; 0x32
    278a:	8b a9       	ldd	r24, Y+51	; 0x33
    278c:	9c a9       	ldd	r25, Y+52	; 0x34
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	6d a9       	ldd	r22, Y+53	; 0x35
    27a0:	7e a9       	ldd	r23, Y+54	; 0x36
    27a2:	8f a9       	ldd	r24, Y+55	; 0x37
    27a4:	98 ad       	ldd	r25, Y+56	; 0x38
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <LCD_displayCharacter+0xde>
    27c8:	89 e1       	ldi	r24, 0x19	; 25
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9e a7       	std	Y+46, r25	; 0x2e
    27ce:	8d a7       	std	Y+45, r24	; 0x2d
    27d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_displayCharacter+0xcc>
    27d8:	9e a7       	std	Y+46, r25	; 0x2e
    27da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27de:	98 a9       	ldd	r25, Y+48	; 0x30
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	98 ab       	std	Y+48, r25	; 0x30
    27e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <LCD_displayCharacter+0xc0>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	69 a9       	ldd	r22, Y+49	; 0x31
    27f2:	7a a9       	ldd	r23, Y+50	; 0x32
    27f4:	8b a9       	ldd	r24, Y+51	; 0x33
    27f6:	9c a9       	ldd	r25, Y+52	; 0x34
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	98 ab       	std	Y+48, r25	; 0x30
    2802:	8f a7       	std	Y+47, r24	; 0x2f
    2804:	8f a5       	ldd	r24, Y+47	; 0x2f
    2806:	98 a9       	ldd	r25, Y+48	; 0x30
    2808:	9c a7       	std	Y+44, r25	; 0x2c
    280a:	8b a7       	std	Y+43, r24	; 0x2b
    280c:	8b a5       	ldd	r24, Y+43	; 0x2b
    280e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_displayCharacter+0x108>
    2814:	9c a7       	std	Y+44, r25	; 0x2c
    2816:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	63 e0       	ldi	r22, 0x03	; 3
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e8       	ldi	r26, 0x80	; 128
    2828:	bf e3       	ldi	r27, 0x3F	; 63
    282a:	8f a3       	std	Y+39, r24	; 0x27
    282c:	98 a7       	std	Y+40, r25	; 0x28
    282e:	a9 a7       	std	Y+41, r26	; 0x29
    2830:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6f a1       	ldd	r22, Y+39	; 0x27
    2834:	78 a5       	ldd	r23, Y+40	; 0x28
    2836:	89 a5       	ldd	r24, Y+41	; 0x29
    2838:	9a a5       	ldd	r25, Y+42	; 0x2a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a e7       	ldi	r20, 0x7A	; 122
    2840:	53 e4       	ldi	r21, 0x43	; 67
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8b a3       	std	Y+35, r24	; 0x23
    284c:	9c a3       	std	Y+36, r25	; 0x24
    284e:	ad a3       	std	Y+37, r26	; 0x25
    2850:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2852:	6b a1       	ldd	r22, Y+35	; 0x23
    2854:	7c a1       	ldd	r23, Y+36	; 0x24
    2856:	8d a1       	ldd	r24, Y+37	; 0x25
    2858:	9e a1       	ldd	r25, Y+38	; 0x26
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9a a3       	std	Y+34, r25	; 0x22
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2874:	6b a1       	ldd	r22, Y+35	; 0x23
    2876:	7c a1       	ldd	r23, Y+36	; 0x24
    2878:	8d a1       	ldd	r24, Y+37	; 0x25
    287a:	9e a1       	ldd	r25, Y+38	; 0x26
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6f a1       	ldd	r22, Y+39	; 0x27
    288e:	78 a5       	ldd	r23, Y+40	; 0x28
    2890:	89 a5       	ldd	r24, Y+41	; 0x29
    2892:	9a a5       	ldd	r25, Y+42	; 0x2a
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9a a3       	std	Y+34, r25	; 0x22
    28b2:	89 a3       	std	Y+33, r24	; 0x21
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <LCD_displayCharacter+0x1cc>
    28b6:	89 e1       	ldi	r24, 0x19	; 25
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	98 a3       	std	Y+32, r25	; 0x20
    28bc:	8f 8f       	std	Y+31, r24	; 0x1f
    28be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c0:	98 a1       	ldd	r25, Y+32	; 0x20
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_displayCharacter+0x1ba>
    28c6:	98 a3       	std	Y+32, r25	; 0x20
    28c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	89 a1       	ldd	r24, Y+33	; 0x21
    28cc:	9a a1       	ldd	r25, Y+34	; 0x22
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <LCD_displayCharacter+0x1ae>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6b a1       	ldd	r22, Y+35	; 0x23
    28e0:	7c a1       	ldd	r23, Y+36	; 0x24
    28e2:	8d a1       	ldd	r24, Y+37	; 0x25
    28e4:	9e a1       	ldd	r25, Y+38	; 0x26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9a a3       	std	Y+34, r25	; 0x22
    28f0:	89 a3       	std	Y+33, r24	; 0x21
    28f2:	89 a1       	ldd	r24, Y+33	; 0x21
    28f4:	9a a1       	ldd	r25, Y+34	; 0x22
    28f6:	9e 8f       	std	Y+30, r25	; 0x1e
    28f8:	8d 8f       	std	Y+29, r24	; 0x1d
    28fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <LCD_displayCharacter+0x1f6>
    2902:	9e 8f       	std	Y+30, r25	; 0x1e
    2904:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	6a ad       	ldd	r22, Y+58	; 0x3a
    290a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <GPIO_writePort>
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	a0 e8       	ldi	r26, 0x80	; 128
    2914:	bf e3       	ldi	r27, 0x3F	; 63
    2916:	89 8f       	std	Y+25, r24	; 0x19
    2918:	9a 8f       	std	Y+26, r25	; 0x1a
    291a:	ab 8f       	std	Y+27, r26	; 0x1b
    291c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	69 8d       	ldd	r22, Y+25	; 0x19
    2920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	53 e4       	ldi	r21, 0x43	; 67
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8d 8b       	std	Y+21, r24	; 0x15
    2938:	9e 8b       	std	Y+22, r25	; 0x16
    293a:	af 8b       	std	Y+23, r26	; 0x17
    293c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    293e:	6d 89       	ldd	r22, Y+21	; 0x15
    2940:	7e 89       	ldd	r23, Y+22	; 0x16
    2942:	8f 89       	ldd	r24, Y+23	; 0x17
    2944:	98 8d       	ldd	r25, Y+24	; 0x18
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <LCD_displayCharacter+0x258>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
    295e:	3f c0       	rjmp	.+126    	; 0x29de <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2960:	6d 89       	ldd	r22, Y+21	; 0x15
    2962:	7e 89       	ldd	r23, Y+22	; 0x16
    2964:	8f 89       	ldd	r24, Y+23	; 0x17
    2966:	98 8d       	ldd	r25, Y+24	; 0x18
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	69 8d       	ldd	r22, Y+25	; 0x19
    297a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <LCD_displayCharacter+0x2b8>
    29a2:	89 e1       	ldi	r24, 0x19	; 25
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9a 8b       	std	Y+18, r25	; 0x12
    29a8:	89 8b       	std	Y+17, r24	; 0x11
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	9a 89       	ldd	r25, Y+18	; 0x12
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_displayCharacter+0x2a6>
    29b2:	9a 8b       	std	Y+18, r25	; 0x12
    29b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8b 89       	ldd	r24, Y+19	; 0x13
    29b8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9c 8b       	std	Y+20, r25	; 0x14
    29be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8b 89       	ldd	r24, Y+19	; 0x13
    29c2:	9c 89       	ldd	r25, Y+20	; 0x14
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <LCD_displayCharacter+0x29a>
    29c8:	14 c0       	rjmp	.+40     	; 0x29f2 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	6d 89       	ldd	r22, Y+21	; 0x15
    29cc:	7e 89       	ldd	r23, Y+22	; 0x16
    29ce:	8f 89       	ldd	r24, Y+23	; 0x17
    29d0:	98 8d       	ldd	r25, Y+24	; 0x18
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9c 8b       	std	Y+20, r25	; 0x14
    29dc:	8b 8b       	std	Y+19, r24	; 0x13
    29de:	8b 89       	ldd	r24, Y+19	; 0x13
    29e0:	9c 89       	ldd	r25, Y+20	; 0x14
    29e2:	98 8b       	std	Y+16, r25	; 0x10
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_displayCharacter+0x2e2>
    29ee:	98 8b       	std	Y+16, r25	; 0x10
    29f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	63 e0       	ldi	r22, 0x03	; 3
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <GPIO_writePin>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e8       	ldi	r26, 0x80	; 128
    2a02:	bf e3       	ldi	r27, 0x3F	; 63
    2a04:	8b 87       	std	Y+11, r24	; 0x0b
    2a06:	9c 87       	std	Y+12, r25	; 0x0c
    2a08:	ad 87       	std	Y+13, r26	; 0x0d
    2a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	4a e7       	ldi	r20, 0x7A	; 122
    2a1a:	53 e4       	ldi	r21, 0x43	; 67
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	8f 83       	std	Y+7, r24	; 0x07
    2a26:	98 87       	std	Y+8, r25	; 0x08
    2a28:	a9 87       	std	Y+9, r26	; 0x09
    2a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2e:	78 85       	ldd	r23, Y+8	; 0x08
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	2c f4       	brge	.+10     	; 0x2a4e <LCD_displayCharacter+0x346>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	3f c0       	rjmp	.+126    	; 0x2acc <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a50:	78 85       	ldd	r23, Y+8	; 0x08
    2a52:	89 85       	ldd	r24, Y+9	; 0x09
    2a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	4c f5       	brge	.+82     	; 0x2ab8 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e2       	ldi	r20, 0x20	; 32
    2a74:	51 e4       	ldi	r21, 0x41	; 65
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9e 83       	std	Y+6, r25	; 0x06
    2a8c:	8d 83       	std	Y+5, r24	; 0x05
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <LCD_displayCharacter+0x3a6>
    2a90:	89 e1       	ldi	r24, 0x19	; 25
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9c 83       	std	Y+4, r25	; 0x04
    2a96:	8b 83       	std	Y+3, r24	; 0x03
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_displayCharacter+0x394>
    2aa0:	9c 83       	std	Y+4, r25	; 0x04
    2aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f7       	brne	.-38     	; 0x2a90 <LCD_displayCharacter+0x388>
    2ab6:	14 c0       	rjmp	.+40     	; 0x2ae0 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9e 83       	std	Y+6, r25	; 0x06
    2aca:	8d 83       	std	Y+5, r24	; 0x05
    2acc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ace:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <LCD_displayCharacter+0x3d0>
    2adc:	9a 83       	std	Y+2, r25	; 0x02
    2ade:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ae0:	ea 96       	adiw	r28, 0x3a	; 58
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <LCD_displayString+0x6>
    2af8:	0f 92       	push	r0
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	9b 83       	std	Y+3, r25	; 0x03
    2b00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b02:	19 82       	std	Y+1, r1	; 0x01
    2b04:	0e c0       	rjmp	.+28     	; 0x2b22 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b10:	fc 01       	movw	r30, r24
    2b12:	e2 0f       	add	r30, r18
    2b14:	f3 1f       	adc	r31, r19
    2b16:	80 81       	ld	r24, Z
    2b18:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayCharacter>
		i++;
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f3 1f       	adc	r31, r19
    2b32:	80 81       	ld	r24, Z
    2b34:	88 23       	and	r24, r24
    2b36:	39 f7       	brne	.-50     	; 0x2b06 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <LCD_moveCursor+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LCD_moveCursor+0x8>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	8a 83       	std	Y+2, r24	; 0x02
    2b54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	3d 83       	std	Y+5, r19	; 0x05
    2b5e:	2c 83       	std	Y+4, r18	; 0x04
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	9d 81       	ldd	r25, Y+5	; 0x05
    2b64:	81 30       	cpi	r24, 0x01	; 1
    2b66:	91 05       	cpc	r25, r1
    2b68:	c1 f0       	breq	.+48     	; 0x2b9a <LCD_moveCursor+0x56>
    2b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6e:	22 30       	cpi	r18, 0x02	; 2
    2b70:	31 05       	cpc	r19, r1
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_moveCursor+0x3a>
    2b74:	8c 81       	ldd	r24, Y+4	; 0x04
    2b76:	9d 81       	ldd	r25, Y+5	; 0x05
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	61 f0       	breq	.+24     	; 0x2b94 <LCD_moveCursor+0x50>
    2b7c:	19 c0       	rjmp	.+50     	; 0x2bb0 <LCD_moveCursor+0x6c>
    2b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b80:	3d 81       	ldd	r19, Y+5	; 0x05
    2b82:	22 30       	cpi	r18, 0x02	; 2
    2b84:	31 05       	cpc	r19, r1
    2b86:	69 f0       	breq	.+26     	; 0x2ba2 <LCD_moveCursor+0x5e>
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8c:	83 30       	cpi	r24, 0x03	; 3
    2b8e:	91 05       	cpc	r25, r1
    2b90:	61 f0       	breq	.+24     	; 0x2baa <LCD_moveCursor+0x66>
    2b92:	0e c0       	rjmp	.+28     	; 0x2bb0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	89 83       	std	Y+1, r24	; 0x01
    2b98:	0b c0       	rjmp	.+22     	; 0x2bb0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	80 5c       	subi	r24, 0xC0	; 192
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	07 c0       	rjmp	.+14     	; 0x2bb0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	80 5f       	subi	r24, 0xF0	; 240
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	80 5b       	subi	r24, 0xB0	; 176
    2bae:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	80 68       	ori	r24, 0x80	; 128
    2bb4:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <LCD_displayStringRowColumn+0x6>
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <LCD_displayStringRowColumn+0x8>
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	6a 83       	std	Y+2, r22	; 0x02
    2bd8:	5c 83       	std	Y+4, r21	; 0x04
    2bda:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	6a 81       	ldd	r22, Y+2	; 0x02
    2be0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	62 97       	sbiw	r28, 0x12	; 18
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c12:	89 89       	ldd	r24, Y+17	; 0x11
    2c14:	9a 89       	ldd	r25, Y+18	; 0x12
    2c16:	9e 01       	movw	r18, r28
    2c18:	2f 5f       	subi	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	4a e0       	ldi	r20, 0x0A	; 10
    2c20:	50 e0       	ldi	r21, 0x00	; 0
    2c22:	0e 94 a5 18 	call	0x314a	; 0x314a <itoa>
   LCD_displayString(buff); /* Display the string */
    2c26:	ce 01       	movw	r24, r28
    2c28:	01 96       	adiw	r24, 0x01	; 1
    2c2a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <LCD_displayString>
}
    2c2e:	62 96       	adiw	r28, 0x12	; 18
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	cf 91       	pop	r28
    2c3c:	df 91       	pop	r29
    2c3e:	08 95       	ret

00002c40 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	0e 94 8f 11 	call	0x231e	; 0x231e <LCD_sendCommand>
}
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <__vector_9>:
static uint8 g_initValue=0;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    2c54:	1f 92       	push	r1
    2c56:	0f 92       	push	r0
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	0f 92       	push	r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
	OCR0 = g_initValue;
    2c7e:	ec e5       	ldi	r30, 0x5C	; 92
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 91 f0 00 	lds	r24, 0x00F0
    2c86:	80 83       	st	Z, r24
	if(g_callBackPtr != NULL_PTR)
    2c88:	80 91 ee 00 	lds	r24, 0x00EE
    2c8c:	90 91 ef 00 	lds	r25, 0x00EF
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	29 f0       	breq	.+10     	; 0x2c9e <__vector_9+0x4a>
	{
		/* Call the Call Back function in the application after the timer overflowed */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c94:	e0 91 ee 00 	lds	r30, 0x00EE
    2c98:	f0 91 ef 00 	lds	r31, 0x00EF
    2c9c:	09 95       	icall
	}
}
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	ff 91       	pop	r31
    2ca4:	ef 91       	pop	r30
    2ca6:	bf 91       	pop	r27
    2ca8:	af 91       	pop	r26
    2caa:	9f 91       	pop	r25
    2cac:	8f 91       	pop	r24
    2cae:	7f 91       	pop	r23
    2cb0:	6f 91       	pop	r22
    2cb2:	5f 91       	pop	r21
    2cb4:	4f 91       	pop	r20
    2cb6:	3f 91       	pop	r19
    2cb8:	2f 91       	pop	r18
    2cba:	0f 90       	pop	r0
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	0f 90       	pop	r0
    2cc0:	1f 90       	pop	r1
    2cc2:	18 95       	reti

00002cc4 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2cc4:	1f 92       	push	r1
    2cc6:	0f 92       	push	r0
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	0f 92       	push	r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	2f 93       	push	r18
    2cd0:	3f 93       	push	r19
    2cd2:	4f 93       	push	r20
    2cd4:	5f 93       	push	r21
    2cd6:	6f 93       	push	r22
    2cd8:	7f 93       	push	r23
    2cda:	8f 93       	push	r24
    2cdc:	9f 93       	push	r25
    2cde:	af 93       	push	r26
    2ce0:	bf 93       	push	r27
    2ce2:	ef 93       	push	r30
    2ce4:	ff 93       	push	r31
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2cee:	80 91 ee 00 	lds	r24, 0x00EE
    2cf2:	90 91 ef 00 	lds	r25, 0x00EF
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	29 f0       	breq	.+10     	; 0x2d04 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare value is matched */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cfa:	e0 91 ee 00 	lds	r30, 0x00EE
    2cfe:	f0 91 ef 00 	lds	r31, 0x00EF
    2d02:	09 95       	icall
	}
}
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	ff 91       	pop	r31
    2d0a:	ef 91       	pop	r30
    2d0c:	bf 91       	pop	r27
    2d0e:	af 91       	pop	r26
    2d10:	9f 91       	pop	r25
    2d12:	8f 91       	pop	r24
    2d14:	7f 91       	pop	r23
    2d16:	6f 91       	pop	r22
    2d18:	5f 91       	pop	r21
    2d1a:	4f 91       	pop	r20
    2d1c:	3f 91       	pop	r19
    2d1e:	2f 91       	pop	r18
    2d20:	0f 90       	pop	r0
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	0f 90       	pop	r0
    2d26:	1f 90       	pop	r1
    2d28:	18 95       	reti

00002d2a <TIMER0_Init>:
 * Initialize the Timer:
 * 1. Setup the timer mode
 * 2. Setup the timer Pre-scaler
 * 3. Setup the start value of the normal mode or the compare value for the compare mode
 */
void TIMER0_Init (Timer_config *config) {
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <TIMER0_Init+0x6>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 = 1 for non pwm mode
	 * WGM00:01 to decide the mode of operation
	 * COM00:01 = 0 to control the OC0 usage
	 * CS02:00 to choose the used prescaler
	 ***********************************************************************/
	TCCR0 = (1<<FOC0);
    2d38:	e3 e5       	ldi	r30, 0x53	; 83
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 e8       	ldi	r24, 0x80	; 128
    2d3e:	80 83       	st	Z, r24
	TCCR0 = (TCCR0&0xB7) | (((config->timerMode)&0x02)<<5) | (((config->timerMode)&0x01)<<3);
    2d40:	a3 e5       	ldi	r26, 0x53	; 83
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e3 e5       	ldi	r30, 0x53	; 83
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	27 7b       	andi	r18, 0xB7	; 183
    2d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d50:	fa 81       	ldd	r31, Y+2	; 0x02
    2d52:	83 81       	ldd	r24, Z+3	; 0x03
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	82 70       	andi	r24, 0x02	; 2
    2d5a:	90 70       	andi	r25, 0x00	; 0
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	82 95       	swap	r24
    2d62:	92 95       	swap	r25
    2d64:	90 7f       	andi	r25, 0xF0	; 240
    2d66:	98 27       	eor	r25, r24
    2d68:	80 7f       	andi	r24, 0xF0	; 240
    2d6a:	98 27       	eor	r25, r24
    2d6c:	28 2b       	or	r18, r24
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	83 81       	ldd	r24, Z+3	; 0x03
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	81 70       	andi	r24, 0x01	; 1
    2d7a:	90 70       	andi	r25, 0x00	; 0
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	88 0f       	add	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	82 2b       	or	r24, r18
    2d8a:	8c 93       	st	X, r24
	TCCR0 = (TCCR0&0xF8) | (config->prescalar);
    2d8c:	a3 e5       	ldi	r26, 0x53	; 83
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e3 e5       	ldi	r30, 0x53	; 83
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	98 2f       	mov	r25, r24
    2d98:	98 7f       	andi	r25, 0xF8	; 248
    2d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	89 2b       	or	r24, r25
    2da2:	8c 93       	st	X, r24

	if(OV_MODE==config->timerMode){
    2da4:	e9 81       	ldd	r30, Y+1	; 0x01
    2da6:	fa 81       	ldd	r31, Y+2	; 0x02
    2da8:	83 81       	ldd	r24, Z+3	; 0x03
    2daa:	88 23       	and	r24, r24
    2dac:	99 f4       	brne	.+38     	; 0x2dd4 <TIMER0_Init+0xaa>
		TCNT0 = config->initValue;
    2dae:	a2 e5       	ldi	r26, 0x52	; 82
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e9 81       	ldd	r30, Y+1	; 0x01
    2db4:	fa 81       	ldd	r31, Y+2	; 0x02
    2db6:	80 81       	ld	r24, Z
    2db8:	8c 93       	st	X, r24
		g_initValue = config->initValue;
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	80 81       	ld	r24, Z
    2dc0:	80 93 f0 00 	sts	0x00F0, r24
		TIMSK |= (1<<TOIE0);
    2dc4:	a9 e5       	ldi	r26, 0x59	; 89
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	e9 e5       	ldi	r30, 0x59	; 89
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	81 60       	ori	r24, 0x01	; 1
    2dd0:	8c 93       	st	X, r24
    2dd2:	12 c0       	rjmp	.+36     	; 0x2df8 <TIMER0_Init+0xce>
	}
	else if (COMPARE_MODE == config->timerMode){
    2dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd8:	83 81       	ldd	r24, Z+3	; 0x03
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	69 f4       	brne	.+26     	; 0x2df8 <TIMER0_Init+0xce>
		OCR0 = config->compValue ;
    2dde:	ac e5       	ldi	r26, 0x5C	; 92
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	81 81       	ldd	r24, Z+1	; 0x01
    2de8:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);
    2dea:	a9 e5       	ldi	r26, 0x59	; 89
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e9 e5       	ldi	r30, 0x59	; 89
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	82 60       	ori	r24, 0x02	; 2
    2df6:	8c 93       	st	X, r24
	}
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <TIMER0_SetCallback>:
/*
 * Description :
 * Sets the wanted call back function to call it in the ISR
 */
void TIMER0_SetCallback(void(*a_pointer)(void)){
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <TIMER0_SetCallback+0x6>
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_pointer;
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	90 93 ef 00 	sts	0x00EF, r25
    2e18:	80 93 ee 00 	sts	0x00EE, r24
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <TIMER0_DeInit>:
/*
 * Description :
 * Turns off the timer and return all the counters to 0
 */
void TIMER0_DeInit(void){
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2e2e:	e3 e5       	ldi	r30, 0x53	; 83
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	10 82       	st	Z, r1
	TIMSK &= 0xFC ;
    2e34:	a9 e5       	ldi	r26, 0x59	; 89
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e9 e5       	ldi	r30, 0x59	; 89
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8c 7f       	andi	r24, 0xFC	; 252
    2e40:	8c 93       	st	X, r24
	TCNT0 = 0;
    2e42:	e2 e5       	ldi	r30, 0x52	; 82
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	10 82       	st	Z, r1
	OCR0 = 0;
    2e48:	ec e5       	ldi	r30, 0x5C	; 92
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	10 82       	st	Z, r1
}
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config *ptr_config)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <UART_init+0x6>
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <UART_init+0x8>
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	9c 83       	std	Y+4, r25	; 0x04
    2e62:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e64:	1a 82       	std	Y+2, r1	; 0x02
    2e66:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e68:	eb e2       	ldi	r30, 0x2B	; 43
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  to control the character size
	 * RXB8 & TXB8 used only for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e70:	ea e2       	ldi	r30, 0x2A	; 42
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	88 e1       	ldi	r24, 0x18	; 24
    2e76:	80 83       	st	Z, r24
	
	/* Inserting bit 2 of the character size in UCSZ2 */
	UCSRB = (UCSRB&0xFB) | ((ptr_config->dataSize)&(0x04));
    2e78:	aa e2       	ldi	r26, 0x2A	; 42
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	ea e2       	ldi	r30, 0x2A	; 42
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	98 2f       	mov	r25, r24
    2e84:	9b 7f       	andi	r25, 0xFB	; 251
    2e86:	eb 81       	ldd	r30, Y+3	; 0x03
    2e88:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8a:	86 81       	ldd	r24, Z+6	; 0x06
    2e8c:	84 70       	andi	r24, 0x04	; 4
    2e8e:	89 2b       	or	r24, r25
    2e90:	8c 93       	st	X, r24
	 * UPM1:0   control parity bit
	 * USBS     number of stop bit
	 * UCSZ1:0  bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) ;
    2e92:	e0 e4       	ldi	r30, 0x40	; 64
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 e8       	ldi	r24, 0x80	; 128
    2e98:	80 83       	st	Z, r24

	/* Inserting the bits 1:0 of the character size in UCSZ1:0*/
	UCSRC = (UCSRC&0xF9) | (((ptr_config->dataSize)&0x03)<<1);
    2e9a:	a0 e4       	ldi	r26, 0x40	; 64
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	29 7f       	andi	r18, 0xF9	; 249
    2ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    2eac:	86 81       	ldd	r24, Z+6	; 0x06
    2eae:	88 2f       	mov	r24, r24
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	83 70       	andi	r24, 0x03	; 3
    2eb4:	90 70       	andi	r25, 0x00	; 0
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	82 2b       	or	r24, r18
    2ebc:	8c 93       	st	X, r24

	/* controlling the parity */
	UCSRC = (UCSRC&0xCF) | ((ptr_config->parityType)<<4); /* Assigning value to UMP 1:0 */
    2ebe:	a0 e4       	ldi	r26, 0x40	; 64
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e0 e4       	ldi	r30, 0x40	; 64
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	28 2f       	mov	r18, r24
    2eca:	2f 7c       	andi	r18, 0xCF	; 207
    2ecc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ece:	fc 81       	ldd	r31, Y+4	; 0x04
    2ed0:	84 81       	ldd	r24, Z+4	; 0x04
    2ed2:	88 2f       	mov	r24, r24
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	82 95       	swap	r24
    2ed8:	92 95       	swap	r25
    2eda:	90 7f       	andi	r25, 0xF0	; 240
    2edc:	98 27       	eor	r25, r24
    2ede:	80 7f       	andi	r24, 0xF0	; 240
    2ee0:	98 27       	eor	r25, r24
    2ee2:	82 2b       	or	r24, r18
    2ee4:	8c 93       	st	X, r24
	
	/* controlling the number of stop bits */
	UCSRC = (UCSRC&0xF7) | ((ptr_config->stopBits)<<3); /* Assigning value to USBS*/
    2ee6:	a0 e4       	ldi	r26, 0x40	; 64
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e0 e4       	ldi	r30, 0x40	; 64
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	27 7f       	andi	r18, 0xF7	; 247
    2ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef8:	85 81       	ldd	r24, Z+5	; 0x05
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	82 2b       	or	r24, r18
    2f0c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ptr_config->baudRate * 8UL))) - 1);
    2f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f10:	fc 81       	ldd	r31, Y+4	; 0x04
    2f12:	80 81       	ld	r24, Z
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	a2 81       	ldd	r26, Z+2	; 0x02
    2f18:	b3 81       	ldd	r27, Z+3	; 0x03
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	aa 1f       	adc	r26, r26
    2f20:	bb 1f       	adc	r27, r27
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	aa 1f       	adc	r26, r26
    2f28:	bb 1f       	adc	r27, r27
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	aa 1f       	adc	r26, r26
    2f30:	bb 1f       	adc	r27, r27
    2f32:	9c 01       	movw	r18, r24
    2f34:	ad 01       	movw	r20, r26
    2f36:	80 e4       	ldi	r24, 0x40	; 64
    2f38:	92 e4       	ldi	r25, 0x42	; 66
    2f3a:	af e0       	ldi	r26, 0x0F	; 15
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 4c 18 	call	0x3098	; 0x3098 <__udivmodsi4>
    2f46:	da 01       	movw	r26, r20
    2f48:	c9 01       	movw	r24, r18
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f50:	e0 e4       	ldi	r30, 0x40	; 64
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	89 2f       	mov	r24, r25
    2f5a:	99 27       	eor	r25, r25
    2f5c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f5e:	e9 e2       	ldi	r30, 0x29	; 41
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	80 83       	st	Z, r24
}
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	0f 92       	push	r0
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2f80:	eb e2       	ldi	r30, 0x2B	; 43
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	80 72       	andi	r24, 0x20	; 32
    2f8c:	90 70       	andi	r25, 0x00	; 0
    2f8e:	00 97       	sbiw	r24, 0x00	; 0
    2f90:	b9 f3       	breq	.-18     	; 0x2f80 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f92:	ec e2       	ldi	r30, 0x2C	; 44
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f9a:	0f 90       	pop	r0
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2faa:	eb e2       	ldi	r30, 0x2B	; 43
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	88 23       	and	r24, r24
    2fb2:	dc f7       	brge	.-10     	; 0x2faa <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2fb4:	ec e2       	ldi	r30, 0x2C	; 44
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
}
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <UART_sendString+0x6>
    2fc6:	0f 92       	push	r0
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	9b 83       	std	Y+3, r25	; 0x03
    2fce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2fd0:	19 82       	std	Y+1, r1	; 0x01
    2fd2:	0e c0       	rjmp	.+28     	; 0x2ff0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e2 0f       	add	r30, r18
    2fe2:	f3 1f       	adc	r31, r19
    2fe4:	80 81       	ld	r24, Z
    2fe6:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <UART_sendByte>
		i++;
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	e2 0f       	add	r30, r18
    2ffe:	f3 1f       	adc	r31, r19
    3000:	80 81       	ld	r24, Z
    3002:	88 23       	and	r24, r24
    3004:	39 f7       	brne	.-50     	; 0x2fd4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <UART_receiveString+0xa>
    301c:	0f 92       	push	r0
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	9b 83       	std	Y+3, r25	; 0x03
    3024:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3026:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	9b 81       	ldd	r25, Y+3	; 0x03
    3032:	8c 01       	movw	r16, r24
    3034:	02 0f       	add	r16, r18
    3036:	13 1f       	adc	r17, r19
    3038:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
    303c:	f8 01       	movw	r30, r16
    303e:	80 83       	st	Z, r24
    3040:	0f c0       	rjmp	.+30     	; 0x3060 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	8f 5f       	subi	r24, 0xFF	; 255
    3046:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	9b 81       	ldd	r25, Y+3	; 0x03
    3052:	8c 01       	movw	r16, r24
    3054:	02 0f       	add	r16, r18
    3056:	13 1f       	adc	r17, r19
    3058:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <UART_recieveByte>
    305c:	f8 01       	movw	r30, r16
    305e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	fc 01       	movw	r30, r24
    306c:	e2 0f       	add	r30, r18
    306e:	f3 1f       	adc	r31, r19
    3070:	80 81       	ld	r24, Z
    3072:	83 32       	cpi	r24, 0x23	; 35
    3074:	31 f7       	brne	.-52     	; 0x3042 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	fc 01       	movw	r30, r24
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	10 82       	st	Z, r1
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	08 95       	ret

00003098 <__udivmodsi4>:
    3098:	a1 e2       	ldi	r26, 0x21	; 33
    309a:	1a 2e       	mov	r1, r26
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	fd 01       	movw	r30, r26
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <__udivmodsi4_ep>

000030a4 <__udivmodsi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	ee 1f       	adc	r30, r30
    30aa:	ff 1f       	adc	r31, r31
    30ac:	a2 17       	cp	r26, r18
    30ae:	b3 07       	cpc	r27, r19
    30b0:	e4 07       	cpc	r30, r20
    30b2:	f5 07       	cpc	r31, r21
    30b4:	20 f0       	brcs	.+8      	; 0x30be <__udivmodsi4_ep>
    30b6:	a2 1b       	sub	r26, r18
    30b8:	b3 0b       	sbc	r27, r19
    30ba:	e4 0b       	sbc	r30, r20
    30bc:	f5 0b       	sbc	r31, r21

000030be <__udivmodsi4_ep>:
    30be:	66 1f       	adc	r22, r22
    30c0:	77 1f       	adc	r23, r23
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	1a 94       	dec	r1
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <__udivmodsi4_loop>
    30ca:	60 95       	com	r22
    30cc:	70 95       	com	r23
    30ce:	80 95       	com	r24
    30d0:	90 95       	com	r25
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	bd 01       	movw	r22, r26
    30d8:	cf 01       	movw	r24, r30
    30da:	08 95       	ret

000030dc <__prologue_saves__>:
    30dc:	2f 92       	push	r2
    30de:	3f 92       	push	r3
    30e0:	4f 92       	push	r4
    30e2:	5f 92       	push	r5
    30e4:	6f 92       	push	r6
    30e6:	7f 92       	push	r7
    30e8:	8f 92       	push	r8
    30ea:	9f 92       	push	r9
    30ec:	af 92       	push	r10
    30ee:	bf 92       	push	r11
    30f0:	cf 92       	push	r12
    30f2:	df 92       	push	r13
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	ca 1b       	sub	r28, r26
    3106:	db 0b       	sbc	r29, r27
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	09 94       	ijmp

00003114 <__epilogue_restores__>:
    3114:	2a 88       	ldd	r2, Y+18	; 0x12
    3116:	39 88       	ldd	r3, Y+17	; 0x11
    3118:	48 88       	ldd	r4, Y+16	; 0x10
    311a:	5f 84       	ldd	r5, Y+15	; 0x0f
    311c:	6e 84       	ldd	r6, Y+14	; 0x0e
    311e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3120:	8c 84       	ldd	r8, Y+12	; 0x0c
    3122:	9b 84       	ldd	r9, Y+11	; 0x0b
    3124:	aa 84       	ldd	r10, Y+10	; 0x0a
    3126:	b9 84       	ldd	r11, Y+9	; 0x09
    3128:	c8 84       	ldd	r12, Y+8	; 0x08
    312a:	df 80       	ldd	r13, Y+7	; 0x07
    312c:	ee 80       	ldd	r14, Y+6	; 0x06
    312e:	fd 80       	ldd	r15, Y+5	; 0x05
    3130:	0c 81       	ldd	r16, Y+4	; 0x04
    3132:	1b 81       	ldd	r17, Y+3	; 0x03
    3134:	aa 81       	ldd	r26, Y+2	; 0x02
    3136:	b9 81       	ldd	r27, Y+1	; 0x01
    3138:	ce 0f       	add	r28, r30
    313a:	d1 1d       	adc	r29, r1
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	ed 01       	movw	r28, r26
    3148:	08 95       	ret

0000314a <itoa>:
    314a:	fb 01       	movw	r30, r22
    314c:	9f 01       	movw	r18, r30
    314e:	e8 94       	clt
    3150:	42 30       	cpi	r20, 0x02	; 2
    3152:	c4 f0       	brlt	.+48     	; 0x3184 <itoa+0x3a>
    3154:	45 32       	cpi	r20, 0x25	; 37
    3156:	b4 f4       	brge	.+44     	; 0x3184 <itoa+0x3a>
    3158:	4a 30       	cpi	r20, 0x0A	; 10
    315a:	29 f4       	brne	.+10     	; 0x3166 <itoa+0x1c>
    315c:	97 fb       	bst	r25, 7
    315e:	1e f4       	brtc	.+6      	; 0x3166 <itoa+0x1c>
    3160:	90 95       	com	r25
    3162:	81 95       	neg	r24
    3164:	9f 4f       	sbci	r25, 0xFF	; 255
    3166:	64 2f       	mov	r22, r20
    3168:	77 27       	eor	r23, r23
    316a:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__udivmodhi4>
    316e:	80 5d       	subi	r24, 0xD0	; 208
    3170:	8a 33       	cpi	r24, 0x3A	; 58
    3172:	0c f0       	brlt	.+2      	; 0x3176 <itoa+0x2c>
    3174:	89 5d       	subi	r24, 0xD9	; 217
    3176:	81 93       	st	Z+, r24
    3178:	cb 01       	movw	r24, r22
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	a1 f7       	brne	.-24     	; 0x3166 <itoa+0x1c>
    317e:	16 f4       	brtc	.+4      	; 0x3184 <itoa+0x3a>
    3180:	5d e2       	ldi	r21, 0x2D	; 45
    3182:	51 93       	st	Z+, r21
    3184:	10 82       	st	Z, r1
    3186:	c9 01       	movw	r24, r18
    3188:	0c 94 c6 18 	jmp	0x318c	; 0x318c <strrev>

0000318c <strrev>:
    318c:	dc 01       	movw	r26, r24
    318e:	fc 01       	movw	r30, r24
    3190:	67 2f       	mov	r22, r23
    3192:	71 91       	ld	r23, Z+
    3194:	77 23       	and	r23, r23
    3196:	e1 f7       	brne	.-8      	; 0x3190 <strrev+0x4>
    3198:	32 97       	sbiw	r30, 0x02	; 2
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <strrev+0x18>
    319c:	7c 91       	ld	r23, X
    319e:	6d 93       	st	X+, r22
    31a0:	70 83       	st	Z, r23
    31a2:	62 91       	ld	r22, -Z
    31a4:	ae 17       	cp	r26, r30
    31a6:	bf 07       	cpc	r27, r31
    31a8:	c8 f3       	brcs	.-14     	; 0x319c <strrev+0x10>
    31aa:	08 95       	ret

000031ac <__udivmodhi4>:
    31ac:	aa 1b       	sub	r26, r26
    31ae:	bb 1b       	sub	r27, r27
    31b0:	51 e1       	ldi	r21, 0x11	; 17
    31b2:	07 c0       	rjmp	.+14     	; 0x31c2 <__udivmodhi4_ep>

000031b4 <__udivmodhi4_loop>:
    31b4:	aa 1f       	adc	r26, r26
    31b6:	bb 1f       	adc	r27, r27
    31b8:	a6 17       	cp	r26, r22
    31ba:	b7 07       	cpc	r27, r23
    31bc:	10 f0       	brcs	.+4      	; 0x31c2 <__udivmodhi4_ep>
    31be:	a6 1b       	sub	r26, r22
    31c0:	b7 0b       	sbc	r27, r23

000031c2 <__udivmodhi4_ep>:
    31c2:	88 1f       	adc	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	5a 95       	dec	r21
    31c8:	a9 f7       	brne	.-22     	; 0x31b4 <__udivmodhi4_loop>
    31ca:	80 95       	com	r24
    31cc:	90 95       	com	r25
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	08 95       	ret

000031d4 <_exit>:
    31d4:	f8 94       	cli

000031d6 <__stop_program>:
    31d6:	ff cf       	rjmp	.-2      	; 0x31d6 <__stop_program>
