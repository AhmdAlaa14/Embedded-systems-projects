
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ea0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001ea0  00001f34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006a  0080006a  00001f3e  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fa  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000054b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005622  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000726b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008156  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000092f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009abf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void MC2Init(void);
/*******************************************************************************
 *                                Application                                  *
 *******************************************************************************/

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 password[7];						/* an array to hold the transferred data*/
	uint8 passwordComResult;				/* to hold the result of the password comparison */
	uint8 misMatchCounter=0;				/* to count the number of mismatched passwords */
     b5a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 operation;						/* to hold the operation wanted by the user */
	MC2Init();								/* to initialize the peripherals used in MC2*/
     b5c:	0e 94 aa 07 	call	0xf54	; 0xf54 <MC2Init>
	RecievePassword(password);			/* receiving the password for the first time and saving it */
     b60:	ce 01       	movw	r24, r28
     b62:	04 96       	adiw	r24, 0x04	; 4
     b64:	0e 94 58 07 	call	0xeb0	; 0xeb0 <RecievePassword>
	ChangePassword(password);				/* to save the password for the first time */
     b68:	ce 01       	movw	r24, r28
     b6a:	04 96       	adiw	r24, 0x04	; 4
     b6c:	0e 94 b0 06 	call	0xd60	; 0xd60 <ChangePassword>
		 * a do while loop to receive the password and compare it at least once and at most three times
		 * the do while loop stands while the result of the comparison is false and the number of mismatches
		 * is less than three
		 */
		do{
			RecievePassword(password);							/* receiving the password */
     b70:	ce 01       	movw	r24, r28
     b72:	04 96       	adiw	r24, 0x04	; 4
     b74:	0e 94 58 07 	call	0xeb0	; 0xeb0 <RecievePassword>

			passwordComResult=ComparePassword(password);		/* comparing the password */
     b78:	ce 01       	movw	r24, r28
     b7a:	04 96       	adiw	r24, 0x04	; 4
     b7c:	0e 94 04 06 	call	0xc08	; 0xc08 <ComparePassword>
     b80:	8b 83       	std	Y+3, r24	; 0x03
			UART_sendByte(passwordComResult);					/* sending back the result of the comparison */
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <UART_sendByte>
			/* checking on the number of mismatches */
			if(passwordComResult==INCORRECT){
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	88 23       	and	r24, r24
     b8c:	71 f4       	brne	.+28     	; 0xbaa <main+0x64>
				misMatchCounter++;								/* increasing the mismatch counter*/
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	8a 83       	std	Y+2, r24	; 0x02
				if(misMatchCounter==3){
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	21 f4       	brne	.+8      	; 0xba2 <main+0x5c>
					/*alarm();*/
					UART_sendByte(LIMIT_PASSED);				/* sending back that the limit of trial is matched */
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <UART_sendByte>
     ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <main+0x6a>
				}
				else{
					UART_sendByte(LIMIT_NOT_PASSED);
     ba2:	8e ef       	ldi	r24, 0xFE	; 254
     ba4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <UART_sendByte>
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <main+0x6a>
				}
			}
			else{
				UART_sendByte(LIMIT_NOT_PASSED);
     baa:	8e ef       	ldi	r24, 0xFE	; 254
     bac:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <UART_sendByte>
			}
		}while( (!passwordComResult ) && (misMatchCounter!=3) );
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	88 23       	and	r24, r24
     bb4:	19 f4       	brne	.+6      	; 0xbbc <main+0x76>
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	d1 f6       	brne	.-76     	; 0xb70 <main+0x2a>
		/*
		 * the operation wanted is held in the 6th element of the password
		 */
		operation=password[6];									/* taking the wanted operation from the received password array*/
     bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     bbe:	89 83       	std	Y+1, r24	; 0x01
		if(misMatchCounter==3){
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	21 f4       	brne	.+8      	; 0xbce <main+0x88>
			operation=LIMIT_PASSED;								/* changing the operation if mismatch number is 3*/
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	89 83       	std	Y+1, r24	; 0x01
			Alarm();											/* calling the alarm function to turn on the buzzer */
     bca:	0e 94 7e 07 	call	0xefc	; 0xefc <Alarm>
		}

		misMatchCounter=0;										/* making the mismatch counter 0 again */
     bce:	1a 82       	std	Y+2, r1	; 0x02

		switch(operation){
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	3c 87       	std	Y+12, r19	; 0x0c
     bd8:	2b 87       	std	Y+11, r18	; 0x0b
     bda:	8b 85       	ldd	r24, Y+11	; 0x0b
     bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bde:	8b 32       	cpi	r24, 0x2B	; 43
     be0:	91 05       	cpc	r25, r1
     be2:	31 f0       	breq	.+12     	; 0xbf0 <main+0xaa>
     be4:	2b 85       	ldd	r18, Y+11	; 0x0b
     be6:	3c 85       	ldd	r19, Y+12	; 0x0c
     be8:	2d 32       	cpi	r18, 0x2D	; 45
     bea:	31 05       	cpc	r19, r1
     bec:	21 f0       	breq	.+8      	; 0xbf6 <main+0xb0>
     bee:	c0 cf       	rjmp	.-128    	; 0xb70 <main+0x2a>
		case '+':
			OpenDoor();											/* to open the door */
     bf0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <OpenDoor>
     bf4:	bd cf       	rjmp	.-134    	; 0xb70 <main+0x2a>
			break;
		case '-':
			RecievePassword(password);							/* to take the new password from the user */
     bf6:	ce 01       	movw	r24, r28
     bf8:	04 96       	adiw	r24, 0x04	; 4
     bfa:	0e 94 58 07 	call	0xeb0	; 0xeb0 <RecievePassword>
			ChangePassword(password);							/* to store the password in the EEPROM */
     bfe:	ce 01       	movw	r24, r28
     c00:	04 96       	adiw	r24, 0x04	; 4
     c02:	0e 94 b0 06 	call	0xd60	; 0xd60 <ChangePassword>
     c06:	b4 cf       	rjmp	.-152    	; 0xb70 <main+0x2a>

00000c08 <ComparePassword>:
 * IN:
 * uint8 ptr_password
 * OUT:
 * uint8 result
 */
uint8 ComparePassword(uint8* ptr_password){
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <ComparePassword+0x6>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <ComparePassword+0x8>
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	9d 83       	std	Y+5, r25	; 0x05
     c18:	8c 83       	std	Y+4, r24	; 0x04
	uint8 result=CORRECT;										/* a variable to hold the result of the comparison */
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 comparedCharacter;									/* a variable to hold the character received from the memory*/
	uint8 i=0;													/* a counter for the for loop */
     c1e:	19 82       	std	Y+1, r1	; 0x01

	/* a for loop to compare every character of the password */
	for(i=0;i<PASSWORD_SIZE;i++){
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <ComparePassword+0x5a>
		EEPROM_readByte(passwordAddress+i,&comparedCharacter);	/* reading a character from the memory */
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	80 91 68 00 	lds	r24, 0x0068
     c2e:	90 91 69 00 	lds	r25, 0x0069
     c32:	82 0f       	add	r24, r18
     c34:	93 1f       	adc	r25, r19
     c36:	9e 01       	movw	r18, r28
     c38:	2d 5f       	subi	r18, 0xFD	; 253
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	b9 01       	movw	r22, r18
     c3e:	0e 94 47 08 	call	0x108e	; 0x108e <EEPROM_readByte>
		/* comparing every character */
		if(ptr_password[i]!=comparedCharacter){
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	fc 01       	movw	r30, r24
     c4e:	e2 0f       	add	r30, r18
     c50:	f3 1f       	adc	r31, r19
     c52:	90 81       	ld	r25, Z
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	98 17       	cp	r25, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <ComparePassword+0x54>
			result=INCORRECT;
     c5a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 result=CORRECT;										/* a variable to hold the result of the comparison */
	uint8 comparedCharacter;									/* a variable to hold the character received from the memory*/
	uint8 i=0;													/* a counter for the for loop */

	/* a for loop to compare every character of the password */
	for(i=0;i<PASSWORD_SIZE;i++){
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	85 30       	cpi	r24, 0x05	; 5
     c66:	f0 f2       	brcs	.-68     	; 0xc24 <ComparePassword+0x1c>
		/* comparing every character */
		if(ptr_password[i]!=comparedCharacter){
			result=INCORRECT;
		}
	}
	return result;
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <OpenDoor>:
 * NONE
 * OUT:
 * NONE
 */

void OpenDoor(void){
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <OpenDoor+0x6>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <OpenDoor+0x8>
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62

	/*
	 * this function is responsible for initializing the timer and setting the timer's callback function
	 */
	TIMER0_SetCallback(CountSeconds);			/* setting the callback function of the timer0 */
     c86:	80 ea       	ldi	r24, 0xA0	; 160
     c88:	96 e0       	ldi	r25, 0x06	; 6
     c8a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <TIMER0_SetCallback>
	Timer_config timerConfig;					/* a structure to hold the conigurations of the timer */
	timerConfig.timerMode=OV_MODE;
     c8e:	1c 82       	std	Y+4, r1	; 0x04
	timerConfig.initValue=6;
     c90:	86 e0       	ldi	r24, 0x06	; 6
     c92:	89 83       	std	Y+1, r24	; 0x01
	timerConfig.compValue=250;
     c94:	8a ef       	ldi	r24, 0xFA	; 250
     c96:	8a 83       	std	Y+2, r24	; 0x02
	timerConfig.prescalar=F_CPU_1024;
     c98:	85 e0       	ldi	r24, 0x05	; 5
     c9a:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Init(&timerConfig);
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 9e 0c 	call	0x193c	; 0x193c <TIMER0_Init>
     ca4:	39 c0       	rjmp	.+114    	; 0xd18 <OpenDoor+0x9e>

	while(tick<=1031){
		if (tick==1){
     ca6:	80 91 6a 00 	lds	r24, 0x006A
     caa:	90 91 6b 00 	lds	r25, 0x006B
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	21 f4       	brne	.+8      	; 0xcbc <OpenDoor+0x42>
			/* start rotating the motor to open the door */
			DcMotor_Rotate(CW);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 00 0c 	call	0x1800	; 0x1800 <DcMotor_Rotate>
     cba:	2e c0       	rjmp	.+92     	; 0xd18 <OpenDoor+0x9e>
		}
		else if(tick==469){
     cbc:	80 91 6a 00 	lds	r24, 0x006A
     cc0:	90 91 6b 00 	lds	r25, 0x006B
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	85 3d       	cpi	r24, 0xD5	; 213
     cc8:	92 07       	cpc	r25, r18
     cca:	21 f4       	brne	.+8      	; 0xcd4 <OpenDoor+0x5a>
			/* this means a 15 seconds has passed so the door needs to be hold for 3 seconds */
			DcMotor_Rotate(OFF);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 00 0c 	call	0x1800	; 0x1800 <DcMotor_Rotate>
     cd2:	22 c0       	rjmp	.+68     	; 0xd18 <OpenDoor+0x9e>
		}
		else if(tick==563){
     cd4:	80 91 6a 00 	lds	r24, 0x006A
     cd8:	90 91 6b 00 	lds	r25, 0x006B
     cdc:	22 e0       	ldi	r18, 0x02	; 2
     cde:	83 33       	cpi	r24, 0x33	; 51
     ce0:	92 07       	cpc	r25, r18
     ce2:	21 f4       	brne	.+8      	; 0xcec <OpenDoor+0x72>
			/* this means the has been open for 3 seconds so it needs to be closed */
			DcMotor_Rotate(A_CW);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 00 0c 	call	0x1800	; 0x1800 <DcMotor_Rotate>
     cea:	16 c0       	rjmp	.+44     	; 0xd18 <OpenDoor+0x9e>
		}
		else if(tick==1031){
     cec:	80 91 6a 00 	lds	r24, 0x006A
     cf0:	90 91 6b 00 	lds	r25, 0x006B
     cf4:	24 e0       	ldi	r18, 0x04	; 4
     cf6:	87 30       	cpi	r24, 0x07	; 7
     cf8:	92 07       	cpc	r25, r18
     cfa:	71 f4       	brne	.+28     	; 0xd18 <OpenDoor+0x9e>
			/* this means the door has returned to its initial position after 33 seconds */
			/* so the motor stops and the tick timer is reset to zero and the timer is de-initalized */
			DcMotor_Rotate(OFF);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 00 0c 	call	0x1800	; 0x1800 <DcMotor_Rotate>
			TIMER0_DeInit();
     d02:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <TIMER0_DeInit>
			tick++;
     d06:	80 91 6a 00 	lds	r24, 0x006A
     d0a:	90 91 6b 00 	lds	r25, 0x006B
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	90 93 6b 00 	sts	0x006B, r25
     d14:	80 93 6a 00 	sts	0x006A, r24
	timerConfig.initValue=6;
	timerConfig.compValue=250;
	timerConfig.prescalar=F_CPU_1024;
	TIMER0_Init(&timerConfig);

	while(tick<=1031){
     d18:	80 91 6a 00 	lds	r24, 0x006A
     d1c:	90 91 6b 00 	lds	r25, 0x006B
     d20:	24 e0       	ldi	r18, 0x04	; 4
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	92 07       	cpc	r25, r18
     d26:	08 f4       	brcc	.+2      	; 0xd2a <OpenDoor+0xb0>
     d28:	be cf       	rjmp	.-132    	; 0xca6 <OpenDoor+0x2c>
			DcMotor_Rotate(OFF);
			TIMER0_DeInit();
			tick++;
		}
	}
	tick=0;
     d2a:	10 92 6b 00 	sts	0x006B, r1
     d2e:	10 92 6a 00 	sts	0x006A, r1
}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <CountSeconds>:
 * NONE
 * OUT:
 * NONE
 */

void CountSeconds(void){
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	tick++ ;
     d48:	80 91 6a 00 	lds	r24, 0x006A
     d4c:	90 91 6b 00 	lds	r25, 0x006B
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	90 93 6b 00 	sts	0x006B, r25
     d56:	80 93 6a 00 	sts	0x006A, r24
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <ChangePassword>:
 * IN:
 * uint8 *ptr_password
 * OUT:
 * NONE
 */
void ChangePassword(uint8 *ptr_password){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	61 97       	sbiw	r28, 0x11	; 17
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	99 8b       	std	Y+17, r25	; 0x11
     d76:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
     d78:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<PASSWORD_SIZE;i++){
     d7a:	1f 86       	std	Y+15, r1	; 0x0f
     d7c:	8c c0       	rjmp	.+280    	; 0xe96 <ChangePassword+0x136>
		EEPROM_writeByte(passwordAddress+i,ptr_password[i]);
     d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	80 91 68 00 	lds	r24, 0x0068
     d88:	90 91 69 00 	lds	r25, 0x0069
     d8c:	a9 01       	movw	r20, r18
     d8e:	48 0f       	add	r20, r24
     d90:	59 1f       	adc	r21, r25
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	88 89       	ldd	r24, Y+16	; 0x10
     d9a:	99 89       	ldd	r25, Y+17	; 0x11
     d9c:	fc 01       	movw	r30, r24
     d9e:	e2 0f       	add	r30, r18
     da0:	f3 1f       	adc	r31, r19
     da2:	20 81       	ld	r18, Z
     da4:	ca 01       	movw	r24, r20
     da6:	62 2f       	mov	r22, r18
     da8:	0e 94 06 08 	call	0x100c	; 0x100c <EEPROM_writeByte>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e2       	ldi	r26, 0x20	; 32
     db2:	b1 e4       	ldi	r27, 0x41	; 65
     db4:	8b 87       	std	Y+11, r24	; 0x0b
     db6:	9c 87       	std	Y+12, r25	; 0x0c
     db8:	ad 87       	std	Y+13, r26	; 0x0d
     dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	4a ef       	ldi	r20, 0xFA	; 250
     dca:	54 e4       	ldi	r21, 0x44	; 68
     dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	8f 83       	std	Y+7, r24	; 0x07
     dd6:	98 87       	std	Y+8, r25	; 0x08
     dd8:	a9 87       	std	Y+9, r26	; 0x09
     dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	78 85       	ldd	r23, Y+8	; 0x08
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	2c f4       	brge	.+10     	; 0xdfe <ChangePassword+0x9e>
		__ticks = 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9e 83       	std	Y+6, r25	; 0x06
     dfa:	8d 83       	std	Y+5, r24	; 0x05
     dfc:	3f c0       	rjmp	.+126    	; 0xe7c <ChangePassword+0x11c>
	else if (__tmp > 65535)
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	4f e7       	ldi	r20, 0x7F	; 127
     e0c:	57 e4       	ldi	r21, 0x47	; 71
     e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e12:	18 16       	cp	r1, r24
     e14:	4c f5       	brge	.+82     	; 0xe68 <ChangePassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e16:	6b 85       	ldd	r22, Y+11	; 0x0b
     e18:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e2       	ldi	r20, 0x20	; 32
     e24:	51 e4       	ldi	r21, 0x41	; 65
     e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <ChangePassword+0xfe>
     e40:	88 ec       	ldi	r24, 0xC8	; 200
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <ChangePassword+0xec>
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9e 83       	std	Y+6, r25	; 0x06
     e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	69 f7       	brne	.-38     	; 0xe40 <ChangePassword+0xe0>
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <ChangePassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <ChangePassword+0x128>
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
 * OUT:
 * NONE
 */
void ChangePassword(uint8 *ptr_password){
	uint8 i=0;
	for(i=0;i<PASSWORD_SIZE;i++){
     e90:	8f 85       	ldd	r24, Y+15	; 0x0f
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	8f 87       	std	Y+15, r24	; 0x0f
     e96:	8f 85       	ldd	r24, Y+15	; 0x0f
     e98:	85 30       	cpi	r24, 0x05	; 5
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <ChangePassword+0x13e>
     e9c:	70 cf       	rjmp	.-288    	; 0xd7e <ChangePassword+0x1e>
		EEPROM_writeByte(passwordAddress+i,ptr_password[i]);
		_delay_ms(10);
	}
}
     e9e:	61 96       	adiw	r28, 0x11	; 17
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <RecievePassword>:
 * IN:
 * uint8 * ptr_password
 * OUT:
 * NONE
 */
void RecievePassword(uint8 *ptr_password){
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <RecievePassword+0xa>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9b 83       	std	Y+3, r25	; 0x03
     ec2:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0;i<DATA_SIZE;i++){
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <RecievePassword+0x36>
		ptr_password[i]=UART_recieveByte();
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	8c 01       	movw	r16, r24
     ed4:	02 0f       	add	r16, r18
     ed6:	13 1f       	adc	r17, r19
     ed8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
     edc:	f8 01       	movw	r30, r16
     ede:	80 83       	st	Z, r24
 * uint8 * ptr_password
 * OUT:
 * NONE
 */
void RecievePassword(uint8 *ptr_password){
	for (uint8 i=0;i<DATA_SIZE;i++){
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	87 30       	cpi	r24, 0x07	; 7
     eea:	70 f3       	brcs	.-36     	; 0xec8 <RecievePassword+0x18>
		ptr_password[i]=UART_recieveByte();
	}
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <Alarm>:
 * NONE
 * OUT:
 * NONE
 */

void Alarm(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <Alarm+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <Alarm+0x8>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	TIMER0_SetCallback(CountSeconds);			/* setting the callback function of the timer0 */
     f08:	80 ea       	ldi	r24, 0xA0	; 160
     f0a:	96 e0       	ldi	r25, 0x06	; 6
     f0c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <TIMER0_SetCallback>
	Timer_config timerConfig;					/* a structure to hold the configurations of the timer */
	timerConfig.timerMode=OV_MODE;
     f10:	1c 82       	std	Y+4, r1	; 0x04
	timerConfig.initValue=6;
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	89 83       	std	Y+1, r24	; 0x01
	timerConfig.compValue=250;
     f16:	8a ef       	ldi	r24, 0xFA	; 250
     f18:	8a 83       	std	Y+2, r24	; 0x02
	timerConfig.prescalar=F_CPU_1024;
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_Init(&timerConfig);
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	0e 94 9e 0c 	call	0x193c	; 0x193c <TIMER0_Init>
	BUZZER_On();
     f26:	0e 94 ee 07 	call	0xfdc	; 0xfdc <BUZZER_On>
	while(tick<=1875){}
     f2a:	80 91 6a 00 	lds	r24, 0x006A
     f2e:	90 91 6b 00 	lds	r25, 0x006B
     f32:	27 e0       	ldi	r18, 0x07	; 7
     f34:	84 35       	cpi	r24, 0x54	; 84
     f36:	92 07       	cpc	r25, r18
     f38:	c0 f3       	brcs	.-16     	; 0xf2a <Alarm+0x2e>
	BUZZER_Off();
     f3a:	0e 94 fa 07 	call	0xff4	; 0xff4 <BUZZER_Off>
	tick=0;
     f3e:	10 92 6b 00 	sts	0x006B, r1
     f42:	10 92 6a 00 	sts	0x006A, r1
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <MC2Init>:
 * IN:
 * NONE
 * OUT:
 * NONE
 */
void MC2Init(void){
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	29 97       	sbiw	r28, 0x09	; 9
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
     f68:	af e5       	ldi	r26, 0x5F	; 95
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ef e5       	ldi	r30, 0x5F	; 95
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 68       	ori	r24, 0x80	; 128
     f74:	8c 93       	st	X, r24
	DcMotor_Init();							/* initializing the DC motor*/
     f76:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DcMotor_Init>
	BUZZER_Init();							/* initializing the buzzer */
     f7a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <BUZZER_Init>

	/* Configurations and initialization of the UART*/
	UART_config uartConfig;					/* a structure to hold the configurations of the UART*/
	uartConfig.baudRate=9600;
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	95 e2       	ldi	r25, 0x25	; 37
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	ab 83       	std	Y+3, r26	; 0x03
     f8c:	bc 83       	std	Y+4, r27	; 0x04
	uartConfig.dataSize=BIT_8;
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	8f 83       	std	Y+7, r24	; 0x07
	uartConfig.parityType=PARITY_OFF;
     f92:	1d 82       	std	Y+5, r1	; 0x05
	uartConfig.stopBits=ONE_BIT;
     f94:	1e 82       	std	Y+6, r1	; 0x06
	UART_init(&uartConfig);
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <UART_init>

	/* Configurations and initialization of TWI */
	TWI_config twiConfig;					/*  a structure to hold the configurations of the TWI */
	twiConfig.address=0x02;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	88 87       	std	Y+8, r24	; 0x08
	twiConfig.mode=FAST_MODE;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	89 87       	std	Y+9, r24	; 0x09
	TWI_init(&twiConfig);
     fa6:	ce 01       	movw	r24, r28
     fa8:	08 96       	adiw	r24, 0x08	; 8
     faa:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <TWI_init>
}
     fae:	29 96       	adiw	r28, 0x09	; 9
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <BUZZER_Init>:
 * Description :
 * Initialize the buzzer:
 * 1. setup an output port for the buzzer.
 * 2. turn off the buzzer.
 */
void BUZZER_Init(void){
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	64 e0       	ldi	r22, 0x04	; 4
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_setupPinDirection>
	BUZZER_Off();
     fd2:	0e 94 fa 07 	call	0xff4	; 0xff4 <BUZZER_Off>
}
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <BUZZER_On>:
/*
 * Description :
 * Initialize the buzzer:
 * 1. turn on the buzzer.
 */
void BUZZER_On(void){
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <BUZZER_Off>:
/*
 * Description :
 * Initialize the buzzer:
 * 1. turn off the buzzer.
 */
void BUZZER_Off(void){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	64 e0       	ldi	r22, 0x04	; 4
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <EEPROM_writeByte+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <EEPROM_writeByte+0x8>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    101e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1022:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	11 f0       	breq	.+4      	; 0x102e <EEPROM_writeByte+0x22>
        return ERROR;
    102a:	1c 82       	std	Y+4, r1	; 0x04
    102c:	28 c0       	rjmp	.+80     	; 0x107e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
    1032:	80 70       	andi	r24, 0x00	; 0
    1034:	97 70       	andi	r25, 0x07	; 7
    1036:	88 0f       	add	r24, r24
    1038:	89 2f       	mov	r24, r25
    103a:	88 1f       	adc	r24, r24
    103c:	99 0b       	sbc	r25, r25
    103e:	91 95       	neg	r25
    1040:	80 6a       	ori	r24, 0xA0	; 160
    1042:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1046:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    104a:	88 31       	cpi	r24, 0x18	; 24
    104c:	11 f0       	breq	.+4      	; 0x1052 <EEPROM_writeByte+0x46>
        return ERROR; 
    104e:	1c 82       	std	Y+4, r1	; 0x04
    1050:	16 c0       	rjmp	.+44     	; 0x107e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1058:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    105c:	88 32       	cpi	r24, 0x28	; 40
    105e:	11 f0       	breq	.+4      	; 0x1064 <EEPROM_writeByte+0x58>
        return ERROR;
    1060:	1c 82       	std	Y+4, r1	; 0x04
    1062:	0d c0       	rjmp	.+26     	; 0x107e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    106a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    106e:	88 32       	cpi	r24, 0x28	; 40
    1070:	11 f0       	breq	.+4      	; 0x1076 <EEPROM_writeByte+0x6a>
        return ERROR;
    1072:	1c 82       	std	Y+4, r1	; 0x04
    1074:	04 c0       	rjmp	.+8      	; 0x107e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1076:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <TWI_stop>
	
    return SUCCESS;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	8c 83       	std	Y+4, r24	; 0x04
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <EEPROM_readByte+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <EEPROM_readByte+0x8>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	7c 83       	std	Y+4, r23	; 0x04
    10a2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10a4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    10a8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	11 f0       	breq	.+4      	; 0x10b4 <EEPROM_readByte+0x26>
        return ERROR;
    10b0:	1d 82       	std	Y+5, r1	; 0x05
    10b2:	44 c0       	rjmp	.+136    	; 0x113c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	80 70       	andi	r24, 0x00	; 0
    10ba:	97 70       	andi	r25, 0x07	; 7
    10bc:	88 0f       	add	r24, r24
    10be:	89 2f       	mov	r24, r25
    10c0:	88 1f       	adc	r24, r24
    10c2:	99 0b       	sbc	r25, r25
    10c4:	91 95       	neg	r25
    10c6:	80 6a       	ori	r24, 0xA0	; 160
    10c8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10cc:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    10d0:	88 31       	cpi	r24, 0x18	; 24
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <EEPROM_readByte+0x4a>
        return ERROR;
    10d4:	1d 82       	std	Y+5, r1	; 0x05
    10d6:	32 c0       	rjmp	.+100    	; 0x113c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10de:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    10e2:	88 32       	cpi	r24, 0x28	; 40
    10e4:	11 f0       	breq	.+4      	; 0x10ea <EEPROM_readByte+0x5c>
        return ERROR;
    10e6:	1d 82       	std	Y+5, r1	; 0x05
    10e8:	29 c0       	rjmp	.+82     	; 0x113c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    10ea:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    10ee:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    10f2:	80 31       	cpi	r24, 0x10	; 16
    10f4:	11 f0       	breq	.+4      	; 0x10fa <EEPROM_readByte+0x6c>
        return ERROR;
    10f6:	1d 82       	std	Y+5, r1	; 0x05
    10f8:	21 c0       	rjmp	.+66     	; 0x113c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	80 70       	andi	r24, 0x00	; 0
    1100:	97 70       	andi	r25, 0x07	; 7
    1102:	88 0f       	add	r24, r24
    1104:	89 2f       	mov	r24, r25
    1106:	88 1f       	adc	r24, r24
    1108:	99 0b       	sbc	r25, r25
    110a:	91 95       	neg	r25
    110c:	81 6a       	ori	r24, 0xA1	; 161
    110e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1112:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    1116:	80 34       	cpi	r24, 0x40	; 64
    1118:	11 f0       	breq	.+4      	; 0x111e <EEPROM_readByte+0x90>
        return ERROR;
    111a:	1d 82       	std	Y+5, r1	; 0x05
    111c:	0f c0       	rjmp	.+30     	; 0x113c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    111e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TWI_readByteWithNACK>
    1122:	eb 81       	ldd	r30, Y+3	; 0x03
    1124:	fc 81       	ldd	r31, Y+4	; 0x04
    1126:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1128:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TWI_getStatus>
    112c:	88 35       	cpi	r24, 0x58	; 88
    112e:	11 f0       	breq	.+4      	; 0x1134 <EEPROM_readByte+0xa6>
        return ERROR;
    1130:	1d 82       	std	Y+5, r1	; 0x05
    1132:	04 c0       	rjmp	.+8      	; 0x113c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1134:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <TWI_stop>

    return SUCCESS;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <GPIO_setupPinDirection+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_setupPinDirection+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	88 30       	cpi	r24, 0x08	; 8
    1166:	08 f0       	brcs	.+2      	; 0x116a <GPIO_setupPinDirection+0x1c>
    1168:	d5 c0       	rjmp	.+426    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	84 30       	cpi	r24, 0x04	; 4
    116e:	08 f0       	brcs	.+2      	; 0x1172 <GPIO_setupPinDirection+0x24>
    1170:	d1 c0       	rjmp	.+418    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3d 83       	std	Y+5, r19	; 0x05
    117a:	2c 83       	std	Y+4, r18	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <GPIO_setupPinDirection+0x3a>
    1186:	43 c0       	rjmp	.+134    	; 0x120e <GPIO_setupPinDirection+0xc0>
    1188:	2c 81       	ldd	r18, Y+4	; 0x04
    118a:	3d 81       	ldd	r19, Y+5	; 0x05
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <GPIO_setupPinDirection+0x4e>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	71 f0       	breq	.+28     	; 0x11b6 <GPIO_setupPinDirection+0x68>
    119a:	bc c0       	rjmp	.+376    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
    119c:	2c 81       	ldd	r18, Y+4	; 0x04
    119e:	3d 81       	ldd	r19, Y+5	; 0x05
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_setupPinDirection+0x5a>
    11a6:	5f c0       	rjmp	.+190    	; 0x1266 <GPIO_setupPinDirection+0x118>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <GPIO_setupPinDirection+0x66>
    11b2:	85 c0       	rjmp	.+266    	; 0x12be <GPIO_setupPinDirection+0x170>
    11b4:	af c0       	rjmp	.+350    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11bc:	aa e3       	ldi	r26, 0x3A	; 58
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x8c>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x88>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	98 c0       	rjmp	.+304    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11e4:	aa e3       	ldi	r26, 0x3A	; 58
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ea e3       	ldi	r30, 0x3A	; 58
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0xb4>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0xb0>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	83 c0       	rjmp	.+262    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	a1 f4       	brne	.+40     	; 0x123c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1214:	a7 e3       	ldi	r26, 0x37	; 55
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e7 e3       	ldi	r30, 0x37	; 55
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_setupPinDirection+0xe4>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_setupPinDirection+0xe0>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	6c c0       	rjmp	.+216    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    123c:	a7 e3       	ldi	r26, 0x37	; 55
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e7 e3       	ldi	r30, 0x37	; 55
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <GPIO_setupPinDirection+0x10c>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <GPIO_setupPinDirection+0x108>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	57 c0       	rjmp	.+174    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	a1 f4       	brne	.+40     	; 0x1294 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    126c:	a4 e3       	ldi	r26, 0x34	; 52
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e4 e3       	ldi	r30, 0x34	; 52
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_setupPinDirection+0x13c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_setupPinDirection+0x138>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	40 c0       	rjmp	.+128    	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1294:	a4 e3       	ldi	r26, 0x34	; 52
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <GPIO_setupPinDirection+0x164>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <GPIO_setupPinDirection+0x160>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	2b c0       	rjmp	.+86     	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	a1 f4       	brne	.+40     	; 0x12ec <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12c4:	a1 e3       	ldi	r26, 0x31	; 49
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_setupPinDirection+0x194>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_setupPinDirection+0x190>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12ec:	a1 e3       	ldi	r26, 0x31	; 49
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e1 e3       	ldi	r30, 0x31	; 49
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_setupPinDirection+0x1bc>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_setupPinDirection+0x1b8>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_writePin+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_writePin+0x8>
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
    1336:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	88 30       	cpi	r24, 0x08	; 8
    133c:	08 f0       	brcs	.+2      	; 0x1340 <GPIO_writePin+0x1c>
    133e:	d5 c0       	rjmp	.+426    	; 0x14ea <GPIO_writePin+0x1c6>
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	08 f0       	brcs	.+2      	; 0x1348 <GPIO_writePin+0x24>
    1346:	d1 c0       	rjmp	.+418    	; 0x14ea <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <GPIO_writePin+0x3a>
    135c:	43 c0       	rjmp	.+134    	; 0x13e4 <GPIO_writePin+0xc0>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <GPIO_writePin+0x4e>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	71 f0       	breq	.+28     	; 0x138c <GPIO_writePin+0x68>
    1370:	bc c0       	rjmp	.+376    	; 0x14ea <GPIO_writePin+0x1c6>
    1372:	2c 81       	ldd	r18, Y+4	; 0x04
    1374:	3d 81       	ldd	r19, Y+5	; 0x05
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <GPIO_writePin+0x5a>
    137c:	5f c0       	rjmp	.+190    	; 0x143c <GPIO_writePin+0x118>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	91 05       	cpc	r25, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <GPIO_writePin+0x66>
    1388:	85 c0       	rjmp	.+266    	; 0x1494 <GPIO_writePin+0x170>
    138a:	af c0       	rjmp	.+350    	; 0x14ea <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	a1 f4       	brne	.+40     	; 0x13ba <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1392:	ab e3       	ldi	r26, 0x3B	; 59
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	eb e3       	ldi	r30, 0x3B	; 59
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <GPIO_writePin+0x8c>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <GPIO_writePin+0x88>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	98 c0       	rjmp	.+304    	; 0x14ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13ba:	ab e3       	ldi	r26, 0x3B	; 59
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	eb e3       	ldi	r30, 0x3B	; 59
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0xb4>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0xb0>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	83 c0       	rjmp	.+262    	; 0x14ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a1 f4       	brne	.+40     	; 0x1412 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_writePin+0xe4>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_writePin+0xe0>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	6c c0       	rjmp	.+216    	; 0x14ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1412:	a8 e3       	ldi	r26, 0x38	; 56
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e3       	ldi	r30, 0x38	; 56
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_writePin+0x10c>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_writePin+0x108>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	57 c0       	rjmp	.+174    	; 0x14ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	a1 f4       	brne	.+40     	; 0x146a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GPIO_writePin+0x13c>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <GPIO_writePin+0x138>
    1464:	84 2b       	or	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	40 c0       	rjmp	.+128    	; 0x14ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_writePin+0x164>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_writePin+0x160>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	2b c0       	rjmp	.+86     	; 0x14ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	a1 f4       	brne	.+40     	; 0x14c2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    149a:	a2 e3       	ldi	r26, 0x32	; 50
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e2 e3       	ldi	r30, 0x32	; 50
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <GPIO_writePin+0x194>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <GPIO_writePin+0x190>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14c2:	a2 e3       	ldi	r26, 0x32	; 50
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_writePin+0x1bc>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_writePin+0x1b8>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <GPIO_readPin+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_readPin+0x8>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    150c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 30       	cpi	r24, 0x08	; 8
    1512:	08 f0       	brcs	.+2      	; 0x1516 <GPIO_readPin+0x1c>
    1514:	84 c0       	rjmp	.+264    	; 0x161e <GPIO_readPin+0x124>
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	84 30       	cpi	r24, 0x04	; 4
    151a:	08 f0       	brcs	.+2      	; 0x151e <GPIO_readPin+0x24>
    151c:	80 c0       	rjmp	.+256    	; 0x161e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3d 83       	std	Y+5, r19	; 0x05
    1526:	2c 83       	std	Y+4, r18	; 0x04
    1528:	4c 81       	ldd	r20, Y+4	; 0x04
    152a:	5d 81       	ldd	r21, Y+5	; 0x05
    152c:	41 30       	cpi	r20, 0x01	; 1
    152e:	51 05       	cpc	r21, r1
    1530:	79 f1       	breq	.+94     	; 0x1590 <GPIO_readPin+0x96>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	91 05       	cpc	r25, r1
    153a:	34 f4       	brge	.+12     	; 0x1548 <GPIO_readPin+0x4e>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	69 f0       	breq	.+26     	; 0x1560 <GPIO_readPin+0x66>
    1546:	6b c0       	rjmp	.+214    	; 0x161e <GPIO_readPin+0x124>
    1548:	4c 81       	ldd	r20, Y+4	; 0x04
    154a:	5d 81       	ldd	r21, Y+5	; 0x05
    154c:	42 30       	cpi	r20, 0x02	; 2
    154e:	51 05       	cpc	r21, r1
    1550:	b9 f1       	breq	.+110    	; 0x15c0 <GPIO_readPin+0xc6>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <GPIO_readPin+0x64>
    155c:	49 c0       	rjmp	.+146    	; 0x15f0 <GPIO_readPin+0xf6>
    155e:	5f c0       	rjmp	.+190    	; 0x161e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1560:	e9 e3       	ldi	r30, 0x39	; 57
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a9 01       	movw	r20, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_readPin+0x7e>
    1574:	55 95       	asr	r21
    1576:	47 95       	ror	r20
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_readPin+0x7a>
    157c:	ca 01       	movw	r24, r20
    157e:	81 70       	andi	r24, 0x01	; 1
    1580:	90 70       	andi	r25, 0x00	; 0
    1582:	88 23       	and	r24, r24
    1584:	19 f0       	breq	.+6      	; 0x158c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	49 c0       	rjmp	.+146    	; 0x161e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    158c:	19 82       	std	Y+1, r1	; 0x01
    158e:	47 c0       	rjmp	.+142    	; 0x161e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1590:	e6 e3       	ldi	r30, 0x36	; 54
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_readPin+0xae>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_readPin+0xaa>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	90 70       	andi	r25, 0x00	; 0
    15b2:	88 23       	and	r24, r24
    15b4:	19 f0       	breq	.+6      	; 0x15bc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	31 c0       	rjmp	.+98     	; 0x161e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15bc:	19 82       	std	Y+1, r1	; 0x01
    15be:	2f c0       	rjmp	.+94     	; 0x161e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15c0:	e3 e3       	ldi	r30, 0x33	; 51
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_readPin+0xde>
    15d4:	55 95       	asr	r21
    15d6:	47 95       	ror	r20
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_readPin+0xda>
    15dc:	ca 01       	movw	r24, r20
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	90 70       	andi	r25, 0x00	; 0
    15e2:	88 23       	and	r24, r24
    15e4:	19 f0       	breq	.+6      	; 0x15ec <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	19 c0       	rjmp	.+50     	; 0x161e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15ec:	19 82       	std	Y+1, r1	; 0x01
    15ee:	17 c0       	rjmp	.+46     	; 0x161e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_readPin+0x10e>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_readPin+0x10a>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	90 70       	andi	r25, 0x00	; 0
    1612:	88 23       	and	r24, r24
    1614:	19 f0       	breq	.+6      	; 0x161c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	01 c0       	rjmp	.+2      	; 0x161e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    161c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    161e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <GPIO_setupPortDirection+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_setupPortDirection+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	90 f5       	brcc	.+100    	; 0x16aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3c 83       	std	Y+4, r19	; 0x04
    164e:	2b 83       	std	Y+3, r18	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	d1 f0       	breq	.+52     	; 0x168e <GPIO_setupPortDirection+0x5e>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	2c f4       	brge	.+10     	; 0x166e <GPIO_setupPortDirection+0x3e>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f0       	breq	.+24     	; 0x1684 <GPIO_setupPortDirection+0x54>
    166c:	1e c0       	rjmp	.+60     	; 0x16aa <GPIO_setupPortDirection+0x7a>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <GPIO_setupPortDirection+0x68>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	91 05       	cpc	r25, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <GPIO_setupPortDirection+0x72>
    1682:	13 c0       	rjmp	.+38     	; 0x16aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1684:	ea e3       	ldi	r30, 0x3A	; 58
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	0e c0       	rjmp	.+28     	; 0x16aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1698:	e4 e3       	ldi	r30, 0x34	; 52
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_writePort+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <GPIO_writePort+0x8>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	90 f5       	brcc	.+100    	; 0x1732 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3c 83       	std	Y+4, r19	; 0x04
    16d6:	2b 83       	std	Y+3, r18	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	d1 f0       	breq	.+52     	; 0x1716 <GPIO_writePort+0x5e>
    16e2:	2b 81       	ldd	r18, Y+3	; 0x03
    16e4:	3c 81       	ldd	r19, Y+4	; 0x04
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <GPIO_writePort+0x3e>
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	61 f0       	breq	.+24     	; 0x170c <GPIO_writePort+0x54>
    16f4:	1e c0       	rjmp	.+60     	; 0x1732 <GPIO_writePort+0x7a>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	81 f0       	breq	.+32     	; 0x1720 <GPIO_writePort+0x68>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <GPIO_writePort+0x72>
    170a:	13 c0       	rjmp	.+38     	; 0x1732 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    170c:	eb e3       	ldi	r30, 0x3B	; 59
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	80 83       	st	Z, r24
    1714:	0e c0       	rjmp	.+28     	; 0x1732 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 83       	st	Z, r24
    171e:	09 c0       	rjmp	.+18     	; 0x1732 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1720:	e5 e3       	ldi	r30, 0x35	; 53
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 83       	st	Z, r24
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	80 83       	st	Z, r24
			break;
		}
	}
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <GPIO_readPort+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <GPIO_readPort+0x8>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    174e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	90 f5       	brcc	.+100    	; 0x17ba <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3c 83       	std	Y+4, r19	; 0x04
    175e:	2b 83       	std	Y+3, r18	; 0x03
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	91 05       	cpc	r25, r1
    1768:	d1 f0       	breq	.+52     	; 0x179e <GPIO_readPort+0x5e>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	2c f4       	brge	.+10     	; 0x177e <GPIO_readPort+0x3e>
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	61 f0       	breq	.+24     	; 0x1794 <GPIO_readPort+0x54>
    177c:	1e c0       	rjmp	.+60     	; 0x17ba <GPIO_readPort+0x7a>
    177e:	2b 81       	ldd	r18, Y+3	; 0x03
    1780:	3c 81       	ldd	r19, Y+4	; 0x04
    1782:	22 30       	cpi	r18, 0x02	; 2
    1784:	31 05       	cpc	r19, r1
    1786:	81 f0       	breq	.+32     	; 0x17a8 <GPIO_readPort+0x68>
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	91 05       	cpc	r25, r1
    1790:	81 f0       	breq	.+32     	; 0x17b2 <GPIO_readPort+0x72>
    1792:	13 c0       	rjmp	.+38     	; 0x17ba <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1794:	e9 e3       	ldi	r30, 0x39	; 57
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    179e:	e6 e3       	ldi	r30, 0x36	; 54
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17a8:	e3 e3       	ldi	r30, 0x33	; 51
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17b2:	e0 e3       	ldi	r30, 0x30	; 48
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DcMotor_Init>:
 *					  the two motor pins through the GPIO driver.
 *					  2-Stop at the DC-Motor at the beginning through the GPIO driver.
 *		Args : none
 *		return type : void
 ***************************************************************************/
void DcMotor_Init(void){
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	/*Setting pins direction to be output pins */
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_FIRST_PIN,PIN_OUTPUT);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_SECOND_PIN,PIN_OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 a7 08 	call	0x114e	; 0x114e <GPIO_setupPinDirection>
	/*
	 * FIRST AND SECOND BIT NEEDS TO BE ZERO TO TURN OFF THE MOTOR
	 */
	GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <DcMotor_Rotate>:
 *					   stop the motor based on the state input state value..
 *		Args :
 *		In : DcMotor_State state
 *		return : void
 ***************************************************************************/
void DcMotor_Rotate(DcMotor_State state){
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	0f 92       	push	r0
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	89 83       	std	Y+1, r24	; 0x01
	if(state==CW){
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	59 f4       	brne	.+22     	; 0x1828 <DcMotor_Rotate+0x28>
		/*
		 * first pin = 0 , second pin = 1 , to make the motor rotate clockwise
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_HIGH);
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
    1826:	1b c0       	rjmp	.+54     	; 0x185e <DcMotor_Rotate+0x5e>
	}
	else if(state==A_CW){
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	82 30       	cpi	r24, 0x02	; 2
    182c:	59 f4       	brne	.+22     	; 0x1844 <DcMotor_Rotate+0x44>
		/*
		 * first pin = 1 , second pin = 0 , to make the motor rotate clockwise
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_HIGH);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
    1842:	0d c0       	rjmp	.+26     	; 0x185e <DcMotor_Rotate+0x5e>
	}
	else if(state==OFF){
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	88 23       	and	r24, r24
    1848:	51 f4       	brne	.+20     	; 0x185e <DcMotor_Rotate+0x5e>
		/*
		 * both pins 0 to stop the motor
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 92 09 	call	0x1324	; 0x1324 <GPIO_writePin>
	}
}
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <__vector_9>:
static uint8 g_initValue=0; 						/* to hold the value of the start value for the normal mode*/

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    1866:	1f 92       	push	r1
    1868:	0f 92       	push	r0
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	0f 92       	push	r0
    186e:	11 24       	eor	r1, r1
    1870:	2f 93       	push	r18
    1872:	3f 93       	push	r19
    1874:	4f 93       	push	r20
    1876:	5f 93       	push	r21
    1878:	6f 93       	push	r22
    187a:	7f 93       	push	r23
    187c:	8f 93       	push	r24
    187e:	9f 93       	push	r25
    1880:	af 93       	push	r26
    1882:	bf 93       	push	r27
    1884:	ef 93       	push	r30
    1886:	ff 93       	push	r31
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	OCR0 = g_initValue;
    1890:	ec e5       	ldi	r30, 0x5C	; 92
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 91 6e 00 	lds	r24, 0x006E
    1898:	80 83       	st	Z, r24
	if(g_callBackPtr != NULL_PTR)
    189a:	80 91 6c 00 	lds	r24, 0x006C
    189e:	90 91 6d 00 	lds	r25, 0x006D
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	29 f0       	breq	.+10     	; 0x18b0 <__vector_9+0x4a>
	{
		/* Call the Call Back function in the application after the timer overflowed */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18a6:	e0 91 6c 00 	lds	r30, 0x006C
    18aa:	f0 91 6d 00 	lds	r31, 0x006D
    18ae:	09 95       	icall
	}
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	bf 91       	pop	r27
    18ba:	af 91       	pop	r26
    18bc:	9f 91       	pop	r25
    18be:	8f 91       	pop	r24
    18c0:	7f 91       	pop	r23
    18c2:	6f 91       	pop	r22
    18c4:	5f 91       	pop	r21
    18c6:	4f 91       	pop	r20
    18c8:	3f 91       	pop	r19
    18ca:	2f 91       	pop	r18
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	0f 90       	pop	r0
    18d2:	1f 90       	pop	r1
    18d4:	18 95       	reti

000018d6 <__vector_19>:

ISR(TIMER0_COMP_vect){
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1900:	80 91 6c 00 	lds	r24, 0x006C
    1904:	90 91 6d 00 	lds	r25, 0x006D
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	29 f0       	breq	.+10     	; 0x1916 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the compare value is matched */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    190c:	e0 91 6c 00 	lds	r30, 0x006C
    1910:	f0 91 6d 00 	lds	r31, 0x006D
    1914:	09 95       	icall
	}
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <TIMER0_Init>:
 * Initialize the Timer:
 * 1. Setup the timer mode
 * 2. Setup the timer Pre-scaler
 * 3. Setup the start value of the normal mode or the compare value for the compare mode
 */
void TIMER0_Init (Timer_config *config) {
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <TIMER0_Init+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 = 1 for non pwm mode
	 * WGM00:01 to decide the mode of operation
	 * COM00:01 = 0 to control the OC0 usage
	 * CS02:00 to choose the used prescaler
	 ***********************************************************************/
	TCCR0 = (1<<FOC0);
    194a:	e3 e5       	ldi	r30, 0x53	; 83
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 e8       	ldi	r24, 0x80	; 128
    1950:	80 83       	st	Z, r24
	TCCR0 = (TCCR0&0xB7) | (((config->timerMode)&0x02)<<5) | (((config->timerMode)&0x01)<<3);
    1952:	a3 e5       	ldi	r26, 0x53	; 83
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e3 e5       	ldi	r30, 0x53	; 83
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	28 2f       	mov	r18, r24
    195e:	27 7b       	andi	r18, 0xB7	; 183
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	83 81       	ldd	r24, Z+3	; 0x03
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	82 70       	andi	r24, 0x02	; 2
    196c:	90 70       	andi	r25, 0x00	; 0
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	82 95       	swap	r24
    1974:	92 95       	swap	r25
    1976:	90 7f       	andi	r25, 0xF0	; 240
    1978:	98 27       	eor	r25, r24
    197a:	80 7f       	andi	r24, 0xF0	; 240
    197c:	98 27       	eor	r25, r24
    197e:	28 2b       	or	r18, r24
    1980:	e9 81       	ldd	r30, Y+1	; 0x01
    1982:	fa 81       	ldd	r31, Y+2	; 0x02
    1984:	83 81       	ldd	r24, Z+3	; 0x03
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	81 70       	andi	r24, 0x01	; 1
    198c:	90 70       	andi	r25, 0x00	; 0
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	82 2b       	or	r24, r18
    199c:	8c 93       	st	X, r24
	TCCR0 = (TCCR0&0xF8) | (config->prescalar);
    199e:	a3 e5       	ldi	r26, 0x53	; 83
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e3 e5       	ldi	r30, 0x53	; 83
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	98 2f       	mov	r25, r24
    19aa:	98 7f       	andi	r25, 0xF8	; 248
    19ac:	e9 81       	ldd	r30, Y+1	; 0x01
    19ae:	fa 81       	ldd	r31, Y+2	; 0x02
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	89 2b       	or	r24, r25
    19b4:	8c 93       	st	X, r24

	if(OV_MODE==config->timerMode){
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	83 81       	ldd	r24, Z+3	; 0x03
    19bc:	88 23       	and	r24, r24
    19be:	99 f4       	brne	.+38     	; 0x19e6 <TIMER0_Init+0xaa>
		TCNT0 = config->initValue;
    19c0:	a2 e5       	ldi	r26, 0x52	; 82
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e9 81       	ldd	r30, Y+1	; 0x01
    19c6:	fa 81       	ldd	r31, Y+2	; 0x02
    19c8:	80 81       	ld	r24, Z
    19ca:	8c 93       	st	X, r24
		g_initValue = config->initValue;
    19cc:	e9 81       	ldd	r30, Y+1	; 0x01
    19ce:	fa 81       	ldd	r31, Y+2	; 0x02
    19d0:	80 81       	ld	r24, Z
    19d2:	80 93 6e 00 	sts	0x006E, r24
		TIMSK |= (1<<TOIE0);
    19d6:	a9 e5       	ldi	r26, 0x59	; 89
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e9 e5       	ldi	r30, 0x59	; 89
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	81 60       	ori	r24, 0x01	; 1
    19e2:	8c 93       	st	X, r24
    19e4:	12 c0       	rjmp	.+36     	; 0x1a0a <TIMER0_Init+0xce>
	}
	else if (COMPARE_MODE == config->timerMode){
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	83 81       	ldd	r24, Z+3	; 0x03
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	69 f4       	brne	.+26     	; 0x1a0a <TIMER0_Init+0xce>
		OCR0 = config->compValue ;
    19f0:	ac e5       	ldi	r26, 0x5C	; 92
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e9 81       	ldd	r30, Y+1	; 0x01
    19f6:	fa 81       	ldd	r31, Y+2	; 0x02
    19f8:	81 81       	ldd	r24, Z+1	; 0x01
    19fa:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);
    19fc:	a9 e5       	ldi	r26, 0x59	; 89
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e9 e5       	ldi	r30, 0x59	; 89
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	82 60       	ori	r24, 0x02	; 2
    1a08:	8c 93       	st	X, r24
	}
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <TIMER0_SetCallback>:
/*
 * Description :
 * Sets the wanted call back function to call it in the ISR
 */
void TIMER0_SetCallback(void(*a_pointer)(void)){
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <TIMER0_SetCallback+0x6>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_pointer;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	90 93 6d 00 	sts	0x006D, r25
    1a2a:	80 93 6c 00 	sts	0x006C, r24
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <TIMER0_DeInit>:
/*
 * Description :
 * Turns off the timer and return all the registers to 0
 */
void TIMER0_DeInit(void){
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1a40:	e3 e5       	ldi	r30, 0x53	; 83
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	10 82       	st	Z, r1
	TIMSK &= 0xFC ;
    1a46:	a9 e5       	ldi	r26, 0x59	; 89
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e9 e5       	ldi	r30, 0x59	; 89
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8c 7f       	andi	r24, 0xFC	; 252
    1a52:	8c 93       	st	X, r24
	TCNT0 = 0;
    1a54:	e2 e5       	ldi	r30, 0x52	; 82
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	10 82       	st	Z, r1
	OCR0 = 0;
    1a5a:	ec e5       	ldi	r30, 0x5C	; 92
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	10 82       	st	Z, r1
}
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <TWI_init>:
#include <util/delay.h>
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWI_config * ptr_config)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <TWI_init+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <TWI_init+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
	switch (ptr_config->mode){
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	81 81       	ldd	r24, Z+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3c 83       	std	Y+4, r19	; 0x04
    1a82:	2b 83       	std	Y+3, r18	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <TWI_init+0x32>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	21 30       	cpi	r18, 0x01	; 1
    1a92:	31 05       	cpc	r19, r1
    1a94:	49 f0       	breq	.+18     	; 0x1aa8 <TWI_init+0x42>
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <TWI_init+0x50>
	case NORMAL_MODE:
		/* Bit rate: 100.000 kbps using zero pre-scaler TWPS=00 and F_CPU = 8Mhz*/
		TWBR = 0x20;
    1a98:	e0 e2       	ldi	r30, 0x20	; 32
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 e2       	ldi	r24, 0x20	; 32
    1a9e:	80 83       	st	Z, r24
		TWSR = 0x00;
    1aa0:	e1 e2       	ldi	r30, 0x21	; 33
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	10 82       	st	Z, r1
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <TWI_init+0x50>
		break;							/* used the break since there is no steps after it anyway */
	case FAST_MODE:
		/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
		TWBR = 0x02;
    1aa8:	e0 e2       	ldi	r30, 0x20	; 32
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	80 83       	st	Z, r24
		TWSR = 0x00;
    1ab0:	e1 e2       	ldi	r30, 0x21	; 33
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	10 82       	st	Z, r1

	}

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = ptr_config->address; /* my address = wanted address */
    1ab6:	a2 e2       	ldi	r26, 0x22	; 34
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	80 81       	ld	r24, Z
    1ac0:	8c 93       	st	X, r24

	TWCR = (1<<TWEN); /* enable TWI */
    1ac2:	e6 e5       	ldi	r30, 0x56	; 86
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	80 83       	st	Z, r24
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <TWI_start>:

void TWI_start(void)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ae0:	e6 e5       	ldi	r30, 0x56	; 86
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	84 ea       	ldi	r24, 0xA4	; 164
    1ae6:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1ae8:	e6 e5       	ldi	r30, 0x56	; 86
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	dc f7       	brge	.-10     	; 0x1ae8 <TWI_start+0x10>
}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <TWI_stop>:

void TWI_stop(void)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1b00:	e6 e5       	ldi	r30, 0x56	; 86
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	84 e9       	ldi	r24, 0x94	; 148
    1b06:	80 83       	st	Z, r24
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	0f 92       	push	r0
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1b1a:	e3 e2       	ldi	r30, 0x23	; 35
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b22:	e6 e5       	ldi	r30, 0x56	; 86
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	84 e8       	ldi	r24, 0x84	; 132
    1b28:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b2a:	e6 e5       	ldi	r30, 0x56	; 86
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 23       	and	r24, r24
    1b32:	dc f7       	brge	.-10     	; 0x1b2a <TWI_writeByte+0x1c>
}
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b44:	e6 e5       	ldi	r30, 0x56	; 86
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	84 ec       	ldi	r24, 0xC4	; 196
    1b4a:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b4c:	e6 e5       	ldi	r30, 0x56	; 86
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	88 23       	and	r24, r24
    1b54:	dc f7       	brge	.-10     	; 0x1b4c <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1b56:	e3 e2       	ldi	r30, 0x23	; 35
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b6a:	e6 e5       	ldi	r30, 0x56	; 86
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	84 e8       	ldi	r24, 0x84	; 132
    1b70:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b72:	e6 e5       	ldi	r30, 0x56	; 86
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	88 23       	and	r24, r24
    1b7a:	dc f7       	brge	.-10     	; 0x1b72 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    1b7c:	e3 e2       	ldi	r30, 0x23	; 35
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	0f 92       	push	r0
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1b92:	e1 e2       	ldi	r30, 0x21	; 33
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	88 7f       	andi	r24, 0xF8	; 248
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config *ptr_config)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <UART_init+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <UART_init+0x8>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1bb6:	1a 82       	std	Y+2, r1	; 0x02
    1bb8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1bba:	eb e2       	ldi	r30, 0x2B	; 43
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  to control the character size
	 * RXB8 & TXB8 used only for 9-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1bc2:	ea e2       	ldi	r30, 0x2A	; 42
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	88 e1       	ldi	r24, 0x18	; 24
    1bc8:	80 83       	st	Z, r24
	
	/* Inserting bit 2 of the character size in UCSZ2 */
	UCSRB = (UCSRB&0xFB) | ((ptr_config->dataSize)&(0x04));
    1bca:	aa e2       	ldi	r26, 0x2A	; 42
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ea e2       	ldi	r30, 0x2A	; 42
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	9b 7f       	andi	r25, 0xFB	; 251
    1bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bda:	fc 81       	ldd	r31, Y+4	; 0x04
    1bdc:	86 81       	ldd	r24, Z+6	; 0x06
    1bde:	84 70       	andi	r24, 0x04	; 4
    1be0:	89 2b       	or	r24, r25
    1be2:	8c 93       	st	X, r24
	 * UPM1:0   control parity bit
	 * USBS     number of stop bit
	 * UCSZ1:0  bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) ;
    1be4:	e0 e4       	ldi	r30, 0x40	; 64
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 e8       	ldi	r24, 0x80	; 128
    1bea:	80 83       	st	Z, r24

	/* Inserting the bits 1:0 of the character size in UCSZ1:0*/
	UCSRC = (UCSRC&0xF9) | (((ptr_config->dataSize)&0x03)<<1);
    1bec:	a0 e4       	ldi	r26, 0x40	; 64
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e0 e4       	ldi	r30, 0x40	; 64
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	29 7f       	andi	r18, 0xF9	; 249
    1bfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfe:	86 81       	ldd	r24, Z+6	; 0x06
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	83 70       	andi	r24, 0x03	; 3
    1c06:	90 70       	andi	r25, 0x00	; 0
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	82 2b       	or	r24, r18
    1c0e:	8c 93       	st	X, r24

	/* controlling the parity */
	UCSRC = (UCSRC&0xCF) | ((ptr_config->parityType)<<4); /* Assigning value to UMP 1:0 */
    1c10:	a0 e4       	ldi	r26, 0x40	; 64
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e0 e4       	ldi	r30, 0x40	; 64
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	2f 7c       	andi	r18, 0xCF	; 207
    1c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c20:	fc 81       	ldd	r31, Y+4	; 0x04
    1c22:	84 81       	ldd	r24, Z+4	; 0x04
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	82 95       	swap	r24
    1c2a:	92 95       	swap	r25
    1c2c:	90 7f       	andi	r25, 0xF0	; 240
    1c2e:	98 27       	eor	r25, r24
    1c30:	80 7f       	andi	r24, 0xF0	; 240
    1c32:	98 27       	eor	r25, r24
    1c34:	82 2b       	or	r24, r18
    1c36:	8c 93       	st	X, r24
	
	/* controlling the number of stop bits */
	UCSRC = (UCSRC&0xF7) | ((ptr_config->stopBits)<<3); /* Assigning value to USBS*/
    1c38:	a0 e4       	ldi	r26, 0x40	; 64
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e0 e4       	ldi	r30, 0x40	; 64
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	27 7f       	andi	r18, 0xF7	; 247
    1c46:	eb 81       	ldd	r30, Y+3	; 0x03
    1c48:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4a:	85 81       	ldd	r24, Z+5	; 0x05
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	82 2b       	or	r24, r18
    1c5e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ptr_config->baudRate * 8UL))) - 1);
    1c60:	eb 81       	ldd	r30, Y+3	; 0x03
    1c62:	fc 81       	ldd	r31, Y+4	; 0x04
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	a2 81       	ldd	r26, Z+2	; 0x02
    1c6a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	aa 1f       	adc	r26, r26
    1c72:	bb 1f       	adc	r27, r27
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	aa 1f       	adc	r26, r26
    1c7a:	bb 1f       	adc	r27, r27
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	aa 1f       	adc	r26, r26
    1c82:	bb 1f       	adc	r27, r27
    1c84:	9c 01       	movw	r18, r24
    1c86:	ad 01       	movw	r20, r26
    1c88:	80 e4       	ldi	r24, 0x40	; 64
    1c8a:	92 e4       	ldi	r25, 0x42	; 66
    1c8c:	af e0       	ldi	r26, 0x0F	; 15
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__udivmodsi4>
    1c98:	da 01       	movw	r26, r20
    1c9a:	c9 01       	movw	r24, r18
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1ca2:	e0 e4       	ldi	r30, 0x40	; 64
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	89 2f       	mov	r24, r25
    1cac:	99 27       	eor	r25, r25
    1cae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1cb0:	e9 e2       	ldi	r30, 0x29	; 41
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	80 83       	st	Z, r24
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1cd2:	eb e2       	ldi	r30, 0x2B	; 43
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	80 72       	andi	r24, 0x20	; 32
    1cde:	90 70       	andi	r25, 0x00	; 0
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	b9 f3       	breq	.-18     	; 0x1cd2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ce4:	ec e2       	ldi	r30, 0x2C	; 44
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1cfc:	eb e2       	ldi	r30, 0x2B	; 43
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	88 23       	and	r24, r24
    1d04:	dc f7       	brge	.-10     	; 0x1cfc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1d06:	ec e2       	ldi	r30, 0x2C	; 44
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <UART_sendString+0x6>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d22:	19 82       	std	Y+1, r1	; 0x01
    1d24:	0e c0       	rjmp	.+28     	; 0x1d42 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d30:	fc 01       	movw	r30, r24
    1d32:	e2 0f       	add	r30, r18
    1d34:	f3 1f       	adc	r31, r19
    1d36:	80 81       	ld	r24, Z
    1d38:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <UART_sendByte>
		i++;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	8f 5f       	subi	r24, 0xFF	; 255
    1d40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	80 81       	ld	r24, Z
    1d54:	88 23       	and	r24, r24
    1d56:	39 f7       	brne	.-50     	; 0x1d26 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <UART_receiveString+0xa>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	8c 01       	movw	r16, r24
    1d86:	02 0f       	add	r16, r18
    1d88:	13 1f       	adc	r17, r19
    1d8a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
    1d8e:	f8 01       	movw	r30, r16
    1d90:	80 83       	st	Z, r24
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	8c 01       	movw	r16, r24
    1da6:	02 0f       	add	r16, r18
    1da8:	13 1f       	adc	r17, r19
    1daa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
    1dae:	f8 01       	movw	r30, r16
    1db0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e2 0f       	add	r30, r18
    1dc0:	f3 1f       	adc	r31, r19
    1dc2:	80 81       	ld	r24, Z
    1dc4:	83 32       	cpi	r24, 0x23	; 35
    1dc6:	31 f7       	brne	.-52     	; 0x1d94 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e2 0f       	add	r30, r18
    1dd6:	f3 1f       	adc	r31, r19
    1dd8:	10 82       	st	Z, r1
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <__udivmodsi4>:
    1dea:	a1 e2       	ldi	r26, 0x21	; 33
    1dec:	1a 2e       	mov	r1, r26
    1dee:	aa 1b       	sub	r26, r26
    1df0:	bb 1b       	sub	r27, r27
    1df2:	fd 01       	movw	r30, r26
    1df4:	0d c0       	rjmp	.+26     	; 0x1e10 <__udivmodsi4_ep>

00001df6 <__udivmodsi4_loop>:
    1df6:	aa 1f       	adc	r26, r26
    1df8:	bb 1f       	adc	r27, r27
    1dfa:	ee 1f       	adc	r30, r30
    1dfc:	ff 1f       	adc	r31, r31
    1dfe:	a2 17       	cp	r26, r18
    1e00:	b3 07       	cpc	r27, r19
    1e02:	e4 07       	cpc	r30, r20
    1e04:	f5 07       	cpc	r31, r21
    1e06:	20 f0       	brcs	.+8      	; 0x1e10 <__udivmodsi4_ep>
    1e08:	a2 1b       	sub	r26, r18
    1e0a:	b3 0b       	sbc	r27, r19
    1e0c:	e4 0b       	sbc	r30, r20
    1e0e:	f5 0b       	sbc	r31, r21

00001e10 <__udivmodsi4_ep>:
    1e10:	66 1f       	adc	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	1a 94       	dec	r1
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <__udivmodsi4_loop>
    1e1c:	60 95       	com	r22
    1e1e:	70 95       	com	r23
    1e20:	80 95       	com	r24
    1e22:	90 95       	com	r25
    1e24:	9b 01       	movw	r18, r22
    1e26:	ac 01       	movw	r20, r24
    1e28:	bd 01       	movw	r22, r26
    1e2a:	cf 01       	movw	r24, r30
    1e2c:	08 95       	ret

00001e2e <__prologue_saves__>:
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	ca 1b       	sub	r28, r26
    1e58:	db 0b       	sbc	r29, r27
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	09 94       	ijmp

00001e66 <__epilogue_restores__>:
    1e66:	2a 88       	ldd	r2, Y+18	; 0x12
    1e68:	39 88       	ldd	r3, Y+17	; 0x11
    1e6a:	48 88       	ldd	r4, Y+16	; 0x10
    1e6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e70:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e72:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e74:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e76:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e78:	b9 84       	ldd	r11, Y+9	; 0x09
    1e7a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e7c:	df 80       	ldd	r13, Y+7	; 0x07
    1e7e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e80:	fd 80       	ldd	r15, Y+5	; 0x05
    1e82:	0c 81       	ldd	r16, Y+4	; 0x04
    1e84:	1b 81       	ldd	r17, Y+3	; 0x03
    1e86:	aa 81       	ldd	r26, Y+2	; 0x02
    1e88:	b9 81       	ldd	r27, Y+1	; 0x01
    1e8a:	ce 0f       	add	r28, r30
    1e8c:	d1 1d       	adc	r29, r1
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	ed 01       	movw	r28, r26
    1e9a:	08 95       	ret

00001e9c <_exit>:
    1e9c:	f8 94       	cli

00001e9e <__stop_program>:
    1e9e:	ff cf       	rjmp	.-2      	; 0x1e9e <__stop_program>
