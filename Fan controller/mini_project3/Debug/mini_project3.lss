
mini_project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000234e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  0000234e  000023c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001db8  00000000  00000000  000024f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e5a  00000000  00000000  000042b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000510a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000052aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00008c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00009fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7e 07 	call	0xefc	; 0xefc <main>
      7a:	0c 94 a5 11 	jmp	0x234a	; 0x234a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e7       	ldi	r26, 0x7D	; 125
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8d e7       	ldi	r24, 0x7D	; 125
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e7       	ldi	r22, 0x7D	; 125
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 57       	subi	r30, 0x7B	; 123
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:
#include <avr/io.h> /* to use avr registers*/

/*----------------------------Function definition--------------------------*/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=0;
     e2c:	e7 e2       	ldi	r30, 0x27	; 39
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	10 82       	st	Z, r1
	ADMUX=((ADMUX&0X3F)|((Config_Ptr->ref_volt)<<6)); /* To insert the used voltage reference level */
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	28 2f       	mov	r18, r24
     e3e:	2f 73       	andi	r18, 0x3F	; 63
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	00 24       	eor	r0, r0
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	07 94       	ror	r0
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	07 94       	ror	r0
     e58:	98 2f       	mov	r25, r24
     e5a:	80 2d       	mov	r24, r0
     e5c:	82 2b       	or	r24, r18
     e5e:	8c 93       	st	X, r24
	ADCSRA=((ADCSRA&0XF8)|(Config_Ptr->prescaler));   /* To insert the used prescaler */
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	98 2f       	mov	r25, r24
     e6c:	98 7f       	andi	r25, 0xF8	; 248
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	89 2b       	or	r24, r25
     e76:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); 							  /* To enable the ADC */
     e78:	a6 e2       	ldi	r26, 0x26	; 38
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e2       	ldi	r30, 0x26	; 38
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);							  /* To disable interrupt */
     e86:	a6 e2       	ldi	r26, 0x26	; 38
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e6 e2       	ldi	r30, 0x26	; 38
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	87 7f       	andi	r24, 0xF7	; 247
     e92:	8c 93       	st	X, r24
}
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=((ADMUX&0XE0)|channel_num);  /* to decide which channel is used*/
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	98 2f       	mov	r25, r24
     eb6:	90 7e       	andi	r25, 0xE0	; 224
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	89 2b       	or	r24, r25
     ebc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);			   /* to start the conversion */
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){} /* wait until conversion is done */
     ecc:	e6 e2       	ldi	r30, 0x26	; 38
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	80 71       	andi	r24, 0x10	; 16
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	b9 f3       	breq	.-18     	; 0xecc <ADC_readChannel+0x2e>
	SET_BIT(ADCSRA,ADIF);			   /* reset the flag back to zero */
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	return ADC;						   /* return the digital value */
     eec:	e4 e2       	ldi	r30, 0x24	; 36
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <main>:
#include "lcd.h"          								/* to display on the lcd */
#include "motor.h"		  								/* to control the motor */
#include "adc.h"		  								/* to initialize the ADC module */
#include "lm35_sensor.h"  								/* to get the temperature */

void main(void){
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <main+0x6>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	uint8 temp;											/* to hold the temperature value */

	ADC_ConfigType s_configType;						/* to hold the configurations of the adc */
	s_configType.prescaler=F_cpu_8;						/* setting the prescaler of the adc to Fcpu/8 */
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	8b 83       	std	Y+3, r24	; 0x03
	s_configType.ref_volt=Vref_internal;				/* setting the vref of the adc to the internal 2.56 v vref */
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	8a 83       	std	Y+2, r24	; 0x02
	ADC_init(&s_configType);							/* to initialize the ADC*/
     f10:	ce 01       	movw	r24, r28
     f12:	02 96       	adiw	r24, 0x02	; 2
     f14:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>

	LCD_init();											/* to initialize the LCD */
     f18:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_init>
	LCD_displayStringRowColumn(0,3,"Fan is ");			/* Display this string "Fan is " only once on LCD at the first row */
     f1c:	20 e6       	ldi	r18, 0x60	; 96
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	a9 01       	movw	r20, r18
     f26:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"Temp =     C");		/* Display this string "Temp =     C" only once on LCD at the second row */
     f2a:	28 e6       	ldi	r18, 0x68	; 104
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	63 e0       	ldi	r22, 0x03	; 3
     f32:	a9 01       	movw	r20, r18
     f34:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
	DcMotor_Init();
     f38:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <DcMotor_Init>

	while(1)
	{
		temp=LM35_getTemperature(&s_configType);		/* getting the temperature value from the lm35 sensor */
     f3c:	ce 01       	movw	r24, r28
     f3e:	02 96       	adiw	r24, 0x02	; 2
     f40:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LM35_getTemperature>
     f44:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(1,10);							/* moving the cursor to display the temperature */
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	6a e0       	ldi	r22, 0x0A	; 10
     f4a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_moveCursor>
		/* Displaying the temperature on the LCD */
		if(temp>=100){
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	84 36       	cpi	r24, 0x64	; 100
     f52:	30 f0       	brcs	.+12     	; 0xf60 <main+0x64>
			LCD_intgerToString(temp);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_intgerToString>
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <main+0x74>
		}
		else{
			LCD_intgerToString(temp);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <LCD_intgerToString>
			LCD_displayCharacter(' ');
     f6a:	80 e2       	ldi	r24, 0x20	; 32
     f6c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_displayCharacter>
		}
		if(temp>=120)
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	88 37       	cpi	r24, 0x78	; 120
     f74:	60 f0       	brcs	.+24     	; 0xf8e <main+0x92>
		{
			DcMotor_Rotate(CW,100);						/* Rotating the motor with the required speed */
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	64 e6       	ldi	r22, 0x64	; 100
     f7a:	0e 94 75 10 	call	0x20ea	; 0x20ea <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON ");		/* Displaying the state of the fan */
     f7e:	25 e7       	ldi	r18, 0x75	; 117
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	6b e0       	ldi	r22, 0x0B	; 11
     f86:	a9 01       	movw	r20, r18
     f88:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
     f8c:	d7 cf       	rjmp	.-82     	; 0xf3c <main+0x40>
		}
		else if(temp>=90)
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	8a 35       	cpi	r24, 0x5A	; 90
     f92:	60 f0       	brcs	.+24     	; 0xfac <main+0xb0>
		{
			DcMotor_Rotate(CW,75);						/* Rotating the motor with the required speed */
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	6b e4       	ldi	r22, 0x4B	; 75
     f98:	0e 94 75 10 	call	0x20ea	; 0x20ea <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON ");		/* Displaying the state of the fan */
     f9c:	25 e7       	ldi	r18, 0x75	; 117
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	6b e0       	ldi	r22, 0x0B	; 11
     fa4:	a9 01       	movw	r20, r18
     fa6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
     faa:	c8 cf       	rjmp	.-112    	; 0xf3c <main+0x40>
		}
		else if(temp>=60)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8c 33       	cpi	r24, 0x3C	; 60
     fb0:	60 f0       	brcs	.+24     	; 0xfca <main+0xce>
		{
			DcMotor_Rotate(CW,50);						/* Rotating the motor with the required speed */
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	62 e3       	ldi	r22, 0x32	; 50
     fb6:	0e 94 75 10 	call	0x20ea	; 0x20ea <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON ");		/* Displaying the state of the fan */
     fba:	25 e7       	ldi	r18, 0x75	; 117
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	6b e0       	ldi	r22, 0x0B	; 11
     fc2:	a9 01       	movw	r20, r18
     fc4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
     fc8:	b9 cf       	rjmp	.-142    	; 0xf3c <main+0x40>
		}
		else if(temp>=30)
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8e 31       	cpi	r24, 0x1E	; 30
     fce:	60 f0       	brcs	.+24     	; 0xfe8 <main+0xec>
		{
			DcMotor_Rotate(CW,25);						/* Rotating the motor with the required speed */
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	69 e1       	ldi	r22, 0x19	; 25
     fd4:	0e 94 75 10 	call	0x20ea	; 0x20ea <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"ON ");		/* Displaying the state of the fan */
     fd8:	25 e7       	ldi	r18, 0x75	; 117
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	6b e0       	ldi	r22, 0x0B	; 11
     fe0:	a9 01       	movw	r20, r18
     fe2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
     fe6:	aa cf       	rjmp	.-172    	; 0xf3c <main+0x40>
		}
		else
		{
			DcMotor_Rotate(OFF,0);						/* Turning off the motor */
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	0e 94 75 10 	call	0x20ea	; 0x20ea <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,11,"OFF");		/* Displaying the state of the fan */
     ff0:	29 e7       	ldi	r18, 0x79	; 121
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	6b e0       	ldi	r22, 0x0B	; 11
     ff8:	a9 01       	movw	r20, r18
     ffa:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_displayStringRowColumn>
     ffe:	9e cf       	rjmp	.-196    	; 0xf3c <main+0x40>

00001000 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_setupPinDirection+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x8>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	6a 83       	std	Y+2, r22	; 0x02
    1012:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	08 f0       	brcs	.+2      	; 0x101c <GPIO_setupPinDirection+0x1c>
    101a:	d5 c0       	rjmp	.+426    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_setupPinDirection+0x24>
    1022:	d1 c0       	rjmp	.+418    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <GPIO_setupPinDirection+0x3a>
    1038:	43 c0       	rjmp	.+134    	; 0x10c0 <GPIO_setupPinDirection+0xc0>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <GPIO_setupPinDirection+0x4e>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	71 f0       	breq	.+28     	; 0x1068 <GPIO_setupPinDirection+0x68>
    104c:	bc c0       	rjmp	.+376    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x5a>
    1058:	5f c0       	rjmp	.+190    	; 0x1118 <GPIO_setupPinDirection+0x118>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <GPIO_setupPinDirection+0x66>
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <GPIO_setupPinDirection+0x170>
    1066:	af c0       	rjmp	.+350    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    106e:	aa e3       	ldi	r26, 0x3A	; 58
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_setupPinDirection+0x8c>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_setupPinDirection+0x88>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	98 c0       	rjmp	.+304    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1096:	aa e3       	ldi	r26, 0x3A	; 58
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e3       	ldi	r30, 0x3A	; 58
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0xb0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	83 c0       	rjmp	.+262    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_setupPinDirection+0xe4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_setupPinDirection+0xe0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	6c c0       	rjmp	.+216    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x10c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x108>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	57 c0       	rjmp	.+174    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    111e:	a4 e3       	ldi	r26, 0x34	; 52
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e3       	ldi	r30, 0x34	; 52
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0x13c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0x138>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1146:	a4 e3       	ldi	r26, 0x34	; 52
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_setupPinDirection+0x164>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_setupPinDirection+0x160>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	2b c0       	rjmp	.+86     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a1 f4       	brne	.+40     	; 0x119e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_setupPinDirection+0x194>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_setupPinDirection+0x190>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    119e:	a1 e3       	ldi	r26, 0x31	; 49
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_setupPinDirection+0x1bc>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_setupPinDirection+0x1b8>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_writePin+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <GPIO_writePin+0x1c>
    11f0:	d5 c0       	rjmp	.+426    	; 0x139c <GPIO_writePin+0x1c6>
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_writePin+0x24>
    11f8:	d1 c0       	rjmp	.+418    	; 0x139c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_writePin+0x3a>
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <GPIO_writePin+0xc0>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_writePin+0x4e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <GPIO_writePin+0x68>
    1222:	bc c0       	rjmp	.+376    	; 0x139c <GPIO_writePin+0x1c6>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x5a>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_writePin+0x118>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x66>
    123a:	85 c0       	rjmp	.+266    	; 0x1346 <GPIO_writePin+0x170>
    123c:	af c0       	rjmp	.+350    	; 0x139c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x8c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x88>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	98 c0       	rjmp	.+304    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0xb4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0xb0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	83 c0       	rjmp	.+262    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_writePin+0xe4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_writePin+0xe0>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	6c c0       	rjmp	.+216    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	57 c0       	rjmp	.+174    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_writePin+0x164>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_writePin+0x160>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2b c0       	rjmp	.+86     	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_writePin+0x194>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_writePin+0x190>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	14 c0       	rjmp	.+40     	; 0x139c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1374:	a2 e3       	ldi	r26, 0x32	; 50
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_writePin+0x1bc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_writePin+0x1b8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_readPin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_readPin+0x1c>
    13c6:	84 c0       	rjmp	.+264    	; 0x14d0 <GPIO_readPin+0x124>
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_readPin+0x24>
    13ce:	80 c0       	rjmp	.+256    	; 0x14d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	4c 81       	ldd	r20, Y+4	; 0x04
    13dc:	5d 81       	ldd	r21, Y+5	; 0x05
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	51 05       	cpc	r21, r1
    13e2:	79 f1       	breq	.+94     	; 0x1442 <GPIO_readPin+0x96>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	34 f4       	brge	.+12     	; 0x13fa <GPIO_readPin+0x4e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	69 f0       	breq	.+26     	; 0x1412 <GPIO_readPin+0x66>
    13f8:	6b c0       	rjmp	.+214    	; 0x14d0 <GPIO_readPin+0x124>
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <GPIO_readPin+0xc6>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <GPIO_readPin+0x64>
    140e:	49 c0       	rjmp	.+146    	; 0x14a2 <GPIO_readPin+0xf6>
    1410:	5f c0       	rjmp	.+190    	; 0x14d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1412:	e9 e3       	ldi	r30, 0x39	; 57
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a9 01       	movw	r20, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_readPin+0x7e>
    1426:	55 95       	asr	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_readPin+0x7a>
    142e:	ca 01       	movw	r24, r20
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	88 23       	and	r24, r24
    1436:	19 f0       	breq	.+6      	; 0x143e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	47 c0       	rjmp	.+142    	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1442:	e6 e3       	ldi	r30, 0x36	; 54
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_readPin+0xae>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_readPin+0xaa>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	31 c0       	rjmp	.+98     	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	2f c0       	rjmp	.+94     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1472:	e3 e3       	ldi	r30, 0x33	; 51
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_readPin+0xde>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_readPin+0xda>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	88 23       	and	r24, r24
    1496:	19 f0       	breq	.+6      	; 0x149e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	19 c0       	rjmp	.+50     	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	17 c0       	rjmp	.+46     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14a2:	e0 e3       	ldi	r30, 0x30	; 48
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_readPin+0x10e>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_readPin+0x10a>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	88 23       	and	r24, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_setupPortDirection+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_setupPortDirection+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	90 f5       	brcc	.+100    	; 0x155c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3c 83       	std	Y+4, r19	; 0x04
    1500:	2b 83       	std	Y+3, r18	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	d1 f0       	breq	.+52     	; 0x1540 <GPIO_setupPortDirection+0x5e>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <GPIO_setupPortDirection+0x3e>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 f0       	breq	.+24     	; 0x1536 <GPIO_setupPortDirection+0x54>
    151e:	1e c0       	rjmp	.+60     	; 0x155c <GPIO_setupPortDirection+0x7a>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <GPIO_setupPortDirection+0x68>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <GPIO_setupPortDirection+0x72>
    1534:	13 c0       	rjmp	.+38     	; 0x155c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	0e c0       	rjmp	.+28     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	09 c0       	rjmp	.+18     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154a:	e4 e3       	ldi	r30, 0x34	; 52
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
    1552:	04 c0       	rjmp	.+8      	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
			break;
		}
	}
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <GPIO_writePort+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_writePort+0x8>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	90 f5       	brcc	.+100    	; 0x15e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <GPIO_writePort+0x5e>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	2c f4       	brge	.+10     	; 0x15a8 <GPIO_writePort+0x3e>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f0       	breq	.+24     	; 0x15be <GPIO_writePort+0x54>
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <GPIO_writePort+0x7a>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <GPIO_writePort+0x68>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <GPIO_writePort+0x72>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_readPort+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_readPort+0x8>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1600:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	90 f5       	brcc	.+100    	; 0x166c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3c 83       	std	Y+4, r19	; 0x04
    1610:	2b 83       	std	Y+3, r18	; 0x03
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	d1 f0       	breq	.+52     	; 0x1650 <GPIO_readPort+0x5e>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <GPIO_readPort+0x3e>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <GPIO_readPort+0x54>
    162e:	1e c0       	rjmp	.+60     	; 0x166c <GPIO_readPort+0x7a>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <GPIO_readPort+0x68>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <GPIO_readPort+0x72>
    1644:	13 c0       	rjmp	.+38     	; 0x166c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1646:	e9 e3       	ldi	r30, 0x39	; 57
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	0e c0       	rjmp	.+28     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1650:	e6 e3       	ldi	r30, 0x36	; 54
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	09 c0       	rjmp	.+18     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    165a:	e3 e3       	ldi	r30, 0x33	; 51
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	04 c0       	rjmp	.+8      	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1664:	e0 e3       	ldi	r30, 0x30	; 48
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    16aa:	88 e3       	ldi	r24, 0x38	; 56
    16ac:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16b0:	8c e0       	ldi	r24, 0x0C	; 12
    16b2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_sendCommand>
}
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	ea 97       	sbiw	r28, 0x3a	; 58
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    16d8:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e8       	ldi	r26, 0x80	; 128
    16f4:	bf e3       	ldi	r27, 0x3F	; 63
    16f6:	8d ab       	std	Y+53, r24	; 0x35
    16f8:	9e ab       	std	Y+54, r25	; 0x36
    16fa:	af ab       	std	Y+55, r26	; 0x37
    16fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1700:	7e a9       	ldd	r23, Y+54	; 0x36
    1702:	8f a9       	ldd	r24, Y+55	; 0x37
    1704:	98 ad       	ldd	r25, Y+56	; 0x38
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a e7       	ldi	r20, 0x7A	; 122
    170c:	53 e4       	ldi	r21, 0x43	; 67
    170e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	89 ab       	std	Y+49, r24	; 0x31
    1718:	9a ab       	std	Y+50, r25	; 0x32
    171a:	ab ab       	std	Y+51, r26	; 0x33
    171c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    171e:	69 a9       	ldd	r22, Y+49	; 0x31
    1720:	7a a9       	ldd	r23, Y+50	; 0x32
    1722:	8b a9       	ldd	r24, Y+51	; 0x33
    1724:	9c a9       	ldd	r25, Y+52	; 0x34
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	98 ab       	std	Y+48, r25	; 0x30
    173c:	8f a7       	std	Y+47, r24	; 0x2f
    173e:	3f c0       	rjmp	.+126    	; 0x17be <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1740:	69 a9       	ldd	r22, Y+49	; 0x31
    1742:	7a a9       	ldd	r23, Y+50	; 0x32
    1744:	8b a9       	ldd	r24, Y+51	; 0x33
    1746:	9c a9       	ldd	r25, Y+52	; 0x34
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	6d a9       	ldd	r22, Y+53	; 0x35
    175a:	7e a9       	ldd	r23, Y+54	; 0x36
    175c:	8f a9       	ldd	r24, Y+55	; 0x37
    175e:	98 ad       	ldd	r25, Y+56	; 0x38
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	98 ab       	std	Y+48, r25	; 0x30
    177e:	8f a7       	std	Y+47, r24	; 0x2f
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_sendCommand+0xde>
    1782:	89 e1       	ldi	r24, 0x19	; 25
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e a7       	std	Y+46, r25	; 0x2e
    1788:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178a:	8d a5       	ldd	r24, Y+45	; 0x2d
    178c:	9e a5       	ldd	r25, Y+46	; 0x2e
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_sendCommand+0xcc>
    1792:	9e a7       	std	Y+46, r25	; 0x2e
    1794:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	8f a5       	ldd	r24, Y+47	; 0x2f
    1798:	98 a9       	ldd	r25, Y+48	; 0x30
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	98 ab       	std	Y+48, r25	; 0x30
    179e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a2:	98 a9       	ldd	r25, Y+48	; 0x30
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <LCD_sendCommand+0xc0>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	69 a9       	ldd	r22, Y+49	; 0x31
    17ac:	7a a9       	ldd	r23, Y+50	; 0x32
    17ae:	8b a9       	ldd	r24, Y+51	; 0x33
    17b0:	9c a9       	ldd	r25, Y+52	; 0x34
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	98 ab       	std	Y+48, r25	; 0x30
    17bc:	8f a7       	std	Y+47, r24	; 0x2f
    17be:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c0:	98 a9       	ldd	r25, Y+48	; 0x30
    17c2:	9c a7       	std	Y+44, r25	; 0x2c
    17c4:	8b a7       	std	Y+43, r24	; 0x2b
    17c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_sendCommand+0x108>
    17ce:	9c a7       	std	Y+44, r25	; 0x2c
    17d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	62 e0       	ldi	r22, 0x02	; 2
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e8       	ldi	r26, 0x80	; 128
    17e2:	bf e3       	ldi	r27, 0x3F	; 63
    17e4:	8f a3       	std	Y+39, r24	; 0x27
    17e6:	98 a7       	std	Y+40, r25	; 0x28
    17e8:	a9 a7       	std	Y+41, r26	; 0x29
    17ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6f a1       	ldd	r22, Y+39	; 0x27
    17ee:	78 a5       	ldd	r23, Y+40	; 0x28
    17f0:	89 a5       	ldd	r24, Y+41	; 0x29
    17f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a e7       	ldi	r20, 0x7A	; 122
    17fa:	53 e4       	ldi	r21, 0x43	; 67
    17fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8b a3       	std	Y+35, r24	; 0x23
    1806:	9c a3       	std	Y+36, r25	; 0x24
    1808:	ad a3       	std	Y+37, r26	; 0x25
    180a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    180c:	6b a1       	ldd	r22, Y+35	; 0x23
    180e:	7c a1       	ldd	r23, Y+36	; 0x24
    1810:	8d a1       	ldd	r24, Y+37	; 0x25
    1812:	9e a1       	ldd	r25, Y+38	; 0x26
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_sendCommand+0x16c>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9a a3       	std	Y+34, r25	; 0x22
    182a:	89 a3       	std	Y+33, r24	; 0x21
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    182e:	6b a1       	ldd	r22, Y+35	; 0x23
    1830:	7c a1       	ldd	r23, Y+36	; 0x24
    1832:	8d a1       	ldd	r24, Y+37	; 0x25
    1834:	9e a1       	ldd	r25, Y+38	; 0x26
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6f a1       	ldd	r22, Y+39	; 0x27
    1848:	78 a5       	ldd	r23, Y+40	; 0x28
    184a:	89 a5       	ldd	r24, Y+41	; 0x29
    184c:	9a a5       	ldd	r25, Y+42	; 0x2a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9a a3       	std	Y+34, r25	; 0x22
    186c:	89 a3       	std	Y+33, r24	; 0x21
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_sendCommand+0x1cc>
    1870:	89 e1       	ldi	r24, 0x19	; 25
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	98 a3       	std	Y+32, r25	; 0x20
    1876:	8f 8f       	std	Y+31, r24	; 0x1f
    1878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187a:	98 a1       	ldd	r25, Y+32	; 0x20
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_sendCommand+0x1ba>
    1880:	98 a3       	std	Y+32, r25	; 0x20
    1882:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	89 a1       	ldd	r24, Y+33	; 0x21
    1886:	9a a1       	ldd	r25, Y+34	; 0x22
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9a a3       	std	Y+34, r25	; 0x22
    188c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	89 a1       	ldd	r24, Y+33	; 0x21
    1890:	9a a1       	ldd	r25, Y+34	; 0x22
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_sendCommand+0x1ae>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6b a1       	ldd	r22, Y+35	; 0x23
    189a:	7c a1       	ldd	r23, Y+36	; 0x24
    189c:	8d a1       	ldd	r24, Y+37	; 0x25
    189e:	9e a1       	ldd	r25, Y+38	; 0x26
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9a a3       	std	Y+34, r25	; 0x22
    18aa:	89 a3       	std	Y+33, r24	; 0x21
    18ac:	89 a1       	ldd	r24, Y+33	; 0x21
    18ae:	9a a1       	ldd	r25, Y+34	; 0x22
    18b0:	9e 8f       	std	Y+30, r25	; 0x1e
    18b2:	8d 8f       	std	Y+29, r24	; 0x1d
    18b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_sendCommand+0x1f6>
    18bc:	9e 8f       	std	Y+30, r25	; 0x1e
    18be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	6a ad       	ldd	r22, Y+58	; 0x3a
    18c4:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e8       	ldi	r26, 0x80	; 128
    18ce:	bf e3       	ldi	r27, 0x3F	; 63
    18d0:	89 8f       	std	Y+25, r24	; 0x19
    18d2:	9a 8f       	std	Y+26, r25	; 0x1a
    18d4:	ab 8f       	std	Y+27, r26	; 0x1b
    18d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d8:	69 8d       	ldd	r22, Y+25	; 0x19
    18da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a e7       	ldi	r20, 0x7A	; 122
    18e6:	53 e4       	ldi	r21, 0x43	; 67
    18e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	8d 8b       	std	Y+21, r24	; 0x15
    18f2:	9e 8b       	std	Y+22, r25	; 0x16
    18f4:	af 8b       	std	Y+23, r26	; 0x17
    18f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18f8:	6d 89       	ldd	r22, Y+21	; 0x15
    18fa:	7e 89       	ldd	r23, Y+22	; 0x16
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	2c f4       	brge	.+10     	; 0x191a <LCD_sendCommand+0x258>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	3f c0       	rjmp	.+126    	; 0x1998 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    191a:	6d 89       	ldd	r22, Y+21	; 0x15
    191c:	7e 89       	ldd	r23, Y+22	; 0x16
    191e:	8f 89       	ldd	r24, Y+23	; 0x17
    1920:	98 8d       	ldd	r25, Y+24	; 0x18
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	3f ef       	ldi	r19, 0xFF	; 255
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	57 e4       	ldi	r21, 0x47	; 71
    192a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    192e:	18 16       	cp	r1, r24
    1930:	4c f5       	brge	.+82     	; 0x1984 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	69 8d       	ldd	r22, Y+25	; 0x19
    1934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e2       	ldi	r20, 0x20	; 32
    1940:	51 e4       	ldi	r21, 0x41	; 65
    1942:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9c 8b       	std	Y+20, r25	; 0x14
    1958:	8b 8b       	std	Y+19, r24	; 0x13
    195a:	0f c0       	rjmp	.+30     	; 0x197a <LCD_sendCommand+0x2b8>
    195c:	89 e1       	ldi	r24, 0x19	; 25
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9a 8b       	std	Y+18, r25	; 0x12
    1962:	89 8b       	std	Y+17, r24	; 0x11
    1964:	89 89       	ldd	r24, Y+17	; 0x11
    1966:	9a 89       	ldd	r25, Y+18	; 0x12
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_sendCommand+0x2a6>
    196c:	9a 8b       	std	Y+18, r25	; 0x12
    196e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1970:	8b 89       	ldd	r24, Y+19	; 0x13
    1972:	9c 89       	ldd	r25, Y+20	; 0x14
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	9c 8b       	std	Y+20, r25	; 0x14
    1978:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	8b 89       	ldd	r24, Y+19	; 0x13
    197c:	9c 89       	ldd	r25, Y+20	; 0x14
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	69 f7       	brne	.-38     	; 0x195c <LCD_sendCommand+0x29a>
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1984:	6d 89       	ldd	r22, Y+21	; 0x15
    1986:	7e 89       	ldd	r23, Y+22	; 0x16
    1988:	8f 89       	ldd	r24, Y+23	; 0x17
    198a:	98 8d       	ldd	r25, Y+24	; 0x18
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9c 8b       	std	Y+20, r25	; 0x14
    1996:	8b 8b       	std	Y+19, r24	; 0x13
    1998:	8b 89       	ldd	r24, Y+19	; 0x13
    199a:	9c 89       	ldd	r25, Y+20	; 0x14
    199c:	98 8b       	std	Y+16, r25	; 0x10
    199e:	8f 87       	std	Y+15, r24	; 0x0f
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	98 89       	ldd	r25, Y+16	; 0x10
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_sendCommand+0x2e2>
    19a8:	98 8b       	std	Y+16, r25	; 0x10
    19aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	bf e3       	ldi	r27, 0x3F	; 63
    19be:	8b 87       	std	Y+11, r24	; 0x0b
    19c0:	9c 87       	std	Y+12, r25	; 0x0c
    19c2:	ad 87       	std	Y+13, r26	; 0x0d
    19c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a e7       	ldi	r20, 0x7A	; 122
    19d4:	53 e4       	ldi	r21, 0x43	; 67
    19d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8f 83       	std	Y+7, r24	; 0x07
    19e0:	98 87       	std	Y+8, r25	; 0x08
    19e2:	a9 87       	std	Y+9, r26	; 0x09
    19e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e6:	6f 81       	ldd	r22, Y+7	; 0x07
    19e8:	78 85       	ldd	r23, Y+8	; 0x08
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <LCD_sendCommand+0x346>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <LCD_sendCommand+0x3a6>
    1a4a:	89 e1       	ldi	r24, 0x19	; 25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_sendCommand+0x394>
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	9e 81       	ldd	r25, Y+6	; 0x06
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <LCD_sendCommand+0x388>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9e 83       	std	Y+6, r25	; 0x06
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x3d0>
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1a9a:	ea 96       	adiw	r28, 0x3a	; 58
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	ea 97       	sbiw	r28, 0x3a	; 58
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1ac2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e8       	ldi	r26, 0x80	; 128
    1ade:	bf e3       	ldi	r27, 0x3F	; 63
    1ae0:	8d ab       	std	Y+53, r24	; 0x35
    1ae2:	9e ab       	std	Y+54, r25	; 0x36
    1ae4:	af ab       	std	Y+55, r26	; 0x37
    1ae6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aea:	7e a9       	ldd	r23, Y+54	; 0x36
    1aec:	8f a9       	ldd	r24, Y+55	; 0x37
    1aee:	98 ad       	ldd	r25, Y+56	; 0x38
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a e7       	ldi	r20, 0x7A	; 122
    1af6:	53 e4       	ldi	r21, 0x43	; 67
    1af8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	89 ab       	std	Y+49, r24	; 0x31
    1b02:	9a ab       	std	Y+50, r25	; 0x32
    1b04:	ab ab       	std	Y+51, r26	; 0x33
    1b06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1b2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b30:	9c a9       	ldd	r25, Y+52	; 0x34
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6d a9       	ldd	r22, Y+53	; 0x35
    1b44:	7e a9       	ldd	r23, Y+54	; 0x36
    1b46:	8f a9       	ldd	r24, Y+55	; 0x37
    1b48:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	98 ab       	std	Y+48, r25	; 0x30
    1b68:	8f a7       	std	Y+47, r24	; 0x2f
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <LCD_displayCharacter+0xde>
    1b6c:	89 e1       	ldi	r24, 0x19	; 25
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
    1b74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_displayCharacter+0xcc>
    1b7c:	9e a7       	std	Y+46, r25	; 0x2e
    1b7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	98 a9       	ldd	r25, Y+48	; 0x30
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <LCD_displayCharacter+0xc0>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	98 ab       	std	Y+48, r25	; 0x30
    1ba6:	8f a7       	std	Y+47, r24	; 0x2f
    1ba8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1baa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
    1bb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_displayCharacter+0x108>
    1bb8:	9c a7       	std	Y+44, r25	; 0x2c
    1bba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	62 e0       	ldi	r22, 0x02	; 2
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e8       	ldi	r26, 0x80	; 128
    1bcc:	bf e3       	ldi	r27, 0x3F	; 63
    1bce:	8f a3       	std	Y+39, r24	; 0x27
    1bd0:	98 a7       	std	Y+40, r25	; 0x28
    1bd2:	a9 a7       	std	Y+41, r26	; 0x29
    1bd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bda:	89 a5       	ldd	r24, Y+41	; 0x29
    1bdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a e7       	ldi	r20, 0x7A	; 122
    1be4:	53 e4       	ldi	r21, 0x43	; 67
    1be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8b a3       	std	Y+35, r24	; 0x23
    1bf0:	9c a3       	std	Y+36, r25	; 0x24
    1bf2:	ad a3       	std	Y+37, r26	; 0x25
    1bf4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9a a3       	std	Y+34, r25	; 0x22
    1c14:	89 a3       	std	Y+33, r24	; 0x21
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1c18:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6f a1       	ldd	r22, Y+39	; 0x27
    1c32:	78 a5       	ldd	r23, Y+40	; 0x28
    1c34:	89 a5       	ldd	r24, Y+41	; 0x29
    1c36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a a3       	std	Y+34, r25	; 0x22
    1c56:	89 a3       	std	Y+33, r24	; 0x21
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_displayCharacter+0x1cc>
    1c5a:	89 e1       	ldi	r24, 0x19	; 25
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	98 a3       	std	Y+32, r25	; 0x20
    1c60:	8f 8f       	std	Y+31, r24	; 0x1f
    1c62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c64:	98 a1       	ldd	r25, Y+32	; 0x20
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_displayCharacter+0x1ba>
    1c6a:	98 a3       	std	Y+32, r25	; 0x20
    1c6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c70:	9a a1       	ldd	r25, Y+34	; 0x22
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_displayCharacter+0x1ae>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9a a3       	std	Y+34, r25	; 0x22
    1c94:	89 a3       	std	Y+33, r24	; 0x21
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ca0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_displayCharacter+0x1f6>
    1ca6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	6a ad       	ldd	r22, Y+58	; 0x3a
    1cae:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e8       	ldi	r26, 0x80	; 128
    1cb8:	bf e3       	ldi	r27, 0x3F	; 63
    1cba:	89 8f       	std	Y+25, r24	; 0x19
    1cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	53 e4       	ldi	r21, 0x43	; 67
    1cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8d 8b       	std	Y+21, r24	; 0x15
    1cdc:	9e 8b       	std	Y+22, r25	; 0x16
    1cde:	af 8b       	std	Y+23, r26	; 0x17
    1ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <LCD_displayCharacter+0x258>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
    1d02:	3f c0       	rjmp	.+126    	; 0x1d82 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1d04:	6d 89       	ldd	r22, Y+21	; 0x15
    1d06:	7e 89       	ldd	r23, Y+22	; 0x16
    1d08:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	4c f5       	brge	.+82     	; 0x1d6e <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
    1d42:	8b 8b       	std	Y+19, r24	; 0x13
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <LCD_displayCharacter+0x2b8>
    1d46:	89 e1       	ldi	r24, 0x19	; 25
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9a 8b       	std	Y+18, r25	; 0x12
    1d4c:	89 8b       	std	Y+17, r24	; 0x11
    1d4e:	89 89       	ldd	r24, Y+17	; 0x11
    1d50:	9a 89       	ldd	r25, Y+18	; 0x12
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_displayCharacter+0x2a6>
    1d56:	9a 8b       	std	Y+18, r25	; 0x12
    1d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <LCD_displayCharacter+0x29a>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d70:	7e 89       	ldd	r23, Y+22	; 0x16
    1d72:	8f 89       	ldd	r24, Y+23	; 0x17
    1d74:	98 8d       	ldd	r25, Y+24	; 0x18
    1d76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
    1d82:	8b 89       	ldd	r24, Y+19	; 0x13
    1d84:	9c 89       	ldd	r25, Y+20	; 0x14
    1d86:	98 8b       	std	Y+16, r25	; 0x10
    1d88:	8f 87       	std	Y+15, r24	; 0x0f
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	98 89       	ldd	r25, Y+16	; 0x10
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <LCD_displayCharacter+0x2e2>
    1d92:	98 8b       	std	Y+16, r25	; 0x10
    1d94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	62 e0       	ldi	r22, 0x02	; 2
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	53 e4       	ldi	r21, 0x43	; 67
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_displayCharacter+0x3a6>
    1e34:	89 e1       	ldi	r24, 0x19	; 25
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayCharacter+0x394>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_displayCharacter+0x388>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_displayCharacter+0x3d0>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e84:	ea 96       	adiw	r28, 0x3a	; 58
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <LCD_displayString+0x6>
    1e9c:	0f 92       	push	r0
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9b 83       	std	Y+3, r25	; 0x03
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	28 2f       	mov	r18, r24
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	e2 0f       	add	r30, r18
    1eb8:	f3 1f       	adc	r31, r19
    1eba:	80 81       	ld	r24, Z
    1ebc:	0e 94 56 0d 	call	0x1aac	; 0x1aac <LCD_displayCharacter>
		i++;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	80 81       	ld	r24, Z
    1ed8:	88 23       	and	r24, r24
    1eda:	39 f7       	brne	.-50     	; 0x1eaa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <LCD_moveCursor+0x6>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <LCD_moveCursor+0x8>
    1ef0:	0f 92       	push	r0
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
    1ef8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	3d 83       	std	Y+5, r19	; 0x05
    1f02:	2c 83       	std	Y+4, r18	; 0x04
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	c1 f0       	breq	.+48     	; 0x1f3e <LCD_moveCursor+0x56>
    1f0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f10:	3d 81       	ldd	r19, Y+5	; 0x05
    1f12:	22 30       	cpi	r18, 0x02	; 2
    1f14:	31 05       	cpc	r19, r1
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <LCD_moveCursor+0x3a>
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	61 f0       	breq	.+24     	; 0x1f38 <LCD_moveCursor+0x50>
    1f20:	19 c0       	rjmp	.+50     	; 0x1f54 <LCD_moveCursor+0x6c>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	69 f0       	breq	.+26     	; 0x1f46 <LCD_moveCursor+0x5e>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	91 05       	cpc	r25, r1
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <LCD_moveCursor+0x66>
    1f36:	0e c0       	rjmp	.+28     	; 0x1f54 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	0b c0       	rjmp	.+22     	; 0x1f54 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	80 5c       	subi	r24, 0xC0	; 192
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	07 c0       	rjmp	.+14     	; 0x1f54 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	80 5f       	subi	r24, 0xF0	; 240
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	80 5b       	subi	r24, 0xB0	; 176
    1f52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	80 68       	ori	r24, 0x80	; 128
    1f58:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_sendCommand>
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <LCD_displayStringRowColumn+0x6>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <LCD_displayStringRowColumn+0x8>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	6a 83       	std	Y+2, r22	; 0x02
    1f7c:	5c 83       	std	Y+4, r21	; 0x04
    1f7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	6a 81       	ldd	r22, Y+2	; 0x02
    1f84:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_displayString>
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	62 97       	sbiw	r28, 0x12	; 18
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	9a 8b       	std	Y+18, r25	; 0x12
    1fb4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fb6:	89 89       	ldd	r24, Y+17	; 0x11
    1fb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fba:	9e 01       	movw	r18, r28
    1fbc:	2f 5f       	subi	r18, 0xFF	; 255
    1fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc0:	b9 01       	movw	r22, r18
    1fc2:	4a e0       	ldi	r20, 0x0A	; 10
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	0e 94 60 11 	call	0x22c0	; 0x22c0 <itoa>
   LCD_displayString(buff); /* Display the string */
    1fca:	ce 01       	movw	r24, r28
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <LCD_displayString>
}
    1fd2:	62 96       	adiw	r28, 0x12	; 18
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <LCD_sendCommand>
}
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <LM35_getTemperature>:
 * Function responsible for calculate the temperature from the ADC digital value.
 * Args :
 *  In :  ADC_ConfigType * Config_Ptr
 */
uint8 LM35_getTemperature(const ADC_ConfigType * Config_Ptr)
{
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <LM35_getTemperature+0xe>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <LM35_getTemperature+0x10>
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	9d 83       	std	Y+5, r25	; 0x05
    2010:	8c 83       	std	Y+4, r24	; 0x04
	uint8 temp_value = 0;
    2012:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2014:	1a 82       	std	Y+2, r1	; 0x02
    2016:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <ADC_readChannel>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*VREF[(Config_Ptr->ref_volt)])\
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	cc 01       	movw	r24, r24
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	26 e9       	ldi	r18, 0x96	; 150
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2048:	7b 01       	movw	r14, r22
    204a:	8c 01       	movw	r16, r24
    204c:	ec 81       	ldd	r30, Y+4	; 0x04
    204e:	fd 81       	ldd	r31, Y+5	; 0x05
    2050:	80 81       	ld	r24, Z
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	fc 01       	movw	r30, r24
    2060:	eb 57       	subi	r30, 0x7B	; 123
    2062:	fe 4f       	sbci	r31, 0xFE	; 254
    2064:	20 81       	ld	r18, Z
    2066:	31 81       	ldd	r19, Z+1	; 0x01
    2068:	42 81       	ldd	r20, Z+2	; 0x02
    206a:	53 81       	ldd	r21, Z+3	; 0x03
    206c:	c8 01       	movw	r24, r16
    206e:	b7 01       	movw	r22, r14
    2070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 ed       	ldi	r19, 0xD0	; 208
    2080:	4f eb       	ldi	r20, 0xBF	; 191
    2082:	54 e4       	ldi	r21, 0x44	; 68
    2084:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8b 83       	std	Y+3, r24	; 0x03
	/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));

	return temp_value;
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	08 95       	ret

000020b4 <DcMotor_Init>:
 *					  the two motor pins through the GPIO driver.
 *					  2-Stop at the DC-Motor at the beginning through the GPIO driver.
 *		Args : none
 *		return type : void
 ***************************************************************************/
void DcMotor_Init(void){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
	/*Setting pins direction to be output pins */
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_FIRST_PIN,PIN_OUTPUT);
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT,MOTOR_SECOND_PIN,PIN_OUTPUT);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	/*
	 * FIRST AND SECOND BIT NEEDS TO BE ZERO TO TURN OFF THE MOTOR
	 */
	GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
}
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <DcMotor_Rotate>:
 *		Args :
 *		In : DcMotor_State state
 *		In : uint8 speed
 *		return : void
 ***************************************************************************/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <DcMotor_Rotate+0x6>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	6a 83       	std	Y+2, r22	; 0x02
	if(state==CW){
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	59 f4       	brne	.+22     	; 0x2114 <DcMotor_Rotate+0x2a>
		/*
		 * first pin = 0 , second pin = 1 , to make the motor rotate clockwise
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_HIGH);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    2112:	1b c0       	rjmp	.+54     	; 0x214a <DcMotor_Rotate+0x60>
	}
	else if(state==A_CW){
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	59 f4       	brne	.+22     	; 0x2130 <DcMotor_Rotate+0x46>
		/*
		 * first pin = 1 , second pin = 0 , to make the motor rotate clockwise
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_HIGH);
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    212e:	0d c0       	rjmp	.+26     	; 0x214a <DcMotor_Rotate+0x60>
	}
	else if(state==OFF){
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 23       	and	r24, r24
    2134:	51 f4       	brne	.+20     	; 0x214a <DcMotor_Rotate+0x60>
		/*
		 * both pins 0 to stop the motor
		 */
		GPIO_writePin(MOTOR_PORT, MOTOR_FIRST_PIN , LOGIC_LOW);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT, MOTOR_SECOND_PIN , LOGIC_LOW);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
	}
	PWM_Timer0_Start(speed); /* to start the pwm mode in timer0 with the required duty cycle*/
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	0e 94 ad 10 	call	0x215a	; 0x215a <PWM_Timer0_Start>
}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <PWM_Timer0_Start>:
 *		Args :
 *		In: uint8 duty_cycle
 *		return type : void
 ***************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <PWM_Timer0_Start+0x6>
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	8a 83       	std	Y+2, r24	; 0x02
	 * CS02 = 0 , CS01 = 1 , CS00 = 0
	 * For fast pwm mode
	 * WGM01 = WGM00 =1
	 */

	TCCR0=(1<<COM01)|(1<<CS01)|(1<<WGM01)|(1<<WGM00);
    2166:	e3 e5       	ldi	r30, 0x53	; 83
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	8a e6       	ldi	r24, 0x6A	; 106
    216c:	80 83       	st	Z, r24
	TCNT0=0; /* To reset the timer starting counter */
    216e:	e2 e5       	ldi	r30, 0x52	; 82
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	10 82       	st	Z, r1
	 * the passed value is the duty cycle percentage.
	 * it needs to be modified to be suitable for the PWM mode
	 * duty cycle = (duty cycle percentage * 256) / 100
	 */

	uint8 compare_value=(uint8)(((uint32)(duty_cycle*255))/100);
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	48 2f       	mov	r20, r24
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	ca 01       	movw	r24, r20
    217c:	9c 01       	movw	r18, r24
    217e:	22 0f       	add	r18, r18
    2180:	33 1f       	adc	r19, r19
    2182:	c9 01       	movw	r24, r18
    2184:	96 95       	lsr	r25
    2186:	98 2f       	mov	r25, r24
    2188:	88 27       	eor	r24, r24
    218a:	97 95       	ror	r25
    218c:	87 95       	ror	r24
    218e:	82 1b       	sub	r24, r18
    2190:	93 0b       	sbc	r25, r19
    2192:	84 0f       	add	r24, r20
    2194:	95 1f       	adc	r25, r21
    2196:	aa 27       	eor	r26, r26
    2198:	97 fd       	sbrc	r25, 7
    219a:	a0 95       	com	r26
    219c:	ba 2f       	mov	r27, r26
    219e:	24 e6       	ldi	r18, 0x64	; 100
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    21ae:	da 01       	movw	r26, r20
    21b0:	c9 01       	movw	r24, r18
    21b2:	89 83       	std	Y+1, r24	; 0x01

	OCR0=compare_value;
    21b4:	ec e5       	ldi	r30, 0x5C	; 92
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	63 e0       	ldi	r22, 0x03	; 3
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <__mulsi3>:
    21d0:	62 9f       	mul	r22, r18
    21d2:	d0 01       	movw	r26, r0
    21d4:	73 9f       	mul	r23, r19
    21d6:	f0 01       	movw	r30, r0
    21d8:	82 9f       	mul	r24, r18
    21da:	e0 0d       	add	r30, r0
    21dc:	f1 1d       	adc	r31, r1
    21de:	64 9f       	mul	r22, r20
    21e0:	e0 0d       	add	r30, r0
    21e2:	f1 1d       	adc	r31, r1
    21e4:	92 9f       	mul	r25, r18
    21e6:	f0 0d       	add	r31, r0
    21e8:	83 9f       	mul	r24, r19
    21ea:	f0 0d       	add	r31, r0
    21ec:	74 9f       	mul	r23, r20
    21ee:	f0 0d       	add	r31, r0
    21f0:	65 9f       	mul	r22, r21
    21f2:	f0 0d       	add	r31, r0
    21f4:	99 27       	eor	r25, r25
    21f6:	72 9f       	mul	r23, r18
    21f8:	b0 0d       	add	r27, r0
    21fa:	e1 1d       	adc	r30, r1
    21fc:	f9 1f       	adc	r31, r25
    21fe:	63 9f       	mul	r22, r19
    2200:	b0 0d       	add	r27, r0
    2202:	e1 1d       	adc	r30, r1
    2204:	f9 1f       	adc	r31, r25
    2206:	bd 01       	movw	r22, r26
    2208:	cf 01       	movw	r24, r30
    220a:	11 24       	eor	r1, r1
    220c:	08 95       	ret

0000220e <__udivmodsi4>:
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	1a 2e       	mov	r1, r26
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	fd 01       	movw	r30, r26
    2218:	0d c0       	rjmp	.+26     	; 0x2234 <__udivmodsi4_ep>

0000221a <__udivmodsi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	ee 1f       	adc	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	a2 17       	cp	r26, r18
    2224:	b3 07       	cpc	r27, r19
    2226:	e4 07       	cpc	r30, r20
    2228:	f5 07       	cpc	r31, r21
    222a:	20 f0       	brcs	.+8      	; 0x2234 <__udivmodsi4_ep>
    222c:	a2 1b       	sub	r26, r18
    222e:	b3 0b       	sbc	r27, r19
    2230:	e4 0b       	sbc	r30, r20
    2232:	f5 0b       	sbc	r31, r21

00002234 <__udivmodsi4_ep>:
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a 94       	dec	r1
    223e:	69 f7       	brne	.-38     	; 0x221a <__udivmodsi4_loop>
    2240:	60 95       	com	r22
    2242:	70 95       	com	r23
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret

00002252 <__prologue_saves__>:
    2252:	2f 92       	push	r2
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 1b       	sub	r28, r26
    227c:	db 0b       	sbc	r29, r27
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	09 94       	ijmp

0000228a <__epilogue_restores__>:
    228a:	2a 88       	ldd	r2, Y+18	; 0x12
    228c:	39 88       	ldd	r3, Y+17	; 0x11
    228e:	48 88       	ldd	r4, Y+16	; 0x10
    2290:	5f 84       	ldd	r5, Y+15	; 0x0f
    2292:	6e 84       	ldd	r6, Y+14	; 0x0e
    2294:	7d 84       	ldd	r7, Y+13	; 0x0d
    2296:	8c 84       	ldd	r8, Y+12	; 0x0c
    2298:	9b 84       	ldd	r9, Y+11	; 0x0b
    229a:	aa 84       	ldd	r10, Y+10	; 0x0a
    229c:	b9 84       	ldd	r11, Y+9	; 0x09
    229e:	c8 84       	ldd	r12, Y+8	; 0x08
    22a0:	df 80       	ldd	r13, Y+7	; 0x07
    22a2:	ee 80       	ldd	r14, Y+6	; 0x06
    22a4:	fd 80       	ldd	r15, Y+5	; 0x05
    22a6:	0c 81       	ldd	r16, Y+4	; 0x04
    22a8:	1b 81       	ldd	r17, Y+3	; 0x03
    22aa:	aa 81       	ldd	r26, Y+2	; 0x02
    22ac:	b9 81       	ldd	r27, Y+1	; 0x01
    22ae:	ce 0f       	add	r28, r30
    22b0:	d1 1d       	adc	r29, r1
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	ed 01       	movw	r28, r26
    22be:	08 95       	ret

000022c0 <itoa>:
    22c0:	fb 01       	movw	r30, r22
    22c2:	9f 01       	movw	r18, r30
    22c4:	e8 94       	clt
    22c6:	42 30       	cpi	r20, 0x02	; 2
    22c8:	c4 f0       	brlt	.+48     	; 0x22fa <itoa+0x3a>
    22ca:	45 32       	cpi	r20, 0x25	; 37
    22cc:	b4 f4       	brge	.+44     	; 0x22fa <itoa+0x3a>
    22ce:	4a 30       	cpi	r20, 0x0A	; 10
    22d0:	29 f4       	brne	.+10     	; 0x22dc <itoa+0x1c>
    22d2:	97 fb       	bst	r25, 7
    22d4:	1e f4       	brtc	.+6      	; 0x22dc <itoa+0x1c>
    22d6:	90 95       	com	r25
    22d8:	81 95       	neg	r24
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	64 2f       	mov	r22, r20
    22de:	77 27       	eor	r23, r23
    22e0:	0e 94 91 11 	call	0x2322	; 0x2322 <__udivmodhi4>
    22e4:	80 5d       	subi	r24, 0xD0	; 208
    22e6:	8a 33       	cpi	r24, 0x3A	; 58
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <itoa+0x2c>
    22ea:	89 5d       	subi	r24, 0xD9	; 217
    22ec:	81 93       	st	Z+, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	a1 f7       	brne	.-24     	; 0x22dc <itoa+0x1c>
    22f4:	16 f4       	brtc	.+4      	; 0x22fa <itoa+0x3a>
    22f6:	5d e2       	ldi	r21, 0x2D	; 45
    22f8:	51 93       	st	Z+, r21
    22fa:	10 82       	st	Z, r1
    22fc:	c9 01       	movw	r24, r18
    22fe:	0c 94 81 11 	jmp	0x2302	; 0x2302 <strrev>

00002302 <strrev>:
    2302:	dc 01       	movw	r26, r24
    2304:	fc 01       	movw	r30, r24
    2306:	67 2f       	mov	r22, r23
    2308:	71 91       	ld	r23, Z+
    230a:	77 23       	and	r23, r23
    230c:	e1 f7       	brne	.-8      	; 0x2306 <strrev+0x4>
    230e:	32 97       	sbiw	r30, 0x02	; 2
    2310:	04 c0       	rjmp	.+8      	; 0x231a <strrev+0x18>
    2312:	7c 91       	ld	r23, X
    2314:	6d 93       	st	X+, r22
    2316:	70 83       	st	Z, r23
    2318:	62 91       	ld	r22, -Z
    231a:	ae 17       	cp	r26, r30
    231c:	bf 07       	cpc	r27, r31
    231e:	c8 f3       	brcs	.-14     	; 0x2312 <strrev+0x10>
    2320:	08 95       	ret

00002322 <__udivmodhi4>:
    2322:	aa 1b       	sub	r26, r26
    2324:	bb 1b       	sub	r27, r27
    2326:	51 e1       	ldi	r21, 0x11	; 17
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <__udivmodhi4_ep>

0000232a <__udivmodhi4_loop>:
    232a:	aa 1f       	adc	r26, r26
    232c:	bb 1f       	adc	r27, r27
    232e:	a6 17       	cp	r26, r22
    2330:	b7 07       	cpc	r27, r23
    2332:	10 f0       	brcs	.+4      	; 0x2338 <__udivmodhi4_ep>
    2334:	a6 1b       	sub	r26, r22
    2336:	b7 0b       	sbc	r27, r23

00002338 <__udivmodhi4_ep>:
    2338:	88 1f       	adc	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	5a 95       	dec	r21
    233e:	a9 f7       	brne	.-22     	; 0x232a <__udivmodhi4_loop>
    2340:	80 95       	com	r24
    2342:	90 95       	com	r25
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	08 95       	ret

0000234a <_exit>:
    234a:	f8 94       	cli

0000234c <__stop_program>:
    234c:	ff cf       	rjmp	.-2      	; 0x234c <__stop_program>
